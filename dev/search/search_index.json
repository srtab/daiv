{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DAIV : Development AI Assistant","text":"<p>DAIV is an open-source automation assistant that enhances developer productivity using AI agents. It integrates with your repositories to streamline development by:</p> <ul> <li>\ud83d\ude80 Planning and executing codebase changes based on issues.</li> <li>\ud83d\udd04 Automatically responding to reviewer comments, adjusting code, and improving pull requests.</li> <li>\ud83d\udd0d Monitoring CI/CD logs and applying fixes automatically when pipelines fail.</li> <li>\ud83d\udcac Answering questions about your codebase via chat using built-in RAG engine.</li> </ul>"},{"location":"#how-it-works","title":"\ud83d\udee0\ufe0f How It Works","text":"<p>DAIV is designed to integrate directly with GIT platforms without a separate interface. The goal is to allow you to continue using the workflow you're used to without having to worry about learning a new tool.</p> <p>Platform APIs and webhooks are used to monitor and automatically respond to key repository events. The most important events supported are:</p> <ul> <li>\u2728 Issue created</li> <li>\ud83d\udcdd Issue updated</li> <li>\ud83d\udcac Comment added to issue</li> <li>\ud83d\udcac Comment added to merge request</li> <li>\ud83d\udea6 Pipeline status changed (success/failure)</li> <li>\ud83d\udce4 Push to repository branch</li> </ul> <p>When an event is detected, DAIV takes action based on the event type and repository configuration. Here's an overview:</p> Event Action \u2728 Issue created Generate a plan to address the new issue \ud83d\udcdd Issue updated Replan if the title or description has changed \ud83d\udcac Comment on an issue Execute the plan after explicit approval \ud83d\udcac Comment on a merge request If changes are requested, update the codebase; otherwise, reply to the comment \ud83d\udea6 Pipeline failed Analyze logs, troubleshoot, and fix codebase issues if found; otherwise, suggest pipeline fixes in a comment \ud83d\udce4 Push to a repository branch Re-index the codebase to reflect new changes"},{"location":"#supported-git-platforms","title":"\ud83d\udd0c Supported Git Platforms","text":"<p>DAIV currently supports:</p> <ul> <li> GitLab</li> </ul> <p>GitHub Support</p> <p> GitHub is not supported yet, but it is planned for the future. Contributions are welcome!</p>"},{"location":"community/","title":"Community","text":"<p>DAIV is an open-source project currently in its early community-building phase. While our contributor base is small, we're actively seeking to grow and welcome new members to help shape the project's future. We believe that a strong community is essential to building robust, innovative software that meets real-world needs. Whether you're a developer, user, or enthusiast, your involvement would be valuable and appreciated. This document outlines how you can participate in and contribute to the DAIV community.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>There are many ways to contribute to DAIV, regardless of your technical background:</p> <ul> <li>Code Contributions: Implement new features, fix bugs, or improve performance</li> <li>Documentation: Help improve or translate documentation</li> <li>Testing: Test the software and report bugs or suggest improvements</li> <li>Community Support: Help answer questions from other users</li> <li>Feedback: Share your experience using DAIV and suggest improvements</li> </ul> <p>For detailed technical contribution guidelines, including code style, testing requirements, and the pull request process, please refer to our CONTRIBUTING.md document.</p>"},{"location":"community/#communication-channels","title":"Communication Channels","text":"<p>GitHub Issues are the primary communication channel for the DAIV community. We use issues for:</p> <ul> <li>Bug Reports: Report problems or unexpected behavior</li> <li>Feature Requests: Suggest new features or improvements</li> <li>Questions: Ask for help or clarification about using DAIV</li> <li>Discussions: Engage in broader discussions about DAIV's direction</li> </ul> <p>When using GitHub Issues:</p> <ol> <li>Search First: Check if your issue or question has already been addressed</li> <li>Use Templates: Follow the issue templates when available</li> <li>Be Specific: Provide clear, concise information</li> <li>Be Respectful: Follow our code of conduct in all communications</li> <li>Tag Appropriately: Use labels to categorize your issues correctly</li> </ol>"},{"location":"community/#reporting-issues","title":"Reporting Issues","text":"<p>Effective issue reporting helps us improve DAIV more quickly. When reporting issues:</p> <ol> <li>Provide Context: Include your environment details (Python version, OS, etc.)</li> <li>Be Specific: Clearly describe what happened and what you expected to happen</li> <li>Reproduce: Include steps to reproduce the issue</li> <li>Evidence: Add screenshots, logs, or error messages when applicable</li> <li>Search First: Check if the issue has already been reported</li> </ol> <p>For security issues, please follow responsible disclosure practices as outlined in CONTRIBUTING.md.</p>"},{"location":"community/#getting-help","title":"Getting Help","text":"<p>If you need help with using DAIV, troubleshooting issues, or understanding the codebase:</p> <ol> <li>Documentation: Check the existing documentation first</li> <li>GitHub Issues: Search for similar questions in closed issues</li> <li>Open an Issue: If you can't find an answer, open a new issue with the \"question\" label</li> <li>Be Patient: Remember that DAIV is maintained by volunteers who may not respond immediately</li> </ol> <p>When asking for help, provide as much relevant information as possible to make it easier for others to assist you.</p>"},{"location":"community/#code-of-conduct","title":"Code of Conduct","text":"<p>The DAIV community is dedicated to providing a welcoming, inclusive, and harassment-free experience for everyone. We expect all community members to:</p> <ul> <li>Be respectful and considerate</li> <li>Be collaborative and constructive</li> <li>Focus on what is best for the community</li> <li>Show empathy towards other community members</li> </ul> <p>For more details on expected behavior and enforcement procedures, please refer to the Code of Conduct section in our CONTRIBUTING.md document.</p>"},{"location":"community/#recognition","title":"Recognition","text":"<p>We value and recognize all contributions to DAIV:</p> <ul> <li>Contributors: All contributors are acknowledged in our repository</li> <li>Maintainers: Active contributors may be invited to become maintainers with additional repository access</li> <li>Attribution: We ensure proper attribution for code, documentation, and other contributions</li> </ul> <p>We believe in celebrating the work of our community members and ensuring that all contributions, big or small, are recognized and appreciated.</p>"},{"location":"community/#community-resources","title":"Community Resources","text":"<p>The following resources are available to the DAIV community:</p> <ul> <li>GitHub Repository: https://github.com/srtab/daiv</li> <li>Documentation: Available at https://srtab.github.io/daiv/dev/</li> <li>Issue Tracker: For bug reports, feature requests, and discussions</li> <li>README: For an overview of DAIV's features and setup instructions</li> <li>CONTRIBUTING.md: For detailed contribution guidelines</li> </ul> <p>These resources are maintained by the community and are continuously improved based on feedback and contributions.</p>"},{"location":"community/#future-community-plans","title":"Future Community Plans","text":"<p>As DAIV grows, we plan to expand our community initiatives:</p> <ul> <li>Enhanced Documentation: Continuously improving our documentation based on user feedback</li> <li>Community Showcases: Highlighting interesting use cases and implementations</li> <li>Potential Community Meetings: While we don't currently hold regular community meetings, we may introduce them in the future as the community grows</li> <li>Contribution Guides: Developing more detailed guides for specific types of contributions</li> </ul> <p>We're committed to building a vibrant, inclusive community around DAIV and welcome your suggestions for improving our community processes and resources.</p>"},{"location":"ai-agents/code-review-addressor/","title":"\ud83d\udcac Code Review Addressor","text":"<p>The Code Review Addressor is an AI agent that assists with code review comments. It provides context-aware answers or directly applies requested changes to the code. This reduces the overhead of going back and forth on merge requests.</p>"},{"location":"ai-agents/codebase-chat/","title":"\ud83e\udde0 Codebase Chat","text":"<p>The Codebase Chat is a feature that allows you to chat with your codebase. It is a ChatGPT-like experience to chat with your codebase and get answers.</p>"},{"location":"ai-agents/issue-addressor/","title":"\ud83d\ude80 Issue Addressor","text":"<p>The Issue Addressor is an AI agent that assists with issue implementation. It provides a step-by-step plan to address the issue. After the plan is approved, it can execute the code changes and open a merge request for you to review.</p>"},{"location":"ai-agents/pipeline-fixing/","title":"\ud83d\udd27 Pipeline Fixing","text":"<p>The Pipeline Fixer is an AI agent that troubleshoots failed pipelines and tries to fix them automatically.</p>"},{"location":"getting-started/environment-variables/","title":"Environment Variables","text":"<p>Work in Progress</p> <p>This section is under construction.</p>"},{"location":"getting-started/repository-configurations/","title":"Repository Configurations","text":"<p>Customize DAIV for your repository using a <code>.daiv.yml</code> file in the default branch and repository root.</p> <p>This file lets you control features, code formatting, and more.</p>"},{"location":"getting-started/repository-configurations/#example-configuration","title":"Example Configuration","text":"<p>Below is a complete example of a <code>.daiv.yml</code> file.</p> <p>You can copy and modify this template for your repository.</p> YAML<pre><code># Repository settings\ndefault_branch: main\nrepository_description: \"Python web application using Django and React. Follows PEP 8 standards and the Airbnb style guide for JavaScript.\"\nbranch_name_convention: \"Use 'feat/' for features, 'fix/' for bugfixes, 'docs/' for documentation\"\n\n# Feature toggles\nfeatures:\n  auto_address_review_enabled: true\n  auto_address_issues_enabled: true\n  autofix_pipeline_enabled: true\n\n# Code indexing\nextend_exclude_patterns:\n  - \"**/tests/**\"\n  - \"**/*.test.ts\"\n  - \"coverage/**\"\n  - \"*.min.js\"\n\n# Sandbox commands\ncommands:\n  base_image: \"python:3.12-alpine\"\n  install_dependencies: \"pip install -r requirements.txt\"\n  format_code: \"ruff check --fix &amp;&amp; ruff format\"\n</code></pre>"},{"location":"getting-started/repository-configurations/#configure-repository-settings","title":"Configure Repository Settings","text":"<p>Repository settings control the default branch, repository description, and branch naming convention.</p> Option Type Default Description <code>default_branch</code> <code>str | null</code> Repository default branch The branch DAIV uses by default to load the <code>.daiv.yml</code> file. <code>repository_description</code> <code>str</code> <code>\"\"</code> A brief description to help agents understand your repository. Max 400 chars. <code>branch_name_convention</code> <code>str</code> <code>\"always start with 'daiv/' followed by a short description.\"</code> Naming convention for generating pull request branches. <p>Tip</p> <ul> <li>Use clear and simple branch-naming conventions.</li> <li>Keep descriptions concise and informative.</li> </ul>"},{"location":"getting-started/repository-configurations/#enable-or-disable-features","title":"Enable or Disable Features","text":"<p>Control which DAIV features are active in your repository.</p> <p>Under your <code>.daiv.yml</code> file's <code>features:</code> section, configure the following keys:</p> Feature Type Default Description <code>auto_address_review_enabled</code> <code>bool</code> <code>true</code> Enable the code review addressor agent. <code>auto_address_issues_enabled</code> <code>bool</code> <code>true</code> Enable the issue addressor agent. <code>autofix_pipeline_enabled</code> <code>bool</code> <code>true</code> Enable the pipeline fixing agent. <p>Tip</p> <p>Disable features you do not need to reduce noise and speed up processing.</p>"},{"location":"getting-started/repository-configurations/#customize-code-indexing","title":"Customize Code Indexing","text":"<p>Control which files DAIV indexes for context.</p> <p>Warning</p> <p>Files excluded from indexing will not be available to DAIV's AI agents.</p> Option Type Default Description <code>extend_exclude_patterns</code> <code>list[str]</code> <code>[]</code> Add patterns to exclude more files from indexing. <code>exclude_patterns</code> <code>list[str]</code> <code>[\"*package-lock.json\", \"*.lock\", \"*.svg\", \"*.pyc\", \"*.log\", \"*.zip\", \"*.coverage\", \"*.sql\", \"**/.git/**\", \"**/.mypy_cache/**\", \"**/.tox/**\", \"**/vendor/**\", \"**/venv/**\", \"**/.venv/**\", \"**/.env/**\", \"**/node_modules/**\", \"**/dist/**\", \"**/__pycache__/**\", \"**/data/**\", \"**/.idea/**\", \"**/.pytest_cache/**\", \"**/.ruff_cache/**\"]</code> Override the default exclude patterns. <p>Tip</p> <p>Exclude sensitive files and build artifacts. Prefer using <code>extend_exclude_patterns</code> to add more patterns.</p>"},{"location":"getting-started/repository-configurations/#set-up-sandbox-commands","title":"Set Up Sandbox Commands","text":"<p>To use sandbox commands, you must have a <code>daiv-sandbox</code> instance running (see the daiv-sandbox repository for more information), and all three options below (<code>base_image</code>, <code>install_dependencies</code>, and <code>format_code</code>) must be set.</p> <p>Under your <code>.daiv.yml</code> file's <code>commands:</code> section, configure the following keys:</p> Option Type Default Description <code>base_image</code> <code>str</code> <code>null</code> Docker image for the sandbox. Use distro images only. <code>install_dependencies</code> <code>str</code> <code>null</code> Command to install project dependencies. <code>format_code</code> <code>str</code> <code>null</code> Command to format code before committing. <p>Here's how it works:</p> <p>Before committing code generated by DAIV, DAIV will call <code>daiv-sandbox</code> to:</p> <ul> <li>Create a container from the <code>base_image</code>.</li> <li>Execute the <code>install_dependencies</code> command in the container.</li> <li>Execute the <code>format_code</code> command in the container after the <code>install_dependencies</code> command executed successfully.</li> </ul> <p>Warning</p> <p>If any of the commands fail, DAIV will commit the code as is to be manually fixed, if needed.</p> <p>Tip</p> <p>Use specific image versions for reproducibility.</p>"},{"location":"getting-started/supported-providers/","title":"Supported Providers","text":"<p>DAIV currently supports integration with the following LLM providers:</p> <ul> <li>OpenRouter</li> <li>OpenAI</li> <li>Anthropic</li> <li>Gemini</li> </ul> <p>A combination of providers may be configured. For example, you can use OpenAI provider for one agent and Gemini provider for another.</p>"},{"location":"getting-started/supported-providers/#openrouter","title":"OpenRouter","text":"<p>OpenRouter is the default provider for DAIV due to its fallback mechanism and wide range of models from multiple providers.</p> <p>Setup:</p> <ol> <li>Obtain an API key from OpenRouter Settings.</li> <li>Set the <code>OPENROUTER_API_KEY</code> environment variable:    Bash<pre><code>export OPENROUTER_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by OpenRouter, prefixed with <code>openrouter:</code>. For example:</p> Text Only<pre><code>openrouter:openai/gpt-4.1\nopenrouter:anthropic/claude-3-7-sonnet\n</code></pre>"},{"location":"getting-started/supported-providers/#openai","title":"OpenAI","text":"<p>Setup:</p> <ol> <li>Obtain an API key from OpenAI.</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable:    Bash<pre><code>export OPENAI_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by OpenAI. For example:</p> Text Only<pre><code>gpt-4.1\no4-mini\n</code></pre>"},{"location":"getting-started/supported-providers/#anthropic","title":"Anthropic","text":"<p>Setup:</p> <ol> <li>Obtain an API key from Anthropic.</li> <li>Set the <code>ANTHROPIC_API_KEY</code> environment variable:    Bash<pre><code>export ANTHROPIC_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by Anthropic. For example:</p> Text Only<pre><code>claude-3-7-sonnet-20250219\nclaude-3-5-sonnet-20241022\n</code></pre> <p>Warning</p> <p>We love Anthropic, but unfortunately their API is very unstable and often returns errors. Also, the rate limits could be exceeded very quickly.</p>"},{"location":"getting-started/supported-providers/#gemini","title":"Gemini","text":"<p>Setup:</p> <ol> <li>Obtain an API key from AI Studio.</li> <li>Set the <code>GOOGLE_API_KEY</code> environment variable:    Bash<pre><code>export GOOGLE_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by Gemini. For example:</p> Text Only<pre><code>gemini-2.4-flash-preview-04-17\ngemini-2.5-pro-preview-05-06\n</code></pre>"},{"location":"getting-started/up-and-running/","title":"Up and Running","text":"<p>This guide will walk you through the process of deploying DAIV using different methods (Docker Swarm and Docker Compose). By following these instructions, you will have a fully functional DAIV instance connected to your codebase, ready to assist your team with code insights and automation.</p> <p>DAIV is designed to be deployed using container orchestration tools like Docker Swarm or Docker Compose, making it easy to set up and maintain. To run a complete DAIV instance, you'll need to deploy the following core services:</p> <ul> <li>PostgreSQL with pgvector extension.</li> <li>Redis;</li> <li>DAIV Application;</li> <li>DAIV Worker;</li> </ul> <p>Additionally, you can configure DAIV Sandbox to allow DAIV to run arbitrary code or commands in an isolated environment:</p> <ul> <li>DAIV Sandbox.</li> </ul>"},{"location":"getting-started/up-and-running/#docker-swarm-recommended","title":"Docker Swarm (Recommended)","text":"<p>This guide will walk you through the steps to deploy a DAIV using Docker Swarm with minimal configuration. The guide only explains how to deploy the stack to a single server, if you want to deploy to multiple servers you can check the Docker Swarm documentation for more information.</p> <p>This guide assumes you have a basic understanding of Docker Swarm.</p> <p>Prerequisites</p> <ul> <li>Docker installed with Swarm enabled.</li> <li>Connection to the internet to pull the images.</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-create-docker-secrets","title":"Step 1: Create Docker Secrets","text":"<p>Before deploying the stack, the following secrets need to be created:</p> <ul> <li><code>django_secret_key</code>: A random secret key for Django. Generate a Django secret key.</li> <li><code>db_password</code>: A random password for the database.</li> <li><code>codebase_gitlab_auth_token</code>: A personal access token with <code>api</code> scope from your GitLab instance. DAIV will use this token to access the codebase.</li> <li><code>codebase_gitlab_webhook_secret</code>: A random secret to be used as webhook secret for GitLab.</li> <li><code>codebase_embeddings_api_key</code>: An API key from OpenAI (default embeddings provider) with access to <code>text-embedding-3-large</code> model.</li> <li><code>daiv_sandbox_api_key</code>: A random API key to authenticate requests to the Sandbox service.</li> <li><code>openrouter_api_key</code>: An API key for OpenRouter.</li> </ul> <p>You can create the secrets using the following command (for more info, check the Docker Secrets create documentation):</p> Bash<pre><code>docker secret create django_secret_key &lt;secret_key&gt;\n</code></pre> <p>Warning</p> <p>These are the minimal secrets required to run DAIV. Check the Environment Variables page for more information about secrets required for other services.</p>"},{"location":"getting-started/up-and-running/#step-2-create-stackyml-file","title":"Step 2: Create <code>stack.yml</code> file","text":"<p>Here's an example of a <code>stack.yml</code> file that can be used to deploy DAIV.</p> <p>Warning</p> <p>Remember to replace annotated environment variables with your own values.</p> <p>Check the Environment Variables page for more information about all supported environment variables.</p> YAML<pre><code>x-app-environment-defaults: &amp;app_environment_defaults\n  # DJANGO\n  DJANGO_SETTINGS_MODULE: daiv.settings.production\n  DJANGO_ALLOWED_HOSTS: your-hostname.com,app,127.0.0.1 (1)\n  DJANGO_REDIS_URL: redis://daiv_redis:6379/0\n  DJANGO_BROKER_URL: redis://daiv_redis:6379/0\n  DAIV_EXTERNAL_URL: https://your-hostname.com (2)\n  # DATABASE\n  DB_NAME: daiv\n  DB_USER: daiv_admin\n  DB_HOST: daiv_db\n  DB_SSLMODE: prefer\n  # CODEBASE\n  CODEBASE_CLIENT: gitlab\n  CODEBASE_GITLAB_URL: https://gitlab.com (3)\n  # SANDBOX\n  DAIV_SANDBOX_URL: http://sandbox:8000 (4)\n\nx-deploy-defaults: &amp;deploy_defaults\n  replicas: 1\n  update_config:\n    order: start-first\n    delay: 60s\n    failure_action: rollback\n  rollback_config:\n    parallelism: 0\n  restart_policy:\n    condition: any\n    window: 120s\n\nservices:\n  db:\n    image: pgvector/pgvector:pg17\n    environment:\n      - POSTGRES_DB=daiv\n      - POSTGRES_USER=daiv_admin\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password\n    networks:\n      - internal\n    secrets:\n      - db_password\n    volumes:\n      - db-volume:/var/lib/postgresql/data\n    stop_grace_period: 30s\n    healthcheck:\n      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER\n      interval: 10s\n      start_period: 120s\n    deploy:\n      replicas: 1\n      update_config:\n        failure_action: rollback\n        delay: 10s\n      rollback_config:\n        parallelism: 0\n      restart_policy:\n        condition: any\n        window: 120s\n\n  redis:\n    image: redis:7-alpine\n    networks:\n      - internal\n    volumes:\n      - redis-volume:/data\n    healthcheck:\n      test: redis-cli ping || exit 1\n      interval: 10s\n      start_period: 30s\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  app:\n    image: ghcr.io/srtab/daiv:latest (5)\n    environment:\n      &lt;&lt;: *app_environment_defaults\n    secrets:\n      - django_secret_key\n      - db_password\n      - codebase_gitlab_auth_token\n      - codebase_gitlab_webhook_secret\n      - codebase_embeddings_api_key\n      - daiv_sandbox_api_key\n      - openrouter_api_key\n    networks:\n      - internal\n      - external\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - tantivy-volume:/home/daiv/data/tantivy_index_v1\n      - embeddings-volume:/home/daiv/data/embeddings\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  worker:\n    image: ghcr.io/srtab/daiv:latest (5)\n    command: sh /home/daiv/start-worker\n    environment:\n      &lt;&lt;: *app_environment_defaults\n      CELERY_CONCURRENCY: 2 (6)\n    secrets:\n      - django_secret_key\n      - db_password\n      - codebase_gitlab_auth_token\n      - codebase_gitlab_webhook_secret\n      - codebase_embeddings_api_key\n      - daiv_sandbox_api_key\n      - openrouter_api_key\n    networks:\n      - internal\n    volumes:\n      - tantivy-volume:/home/daiv/data/tantivy_index_v1\n      - embeddings-volume:/home/daiv/data/embeddings\n    healthcheck:\n      test: celery -A daiv inspect ping\n      interval: 10s\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  sandbox:\n    image: ghcr.io/srtab/daiv-sandbox:latest (5)\n    environment:\n      DAIV_SANDBOX_KEEP_TEMPLATE: true (7)\n    networks:\n      - internal\n    secrets:\n      - daiv_sandbox_api_key\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock (8)\n      - $HOME/.docker/config.json:/home/app/.docker/config.json (9)\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\nnetworks:\n  internal:\n    driver: overlay\n  external:\n    driver: overlay\n\nvolumes:\n  db-volume:\n    driver: local\n  redis-volume:\n    driver: local\n  tantivy-volume:\n    driver: local\n  embeddings-volume:\n    driver: local\n\nsecrets:\n  django_secret_key:\n    external: true\n  db_password:\n    external: true\n  codebase_gitlab_auth_token:\n    external: true\n  codebase_gitlab_webhook_secret:\n    external: true\n  codebase_embeddings_api_key:\n    external: true\n  daiv_sandbox_api_key:\n    external: true\n  openrouter_api_key:\n    external: true\n</code></pre> <ol> <li>Replace <code>your-hostname.com</code> with your own hostname. Don't include the schema (e.g. <code>daiv.com</code>). Leave <code>webapp</code> and <code>127.0.0.1</code> as is to allow the app to be accessed from other services on the same host.</li> <li>Replace with your own hostname with schema included (e.g. <code>https://your-hostname.com</code>);</li> <li>Define with your GitLab instance URL (e.g. <code>https://gitlab.com</code>);</li> <li>This needs to point to the Sandbox service, if declared on the same stack define as <code>http://sandbox:8000</code>;</li> <li>It's advisable to replace with a specific version.</li> <li>Number of workers you want to run, this defines the number of parallel tasks that can be run at the same time.</li> <li>For more information about this option, check the DAIV Sandbox documentation.</li> <li>Sandbox service needs access to the Docker socket to be able to create containers.</li> <li>Docker configuration file to be able to pull images from a private registry. If you don't need it, you can remove the volume.</li> </ol>"},{"location":"getting-started/up-and-running/#step-3-deploy-the-stack","title":"Step 3: Deploy the stack","text":"<p>To deploy the stack, make sure you are at the directory containing the stack file and run the following command:</p> Bash<pre><code>docker stack deploy -c stack.yml daiv\n</code></pre> <p>To check the status of the stack, run the following command:</p> Bash<pre><code>docker stack ps daiv --no-trunc\n# or\ndocker ps\n</code></pre> <p>It can take a while for all services to be running and healthy.</p>"},{"location":"getting-started/up-and-running/#step-4-setup-webhooks","title":"Step 4: Setup Webhooks","text":"<p>Now that the stack is deployed, you need to setup the webhooks for your GitLab instance. You can do this by going to the <code>daiv_daiv</code> service and running the following command:</p> Bash<pre><code>docker exec -it $(docker ps -qf \"name=daiv_daiv\") django-admin setup_webhooks\n</code></pre>"},{"location":"getting-started/up-and-running/#step-5-index-the-codebase","title":"Step 5: Index the codebase","text":"<p>Finally, you need to index the codebase. DAIV will index all codebases it has access to.</p> <p>You can index the codebase by going to the <code>daiv_daiv</code> service and running the following command:</p> Bash<pre><code>docker exec -it $(docker ps -qf \"name=daiv_daiv\") django-admin update_index\n</code></pre> <p>Note</p> <p>You only need to run the <code>update_index</code> command on first deployment or when new codebases are added.</p> <p>After first run, the index will be updated automatically when a new commit is pushed to the codebase.</p>"},{"location":"getting-started/up-and-running/#step-6-next-steps","title":"Step 6: Next steps","text":"<p>Now that DAIV is running, check the Reverse Proxy guide to help you configure a reverse proxy to access DAIV.</p>"},{"location":"getting-started/up-and-running/#docker-compose","title":"Docker Compose","text":"<p>This guide will walk you through the steps to deploy DAIV using Docker Compose.</p> <p>Prerequisites</p> <ul> <li>Docker installed with Compose.</li> <li>Connection to the internet to pull the images.</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-create-docker-composeyml-file","title":"Step 1: Create <code>docker-compose.yml</code> file","text":"<p>Here's an example of a <code>docker-compose.yml</code> file that can be used to run DAIV.</p> <p>Info</p> <p>Remember to replace annotated environment variables with your own values. Check the Environment Variables page for more configuration options.</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  image: ghcr.io/srtab/daiv:latest\n  restart: unless-stopped\n  environment:\n    DJANGO_SECRET_KEY: secret-key (1)\n    DJANGO_ALLOWED_HOSTS: your-hostname.com,app,127.0.0.1 (2)\n    DJANGO_REDIS_URL: redis://redis:6379/0\n    DJANGO_BROKER_URL: redis://redis:6379/0\n    DAIV_EXTERNAL_URL: https://your-hostname.com (12)\n    # Database settings\n    DB_HOST: db\n    DB_NAME: daiv\n    DB_USER: daiv\n    DB_PASSWORD: daivpass (3)\n    DB_SSLMODE: prefer\n    # Codebase settings\n    CODEBASE_CLIENT: gitlab\n    CODEBASE_GITLAB_URL: https://gitlab.com (4)\n    CODEBASE_GITLAB_AUTH_TOKEN: gitlab-auth-token (5)\n    CODEBASE_GITLAB_WEBHOOK_SECRET: gitlab-webhook-secret (6)\n    CODEBASE_EMBEDDINGS_API_KEY: openai-api-key (7)\n    # LLM Providers settings\n    OPENROUTER_API_KEY: openrouter-api-key (8)\n    # Sandbox settings\n    DAIV_SANDBOX_API_KEY: daiv-sandbox-api-key (9)\n  volumes:\n    - tantivy-volume:/home/app/data/tantivy_index_v1\n    - embeddings-volume:/home/app/data/embeddings\n  depends_on:\n    db:\n      condition: service_healthy\n      restart: true\n    redis:\n      condition: service_healthy\n      restart: true\n    sandbox:\n      condition: service_healthy\n\nservices:\n  db:\n    image: pgvector/pgvector:pg17\n    container_name: daiv-db\n    restart: unless-stopped\n    environment:\n      POSTGRES_DB: daiv\n      POSTGRES_USER: daiv\n      POSTGRES_PASSWORD: daivpass (10)\n    volumes:\n      - db-volume:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U daiv -d daiv\"]\n      interval: 10s\n      timeout: 10s\n      start_period: 30s\n      retries: 5\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:latest\n    restart: unless-stopped\n    container_name: daiv-redis\n    volumes:\n      - redis-volume:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    ports:\n      - \"6379:6379\"\n\n  app:\n    &lt;&lt;: *x_app_default\n    container_name: daiv-app\n    command: sh /home/app/docker/start-app\n    ports:\n      - \"8000:8000\"\n\n  worker:\n    &lt;&lt;: *x_app_default\n    container_name: daiv-worker\n    command: sh /home/app/docker/start-worker\n    environment:\n      C_FORCE_ROOT: true\n    ports: []\n\n  sandbox:\n    image: ghcr.io/srtab/daiv-sandbox:latest\n    restart: unless-stopped\n    container_name: daiv-sandbox\n    environment:\n      DAIV_SANDBOX_API_KEY: daiv-sandbox-api-key (11)\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - $HOME/.docker/config.json:/home/app/.docker/config.json\n\nvolumes:\n  db-volume:\n    driver: local\n  redis-volume:\n    driver: local\n  tantivy-volume:\n    driver: local\n  embeddings-volume:\n    driver: local\n</code></pre> <ol> <li>Generate a Django secret key.</li> <li>Define the DAIV hostname. Don't include the schema (e.g. <code>daiv.com</code>).</li> <li>Generate a random password.</li> <li>Define with your GitLab instance URL (e.g. <code>https://gitlab.com</code>).</li> <li>Generate a personal access token with <code>api</code> scope from your GitLab instance.</li> <li>Generate a random webhook secret.</li> <li>Go to OpenAI and generate an API key with access to <code>text-embedding-3-large</code> model.</li> <li>Go to OpenRouter and generate an API key.</li> <li>Generate a random Sandbox API key.</li> <li>Define with the same API key you generated for the app service.</li> <li>Define with the same password you generated for the database.</li> <li>Define with DAIV hostname, including the schema (e.g. <code>https://your-hostname.com</code>).</li> </ol>"},{"location":"getting-started/up-and-running/#step-2-run-the-compose-file","title":"Step 2: Run the compose file","text":"<p>To run the compose file, make sure you are at the directory containing the file and run the following command:</p> Bash<pre><code>docker compose up -d\n</code></pre> <p>To check the status of the services, run the following command:</p> Bash<pre><code>docker compose ps\n</code></pre>"},{"location":"getting-started/up-and-running/#step-3-setup-webhooks","title":"Step 3: Setup Webhooks","text":"<p>Now that the stack is deployed, you need to setup the webhooks for your GitLab instance. You can do this by going to the <code>app</code> service and running the following command:</p> Bash<pre><code>docker compose exec -it app django-admin setup_webhooks --base-url https://your-hostname.com\n</code></pre>"},{"location":"getting-started/up-and-running/#step-4-index-the-codebase","title":"Step 4: Index the codebase","text":"<p>Finally, you need to index the codebase. DAIV will index all codebases it has access to.</p> <p>You can index the codebase by going to the <code>app</code> service and running the following command:</p> Bash<pre><code>docker compose exec -it app django-admin update_index\n</code></pre> <p>Note</p> <p>You only need to run the <code>update_index</code> command on first deployment or when new codebases are added.</p> <p>After first run, the index will be updated automatically when a new commit is pushed to the codebase.</p>"},{"location":"getting-started/up-and-running/#step-5-next-steps","title":"Step 5: Next steps","text":"<p>Now that DAIV is running, check the Reverse Proxy guide to help you configure a reverse proxy to access DAIV.</p>"},{"location":"getting-started/up-and-running/#reverse-proxy","title":"Reverse Proxy","text":"<p>This guide will walk you through the steps to configure Nginx as a reverse proxy for DAIV.</p> <p>It's assumed you have a basic understanding of Nginx.</p> <p>Contributions welcome!</p> <p>Only the Nginx configuration is provided in this guide. Contributions to other reverse proxy configurations are welcome!</p> <p>Prerequisites</p> <ul> <li>Nginx installed.</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-configure-nginx","title":"Step 1: Configure Nginx","text":"<p>Create a new configuration file for DAIV <code>/etc/nginx/conf.d/daiv.conf</code>. The path to the configuration may vary depending on the Operating System you are using.</p> <p>Add the following configuration and replace the values with your own:</p> Nginx Configuration File<pre><code>upstream daiv-instance {\n  server internal-ip:8000;  (1)\n}\n\nserver {\n  listen              443 ssl;\n  listen              [::]:443 ssl;\n\n  http2               on;\n\n  server_name         your-hostname.com;  (2)\n\n  # SSL Configuration.\n  # You can use this https://ssl-config.mozilla.org/ to generate\n  # the correct ssl configuration for your server.\n  ssl_certificate      /etc/pki/tls/certs/ssl.crt;  (3)\n  ssl_certificate_key  /etc/pki/tls/private/ssl.key;  (4)\n\n  ssl_protocols TLSv1.3;\n  ssl_ecdh_curve X25519:prime256v1:secp384r1;\n  ssl_prefer_server_ciphers off;\n\n  location / {\n    proxy_pass              http://daiv-instance;\n    proxy_set_header        Host $host;\n    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header        X-Forwarded-Proto $scheme;\n    proxy_set_header        X-Real-IP $remote_addr;\n    proxy_redirect          off;\n    proxy_buffering         off;\n    proxy_connect_timeout   60;\n    proxy_send_timeout      60;\n    proxy_read_timeout      60;\n\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n  }\n}\n\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    return 301 https://$host$request_uri;\n}\n</code></pre> <ol> <li>Define with the internal IP pointing to the service running DAIV. For instance, if you are running DAIV on the same server, you can use <code>localhost</code> or <code>127.0.0.1</code>.</li> <li>Define with your own hostname.</li> <li>Change to the path to your SSL certificate. The correct path depends on your operating system.</li> <li>Change to the path to your SSL certificate key. The correct path depends on your operating system.</li> </ol>"},{"location":"getting-started/up-and-running/#step-2-restart-nginx","title":"Step 2: Restart Nginx","text":"<p>Restart Nginx to apply the changes.</p> Bash<pre><code>systemctl restart nginx\n</code></pre>"}]}