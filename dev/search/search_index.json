{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DAIV : Development AI Assistant","text":"<p>Development teams spend countless hours on repetitive tasks: responding to code reviews, fixing broken builds, and manually implementing feature requests. DAIV changes this by bringing AI automation directly to your existing Git workflow.</p> <p>DAIV is an open-source AI assistant that automates development tasks using intelligent agents. It integrates with your repositories to handle routine work, letting you focus on creative problem-solving.</p>"},{"location":"#what-daiv-does","title":"\ud83c\udfaf What DAIV Does","text":"<p>DAIV automates four key development activities:</p> <ul> <li>\ud83d\ude80 Issue Resolution - Converts issue descriptions into working code automatically</li> <li>\ud83d\udd04 Code Review Response - Addresses reviewer feedback and updates pull requests</li> <li>\ud83d\udd0d Pipeline Repair - Monitors CI/CD failures and applies fixes automatically</li> <li>\ud83d\udcac Codebase Questions - Answers questions about your code using built-in search</li> <li>\u26a1 Quick Actions - Command-based interactions for common tasks on issues and merge requests</li> </ul>"},{"location":"#how-daiv-works","title":"\ud83d\udee0\ufe0f How DAIV Works","text":"<p>DAIV integrates directly with Git platforms using webhooks. No separate interface required. You continue using your existing workflow while DAIV handles automation in the background.</p>"},{"location":"#workflow-overview","title":"Workflow Overview","text":"<pre><code>graph TD\n    A[\"\ud83d\udc64 Developer\"] --&gt; B[\"\ud83d\udcdd Creates Issue\"]\n    B --&gt; C[\"\ud83e\udd16 DAIV Agent\"]\n    C --&gt; D[\"\ud83d\udccb Generates Plan\"]\n    D --&gt; E[\"\ud83d\udcac Posts Plan Comment\"]\n\n    A --&gt; F[\"\u2705 Approves Plan\"]\n    F --&gt; C\n    C --&gt; G[\"\ud83d\udd28 Executes Changes\"]\n    G --&gt; H[\"\ud83d\udce4 Creates Pull Request\"]\n\n    I[\"\ud83d\udea6 CI/CD Pipeline\"] --&gt; J[\"\u274c Fails\"]\n    J --&gt; C\n    C --&gt; K[\"\ud83d\udd0d Analyzes Logs\"]\n    K --&gt; L[\"\ud83d\udee0\ufe0f Applies Fixes\"]\n\n    M[\"\ud83d\udc65 Code Reviewer\"] --&gt; N[\"\ud83d\udcac Requests Changes\"]\n    N --&gt; C\n    C --&gt; O[\"\ud83d\udd04 Updates Code\"]\n    O --&gt; H\n\n    P[\"\ud83d\udce4 Code Push\"] --&gt; C\n    C --&gt; Q[\"\ud83d\uddc2\ufe0f Re-indexes Codebase\"]</code></pre>"},{"location":"#supported-events-and-actions","title":"Supported Events and Actions","text":"<p>DAIV monitors these repository events and responds automatically:</p> Repository Event DAIV Response Example \u2728 Issue created Generates implementation plan \"Add user authentication\" \u2192 detailed technical plan \ud83d\udcdd Issue updated Updates plan if title/description changed Issue scope changes \u2192 revised plan \ud83d\udcac Comment on issue Executes approved plan or Quick Action Developer approves \u2192 creates pull request with code \ud83d\udcac Comment on merge request Addresses review feedback, answers questions, or Quick Action \"Fix the bug in line 45\" \u2192 updates code \ud83d\udea6 Pipeline failure Analyzes logs and applies fixes Test failures \u2192 code fixes + updated tests \ud83d\udce4 Repository push Updates codebase index for future queries New commits \u2192 refreshed code understanding"},{"location":"#supported-platforms","title":"\ud83d\udd0c Supported Platforms","text":"<p>Currently supported:</p> <ul> <li> GitLab - Full feature support</li> </ul> <p>Coming soon:</p> <ul> <li> GitHub - Planned for future release</li> </ul> <p>Contributing</p> <p>Want GitHub support sooner? Contributions are welcome!</p>"},{"location":"#get-started","title":"\u23ed\ufe0f Get Started","text":""},{"location":"#step-1-installation","title":"Step 1: Installation","text":"<ul> <li>Set up DAIV - Install and configure DAIV in your environment</li> <li>Connect your repository - Link DAIV to your GitLab project</li> </ul>"},{"location":"#step-2-try-daiv","title":"Step 2: Try DAIV","text":"<ul> <li>Create a test issue - Write \"Add a hello world function\" and watch DAIV generate a plan</li> <li>Approve the plan - Comment \"Go ahead\" to see DAIV create a pull request with working code</li> </ul>"},{"location":"#step-3-customize","title":"Step 3: Customize","text":"<ul> <li>Configure agents - Adjust how DAIV's AI agents behave for your codebase</li> <li>Advanced settings - Fine-tune DAIV for your team's needs</li> </ul>"},{"location":"#step-4-learn-more","title":"Step 4: Learn More","text":"<ul> <li>Join discussions - Ask questions and share experiences</li> <li>Report bugs - Help improve DAIV</li> </ul>"},{"location":"#quick-example","title":"\ud83d\udca1 Quick Example","text":"<p>Here's what a typical DAIV interaction looks like:</p> <ol> <li>Developer creates issue: \"Add rate limiting to the API endpoints\"</li> <li>DAIV generates plan: Analyzes codebase and posts detailed implementation steps</li> <li>Developer approves: Comments \"Looks good, go ahead\"</li> <li>DAIV implements: Creates pull request with rate limiting code, tests, and documentation</li> <li>Reviewer requests changes: \"Use Redis instead of in-memory storage\"</li> <li>DAIV updates code: Automatically modifies the implementation to use Redis</li> </ol> <p>Result: Feature implemented in minutes, not hours.</p>"},{"location":"community/","title":"Community","text":"<p>DAIV is an open-source project currently in its early community-building phase. While our contributor base is small, we're actively seeking to grow and welcome new members to help shape the project's future. We believe that a strong community is essential to building robust, innovative software that meets real-world needs. Whether you're a developer, user, or enthusiast, your involvement would be valuable and appreciated. This document outlines how you can participate in and contribute to the DAIV community.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>There are many ways to contribute to DAIV, regardless of your technical background:</p> <ul> <li>Code Contributions: Implement new features, fix bugs, or improve performance</li> <li>Documentation: Help improve or translate documentation</li> <li>Testing: Test the software and report bugs or suggest improvements</li> <li>Community Support: Help answer questions from other users</li> <li>Feedback: Share your experience using DAIV and suggest improvements</li> </ul> <p>For detailed technical contribution guidelines, including code style, testing requirements, and the pull request process, please refer to our CONTRIBUTING.md document.</p>"},{"location":"community/#communication-channels","title":"Communication Channels","text":"<p>GitHub Issues are the primary communication channel for the DAIV community. We use issues for:</p> <ul> <li>Bug Reports: Report problems or unexpected behavior</li> <li>Feature Requests: Suggest new features or improvements</li> <li>Questions: Ask for help or clarification about using DAIV</li> <li>Discussions: Engage in broader discussions about DAIV's direction</li> </ul> <p>When using GitHub Issues:</p> <ol> <li>Search First: Check if your issue or question has already been addressed</li> <li>Use Templates: Follow the issue templates when available</li> <li>Be Specific: Provide clear, concise information</li> <li>Be Respectful: Follow our code of conduct in all communications</li> <li>Tag Appropriately: Use labels to categorize your issues correctly</li> </ol>"},{"location":"community/#reporting-issues","title":"Reporting Issues","text":"<p>Effective issue reporting helps us improve DAIV more quickly. When reporting issues:</p> <ol> <li>Provide Context: Include your environment details (Python version, OS, etc.)</li> <li>Be Specific: Clearly describe what happened and what you expected to happen</li> <li>Reproduce: Include steps to reproduce the issue</li> <li>Evidence: Add screenshots, logs, or error messages when applicable</li> <li>Search First: Check if the issue has already been reported</li> </ol> <p>For security issues, please follow responsible disclosure practices as outlined in CONTRIBUTING.md.</p>"},{"location":"community/#getting-help","title":"Getting Help","text":"<p>If you need help with using DAIV, troubleshooting issues, or understanding the codebase:</p> <ol> <li>Documentation: Check the existing documentation first</li> <li>GitHub Issues: Search for similar questions in closed issues</li> <li>Open an Issue: If you can't find an answer, open a new issue with the \"question\" label</li> <li>Be Patient: Remember that DAIV is maintained by volunteers who may not respond immediately</li> </ol> <p>When asking for help, provide as much relevant information as possible to make it easier for others to assist you.</p>"},{"location":"community/#code-of-conduct","title":"Code of Conduct","text":"<p>The DAIV community is dedicated to providing a welcoming, inclusive, and harassment-free experience for everyone. We expect all community members to:</p> <ul> <li>Be respectful and considerate</li> <li>Be collaborative and constructive</li> <li>Focus on what is best for the community</li> <li>Show empathy towards other community members</li> </ul> <p>For more details on expected behavior and enforcement procedures, please refer to the Code of Conduct section in our CONTRIBUTING.md document.</p>"},{"location":"community/#recognition","title":"Recognition","text":"<p>We value and recognize all contributions to DAIV:</p> <ul> <li>Contributors: All contributors are acknowledged in our repository</li> <li>Maintainers: Active contributors may be invited to become maintainers with additional repository access</li> <li>Attribution: We ensure proper attribution for code, documentation, and other contributions</li> </ul> <p>We believe in celebrating the work of our community members and ensuring that all contributions, big or small, are recognized and appreciated.</p>"},{"location":"community/#community-resources","title":"Community Resources","text":"<p>The following resources are available to the DAIV community:</p> <ul> <li>GitHub Repository: https://github.com/srtab/daiv</li> <li>Documentation: Available at https://srtab.github.io/daiv/dev/</li> <li>Issue Tracker: For bug reports, feature requests, and discussions</li> <li>README: For an overview of DAIV's features and setup instructions</li> <li>CONTRIBUTING.md: For detailed contribution guidelines</li> </ul> <p>These resources are maintained by the community and are continuously improved based on feedback and contributions.</p>"},{"location":"community/#future-community-plans","title":"Future Community Plans","text":"<p>As DAIV grows, we plan to expand our community initiatives:</p> <ul> <li>Enhanced Documentation: Continuously improving our documentation based on user feedback</li> <li>Community Showcases: Highlighting interesting use cases and implementations</li> <li>Potential Community Meetings: While we don't currently hold regular community meetings, we may introduce them in the future as the community grows</li> <li>Contribution Guides: Developing more detailed guides for specific types of contributions</li> </ul> <p>We're committed to building a vibrant, inclusive community around DAIV and welcome your suggestions for improving our community processes and resources.</p>"},{"location":"ai-agents/code-review-addressor/","title":"\ud83d\udcac Code Review Addressor","text":"<p>The Code Review Addressor is an AI agent that assists with code review comments. It provides context-aware answers or directly applies requested changes to the code. This reduces the overhead of going back and forth on merge requests.</p>"},{"location":"ai-agents/codebase-chat/","title":"\ud83e\udde0 Codebase Chat","text":"<p>The Codebase Chat is a feature that allows you to chat with your codebase. It is a ChatGPT-like experience to chat with your codebase and get answers.</p>"},{"location":"ai-agents/issue-addressor/","title":"\ud83d\ude80 Issue Addressor","text":""},{"location":"ai-agents/issue-addressor/#what-is-the-issue-addressor","title":"What is the Issue Addressor?","text":"<p>The Issue Addressor is an AI agent that automates the process of addressing issues in your codebase. It generates a step-by-step plan to resolve an issue, executes the necessary code changes, and creates a merge request for review\u2014all with minimal human intervention.</p>"},{"location":"ai-agents/issue-addressor/#key-features","title":"Key Features","text":"<ul> <li>Automated issue analysis and planning: Generates a detailed plan to address the issue.</li> <li>Support for images: The agent can process images in the issue description.</li> <li>Approval workflow: Waits for human approval before executing the plan.</li> <li>Automated code changes: Applies code changes as per the approved plan.</li> <li>Merge request creation: Opens a merge request with the changes for easy review.</li> <li>Error handling and feedback: Notifies users if planning or execution fails, and requests additional information if needed.</li> </ul>"},{"location":"ai-agents/issue-addressor/#how-the-issue-addressor-works","title":"How the Issue Addressor Works","text":"<pre><code>---\nconfig:\n  flowchart:\n    curve: linear\n---\ngraph TD;\n        __start__([&lt;p&gt;__start__&lt;/p&gt;]):::first\n        assessment(assessment)\n        prepare_data(prepare_data)\n        __end__([&lt;p&gt;__end__&lt;/p&gt;]):::last\n        __start__ --&gt; assessment;\n        assessment -.-&gt; __end__;\n        assessment -.-&gt; prepare_data;\n        prepare_data -.-&gt; plan_and_execute_plan;\n        plan_and_execute___end__ --&gt; __end__;\n        subgraph plan_and_execute\n        plan_and_execute_plan(plan)\n        plan_and_execute_plan_approval(plan_approval)\n        plan_and_execute_execute_plan(execute_plan)\n        plan_and_execute_apply_format_code(apply_format_code)\n        plan_and_execute___end__(&lt;p&gt;__end__&lt;/p&gt;)\n        plan_and_execute_apply_format_code -.-&gt; plan_and_execute___end__;\n        plan_and_execute_execute_plan -.-&gt; plan_and_execute___end__;\n        plan_and_execute_execute_plan -.-&gt; plan_and_execute_apply_format_code;\n        plan_and_execute_plan --&gt; plan_and_execute_plan_approval;\n        plan_and_execute_plan_approval -.-&gt; plan_and_execute_execute_plan;\n        plan_and_execute_plan_approval -.-&gt; plan_and_execute_plan_approval;\n        end\n        classDef default line-height:1.2\n        classDef first fill-opacity:0\n        classDef last fill-opacity:0</code></pre> <ul> <li>The agent starts by assessing the issue, analyzing its title, description, and any attached images.</li> <li>It prepares the necessary data and context for addressing the issue.</li> <li> <p>The agent delegates to the plan and execute subgraph, which:</p> <ol> <li>Generates a detailed step-by-step plan;</li> <li>Presents the plan for user approval;</li> <li>If approved, executes the plan and applies code formatting;</li> <li>If not approved, returns to planning.</li> </ol> </li> <li> <p>After successful execution, the agent creates or updates a merge request with the changes.</p> </li> <li> <p>The agent provides feedback throughout the process:</p> <ul> <li>If planning fails, it requests clarification or error details;</li> <li>If execution fails, it provides error details;</li> <li>If successful, it notifies the user with the merge request link.</li> </ul> </li> </ul>"},{"location":"ai-agents/issue-addressor/#step-by-step-usage-guide","title":"Step-by-Step Usage Guide","text":"<ol> <li> <p>Create an Issue</p> <p>Create a new issue in your repository with a title that starts with \"DAIV:\". For example, \"DAIV: Fix login bug on mobile\". The agent uses the issue's title and description to understand the problem.</p> </li> <li> <p>Review the Proposed Plan</p> <p>The agent analyzes the issue and generates a plan. This plan is posted as a comment for your review.</p> </li> <li> <p>Approve or Edit the Plan</p> <p>Review the plan. If it looks good, approve it. If not, edit the issue title and description to provide additional information and guide the agent to generate a new plan. The agent may also ask clarifying questions if the issue is ambiguous.</p> </li> <li> <p>Execute the Plan</p> <p>Once approved, the agent executes the plan, making the necessary code changes in your repository.</p> </li> <li> <p>Review the Merge Request</p> <p>The agent creates or updates a merge request with the changes. The agent will post a comment on the issue with the merge request link.</p> </li> </ol>"},{"location":"ai-agents/issue-addressor/#troubleshooting-and-faqs","title":"Troubleshooting and FAQs","text":"<ul> <li> <p>How do I know if the agent is working?</p> <p>The agent will comment on the issue with a welcome message as soon as you create an issue with a title starting with 'DAIV:'.</p> </li> <li> <p>What if no welcome message is posted?</p> <p>Confirm that the issue title starts with \"DAIV:\". If it does, confirm that DAIV has access to the repository and DAIV webhook is configured.</p> </li> <li> <p>What if the agent cannot generate a plan?</p> <p>The agent will notify you and may ask clarifying questions. Provide more details in the issue title and description.</p> </li> <li> <p>What if the agent cannot execute the plan?</p> <p>The agent will comment on the issue with an error message. You can update the issue title and description to try again.</p> </li> <li> <p>Can I reset the plan?</p> <p>Yes, you can trigger a plan reset if the initial plan is not satisfactory. You can do this by updating the issue title and description.</p> </li> <li> <p>What if the agent already created a merge request and I updated the issue title and description?</p> <p>The agent will create a new merge request and all previous commits will be discarded.</p> </li> </ul>"},{"location":"ai-agents/issue-addressor/#additional-resources","title":"Additional Resources","text":"<ul> <li>Issue Addressor Agent Configurations</li> <li>Plan and Execute Agent Configurations</li> </ul>"},{"location":"ai-agents/mcp-tools/","title":"\ud83d\udd27 MCP Tools","text":""},{"location":"ai-agents/mcp-tools/#what-are-mcp-tools","title":"What are MCP Tools?","text":"<p>MCP (Model Context Protocol) Tools are external services that extend the capabilities of DAIV agents by providing specialized functionality through a standardized protocol. These tools allow AI agents to interact with external systems, fetch data from various sources, and perform actions that go beyond basic code analysis and modification.</p>"},{"location":"ai-agents/mcp-tools/#available-mcp-tools","title":"Available MCP Tools","text":"<p>DAIV currently supports the following MCP tools:</p> MCP Server Tools Use Cases Fetch MCP Server \u2022 <code>fetch</code>: Fetch content from URLs \u2022 Researching documentation and examples from the web\u2022 Fetching configuration files or data from remote sources\u2022 Analyzing external APIs and their responses\u2022 Gathering context from online resources Sentry MCP Server \u2022 <code>find_organizations</code>: Discover Sentry organizations\u2022 <code>get_issue_details</code>: Retrieve detailed information about specific issues \u2022 Analyzing error patterns and crash reports\u2022 Understanding issue context when fixing bugs\u2022 Gathering debugging information from production systems\u2022 Correlating code changes with error occurrences"},{"location":"ai-agents/mcp-tools/#configuration","title":"Configuration","text":"<p>MCP tools are configured through environment variables. Here's how to set them up:</p>"},{"location":"ai-agents/mcp-tools/#basic-configuration","title":"Basic Configuration","text":"Bash<pre><code># MCP Proxy Configuration\nMCP_PROXY_HOST=http://mcp-proxy:9090         # Default: http://mcp-proxy:9090\nMCP_PROXY_ADDR=:9090                         # Default: :9090\nMCP_PROXY_AUTH_TOKEN=your-auth-token         # Optional authentication token\n\n# Fetch MCP Server\nMCP_FETCH_ENABLED=true                       # Default: true\nMCP_FETCH_VERSION=2025.4.7                   # Default: 2025.4.7\n\n# Sentry MCP Server\nMCP_SENTRY_ENABLED=true                      # Default: true\nMCP_SENTRY_VERSION=0.11.0                    # Default: 0.11.0\nMCP_SENTRY_ACCESS_TOKEN=your-sentry-token    # Required for Sentry functionality\nMCP_SENTRY_HOST=your-sentry-host             # Your Sentry instance host\n</code></pre> <p>See Environment Variables Reference for more details.</p>"},{"location":"ai-agents/mcp-tools/#agent-integration","title":"Agent Integration","text":""},{"location":"ai-agents/mcp-tools/#which-agents-use-mcp-tools","title":"Which Agents Use MCP Tools?","text":"<p>Currently, MCP tools are available in the following agents:</p>"},{"location":"ai-agents/mcp-tools/#plan-and-execute-agent","title":"Plan and Execute Agent","text":"<p>The Plan and Execute agent has access to all configured MCP tools through the <code>MCPToolkit</code>. This agent can:</p> <ul> <li>Use the Fetch server to research solutions online</li> <li>Access Sentry to understand error contexts when fixing issues</li> <li>Combine MCP tools with repository tools for comprehensive problem-solving</li> </ul> <p>Example Usage:</p> <p>When addressing an issue, the agent might:</p> <ol> <li>Use Sentry tools to analyze error details</li> <li>Use Fetch tools to research similar issues or documentation</li> <li>Apply repository tools to implement the fix</li> </ol>"},{"location":"ai-agents/mcp-tools/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"ai-agents/mcp-tools/#creating-custom-mcp-servers","title":"Creating Custom MCP Servers","text":"<p>Coming Soon</p> <p>The ability to create custom MCP servers is currently under development. This feature will allow you to define custom MCP servers.</p> <p>Stay tuned for updates as we work on bringing this functionality to DAIV.</p>"},{"location":"ai-agents/mcp-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-agents/mcp-tools/#common-issues","title":"Common Issues","text":"<p>MCP tools not available in agents:</p> <ul> <li>Verify that the MCP proxy is running and accessible</li> <li>Check that required environment variables are set</li> </ul> <p>Sentry tools not working:</p> <ul> <li>Verify <code>MCP_SENTRY_ACCESS_TOKEN</code> is set and valid</li> <li>Check that <code>MCP_SENTRY_HOST</code> points to your Sentry instance</li> <li>Ensure your Sentry token has the necessary permissions</li> </ul> <p>Fetch tools timing out:</p> <ul> <li>Check network connectivity from the MCP proxy</li> <li>Verify target URLs are accessible</li> </ul>"},{"location":"ai-agents/mcp-tools/#debugging","title":"Debugging","text":"<p>To debug MCP tool issues:</p> <ol> <li> <p>Check MCP proxy logs: Bash<pre><code>docker logs mcp-proxy\n</code></pre></p> </li> <li> <p>Verify configuration: Bash<pre><code>docker compose exec -it app django-admin mcp_proxy_config\n</code></pre></p> </li> </ol>"},{"location":"ai-agents/mcp-tools/#security-considerations","title":"Security Considerations","text":"<ul> <li>API Tokens: Store sensitive tokens like <code>MCP_SENTRY_ACCESS_TOKEN</code> securely using Docker secrets</li> <li>Network Access: MCP servers may require network access to external services</li> <li>Authentication: Configure <code>MCP_PROXY_AUTH_TOKEN</code> for additional security in production environments</li> </ul>"},{"location":"ai-agents/mcp-tools/#additional-resources","title":"Additional Resources","text":"<ul> <li>MCP Protocol Specification</li> <li>Fetch MCP Server Documentation</li> <li>Sentry MCP Server Documentation</li> <li>Environment Variables Reference</li> </ul>"},{"location":"ai-agents/overview/","title":"\ud83e\udd16 AI Agents Overview","text":"<p>DAIV uses specialized AI agents to automate various development workflows in your GitLab repositories. Each agent is designed for specific tasks and can work independently or collaborate with other agents to provide comprehensive development assistance.</p>"},{"location":"ai-agents/overview/#how-daiv-agents-work","title":"How DAIV Agents Work","text":""},{"location":"ai-agents/overview/#core-architecture","title":"Core Architecture","text":"<p>DAIV agents are built on a modular architecture that combines several key components:</p> <p>LangGraph Framework: All agents use LangGraph to create sophisticated workflows with state management, decision-making capabilities, and error handling.</p> <p>Language Models: Agents support multiple LLM providers including:</p> <ul> <li>Anthropic Claude (Sonnet, Opus variants with thinking capabilities)</li> <li>OpenAI GPT (including reasoning models like o1, o3, o4)</li> <li>Google Gemini</li> <li>OpenRouter (access to various models)</li> </ul> <p>Repository Integration: Direct integration with GitLab through webhooks and APIs for real-time repository monitoring and interaction.</p> <p>Context-Aware Processing: Agents have access to indexed repository content, allowing them to understand your codebase structure, dependencies, and coding patterns.</p>"},{"location":"ai-agents/overview/#agent-lifecycle","title":"Agent Lifecycle","text":"<pre><code>graph TD\n    A[\"\ud83d\udd14 Trigger Event&lt;br/&gt;(Issue, PR, Pipeline Failure)\"] --&gt; B[\"\ud83d\udccb Agent Assessment&lt;br/&gt;(Analyze request and context)\"]\n    B --&gt; C[\"\ud83d\udcca Data Preparation&lt;br/&gt;(Gather repository context)\"]\n    C --&gt; D[\"\ud83e\udde0 Planning Phase&lt;br/&gt;(Generate action plan)\"]\n    D --&gt; E[\"\u2705 Human Approval&lt;br/&gt;(Review and approve plan)\"]\n    E --&gt; F[\"\u2699\ufe0f Execution Phase&lt;br/&gt;(Implement changes)\"]\n    F --&gt; G[\"\ud83d\udd0d Code Formatting&lt;br/&gt;(Apply repository standards)\"]\n    G --&gt; H[\"\ud83d\udcdd Create Merge Request&lt;br/&gt;(Submit for review)\"]\n    H --&gt; I[\"\ud83d\udcac Feedback &amp; Monitoring&lt;br/&gt;(Track progress and respond)\"]</code></pre>"},{"location":"ai-agents/overview/#core-available-ai-agents","title":"Core Available AI Agents","text":""},{"location":"ai-agents/overview/#issue-addressor-agent","title":"\ud83d\ude80 Issue Addressor Agent","text":"<p>Purpose: Automatically resolves issues by implementing requested features or fixing bugs.</p> <p>Key Capabilities:</p> <ul> <li>Analyzes issue descriptions and attached images</li> <li>Generates step-by-step implementation plans</li> <li>Creates code changes across multiple files</li> <li>Handles complex refactoring and new feature development</li> </ul> <p>Workflow:</p> <ol> <li>Triggered when issues are labeled with <code>daiv</code> or title starts with \"DAIV:\"</li> <li>Analyzes issue context and repository structure</li> <li>Generates an actionable plan for human review</li> <li>Executes approved changes</li> <li>Creates merge request with implemented solution</li> </ol> <p>Learn more \u2192</p>"},{"location":"ai-agents/overview/#codebase-chat-agent","title":"\ud83e\udde0 Codebase Chat Agent","text":"<p>Purpose: Interactive Q&amp;A assistant for your repository.</p> <p>Key Capabilities:</p> <ul> <li>Answers questions about code structure and functionality</li> <li>Explains complex code patterns and implementations</li> <li>Provides development guidance and best practices</li> <li>Searches across repository content semantically and keyword-based</li> <li>OpenAI API compatible (chat completions)</li> </ul> <p>Workflow:</p> <ul> <li>Available through chat interfaces like OpenWebUI</li> <li>Maintains conversation context</li> <li>Searches repository indexes for relevant information</li> <li>Provides code examples, explanations and references</li> </ul> <p>Learn more \u2192</p>"},{"location":"ai-agents/overview/#pipeline-fixer-agent","title":"\ud83d\udd27 Pipeline Fixer Agent","text":"<p>Purpose: Automatically diagnoses and fixes failed CI/CD pipelines.</p> <p>Key Capabilities:</p> <ul> <li>Analyzes pipeline failure logs and error messages</li> <li>Identifies root causes (syntax errors, test failures, dependency issues)</li> <li>Implements targeted fixes</li> <li>Applies code formatting to resolve linting issues</li> </ul> <p>Workflow:</p> <ol> <li>Triggered automatically on pipeline failures</li> <li>Analyzes failure logs and repository state</li> <li>Generates remediation plan</li> <li>Applies fixes and re-runs validation</li> </ol> <p>Learn more \u2192</p>"},{"location":"ai-agents/overview/#pr-describer-agent","title":"\ud83d\udcdd PR Describer Agent","text":"<p>Purpose: Generates comprehensive pull request descriptions.</p> <p>Key Capabilities:</p> <ul> <li>Analyzes code changes and their impact</li> <li>Generates clear, detailed PR descriptions</li> </ul> <p>Workflow:</p> <ul> <li>Triggered when PRs are created or updated</li> <li>Analyzes commits and changed files</li> <li>Generates structured description</li> <li>Updates PR with comprehensive details</li> </ul>"},{"location":"ai-agents/overview/#code-review-addressor-agent","title":"\ud83d\udd0d Code Review Addressor Agent","text":"<p>Purpose: Responds to code review feedback by implementing requested changes.</p> <p>Key Capabilities:</p> <ul> <li>Interprets reviewer comments and suggestions</li> <li>Implements code changes based on feedback</li> <li>Handles style, logic, and structural improvements</li> <li>Maintains conversation context across review cycles</li> </ul> <p>Workflow:</p> <ol> <li>Triggered by review comments on merge requests</li> <li>Evaluates if comment requests code changes</li> <li>Plans and implements requested modifications</li> <li>Updates the merge request with changes</li> <li>Responds to reviewer with explanation, if no changes requested</li> </ol> <p>Learn more \u2192</p>"},{"location":"ai-agents/overview/#plan-and-execute-agent","title":"\ud83c\udfaf Plan and Execute Agent","text":"<p>Purpose: Core planning and execution engine used by other agents.</p> <p>Key Capabilities:</p> <ul> <li>Breaks down complex tasks into actionable steps</li> <li>Manages multi-step workflows with approval gates</li> <li>Handles error recovery and replanning</li> <li>Coordinates between different tools and systems</li> </ul> <p>Used by: Issue Addressor, Pipeline Fixer, and Review Addressor agents for their execution workflows.</p>"},{"location":"ai-agents/overview/#agent-capabilities","title":"Agent Capabilities","text":""},{"location":"ai-agents/overview/#mcp-tools-integration","title":"\ud83d\udd27 MCP Tools Integration","text":"<p>Agents can use Model Context Protocol (MCP) tools to extend their capabilities:</p> <p>Fetch Tools: Web scraping and HTTP requests for researching solutions Sentry Integration: Access to error monitoring and debugging information Custom Tools: Extensible framework for adding specialized functionality</p>"},{"location":"ai-agents/overview/#repository-tools","title":"\ud83d\uddc2\ufe0f Repository Tools","text":"<p>All agents have access to powerful repository manipulation tools:</p> <ul> <li>Code Search: Semantic and keyword-based code discovery</li> <li>File Operations: Create, modify, rename, and delete files</li> <li>Snippet Replacement: Precise code modification with context awareness</li> </ul>"},{"location":"ai-agents/overview/#sandbox-environment","title":"\ud83c\udfd7\ufe0f Sandbox Environment","text":"<p>Agents can execute commands in isolated sandbox environments daiv-sandbox:</p> <ul> <li>Code Formatting: Apply repository-specific formatting rules (e.g. ruff, black, isort, etc.)</li> <li>Custom Commands: Execute repository-specific commands (e.g. install dependencies, etc.)</li> </ul>"},{"location":"ai-agents/overview/#configuration-and-customization","title":"Configuration and Customization","text":""},{"location":"ai-agents/overview/#repository-configuration","title":"Repository Configuration","text":"<p>Control agent behavior using a <code>.daiv.yml</code> file in your repository root.</p> <p>Learn more about configuration \u2192</p>"},{"location":"ai-agents/overview/#model-selection","title":"Model Selection","text":"<p>Configure which AI models agents use through environment variables:</p> Bash<pre><code># Use Claude Sonnet for most tasks\nPLAN_AND_EXECUTE_PLANNING_MODEL_NAME=openrouter:openai/gpt-4.1\n\n# Use reasoning models for complex planning\nPLAN_AND_EXECUTE_EXECUTION_MODEL_NAME=openrouter:openai/gpt-4.1\n</code></pre> <p>Learn more about model configuration \u2192</p>"},{"location":"ai-agents/overview/#agent-communication-and-collaboration","title":"Agent Communication and Collaboration","text":""},{"location":"ai-agents/overview/#workflow-orchestration","title":"Workflow Orchestration","text":"<p>Agents use LangGraph for sophisticated workflow management:</p> <ul> <li>State Management: Persistent state across workflow steps</li> <li>Error Handling: Automatic retry and fallback mechanisms</li> <li>Human-in-the-Loop: Approval gates for critical decisions</li> </ul>"},{"location":"ai-agents/overview/#best-practices","title":"Best Practices","text":""},{"location":"ai-agents/overview/#maximizing-agent-effectiveness","title":"Maximizing Agent Effectiveness","text":"<p>Write Clear Issues: Provide detailed descriptions with examples and acceptance criteria</p> <p>Use Labels: Apply the <code>daiv</code> label to issues you want automated</p> <p>Review Plans: Always review agent-generated plans before approval</p>"},{"location":"ai-agents/overview/#repository-setup","title":"Repository Setup","text":"<p>Comprehensive Documentation: Well-documented code helps agents understand context</p> <p>Clear Patterns: Consistent code patterns make agent-generated code more accurate</p> <p>Test Coverage: Good tests help agents validate their changes</p> <p>CI/CD Integration: Proper pipeline configuration enables automatic fixing</p>"},{"location":"ai-agents/overview/#security-considerations","title":"Security Considerations","text":"<p>Review Changes: Always review agent-generated code before merging</p> <p>Access Controls: Configure appropriate repository permissions</p> <p>Sensitive Data: Ensure no secrets are exposed in repository configurations</p> <p>Audit Trails: Monitor agent activities through LangSmith</p>"},{"location":"ai-agents/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-agents/overview/#common-issues","title":"Common Issues","text":"<p>Poor Quality Responses:</p> <ul> <li>Improve issue descriptions with more context</li> <li>Update repository description in <code>.daiv.yml</code></li> <li>Consider adjusting model selection</li> </ul>"},{"location":"ai-agents/overview/#getting-help","title":"Getting Help","text":"<p>Logs and Monitoring: Check application logs for detailed error information</p> <p>Configuration Validation: Use management commands to verify setup</p> <p>Community Support: Join discussions and share experiences with other users</p>"},{"location":"ai-agents/overview/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>Now that you understand how DAIV's agents work:</p> <ul> <li>Configure your first repository - Set up DAIV integration</li> <li>Explore specific agents - Deep dive into individual agent capabilities</li> <li>Customize behavior - Fine-tune agents for your workflow</li> <li>Monitor performance - Track agent effectiveness and usage</li> </ul>"},{"location":"ai-agents/pipeline-fixing/","title":"\ud83d\udd27 Pipeline Fixing","text":"<p>The Pipeline Fixer is an AI agent that troubleshoots failed pipelines and tries to fix them automatically.</p>"},{"location":"ai-agents/quick-actions/","title":"\u26a1 Quick Actions","text":"<p>Quick Actions provide command-based interactions with DAIV directly from GitLab issues and merge requests. They are useful for common tasks and information requests.</p>"},{"location":"ai-agents/quick-actions/#overview","title":"Overview","text":"<p>Quick Actions are triggered by mentioning DAIV with specific commands in issue or merge request comments.</p>"},{"location":"ai-agents/quick-actions/#how-quick-actions-work","title":"How Quick Actions Work","text":"<p>Command Format: <code>@&lt;daiv-username&gt; &lt;action&gt; [arguments]</code></p> <p>Supported Scopes:</p> <ul> <li>Issues: Available in issue comments and discussions</li> <li>Merge Requests: Available in merge request comments and discussions</li> </ul> <p>Architecture: Built on a plugin-based registry system that allows easy extension with custom actions.</p>"},{"location":"ai-agents/quick-actions/#available-quick-actions","title":"Available Quick Actions","text":""},{"location":"ai-agents/quick-actions/#help-action","title":"\ud83c\udd98 Help Action","text":"<p>Command: <code>@daiv help</code></p> <p>Purpose: Displays all available Quick Actions for the current scope (issue or merge request).</p> <p>Scopes: Issues, Merge Requests</p> <p>Example: Text Only<pre><code>@daiv help\n</code></pre></p> <p>Response: DAIV replies with a formatted list of all available Quick Actions and their descriptions.</p>"},{"location":"ai-agents/quick-actions/#using-quick-actions","title":"Using Quick Actions","text":""},{"location":"ai-agents/quick-actions/#basic-usage","title":"Basic Usage","text":"<ol> <li>Navigate to any GitLab issue or merge request</li> <li>Add a comment mentioning DAIV with the desired action</li> <li>Submit the comment</li> <li>DAIV responds immediately with the action result</li> </ol>"},{"location":"ai-agents/quick-actions/#example-workflow","title":"Example Workflow","text":"<pre><code>graph TD\n    A[\"\ud83d\udc64 User comments&lt;br/&gt;@daiv help\"] --&gt; B[\"\ud83d\udd0d DAIV parses command\"]\n    B --&gt; C[\"\ud83d\udccb Registry lookup\"]\n    C --&gt; D[\"\u26a1 Execute action\"]\n    D --&gt; E[\"\ud83d\udcac Post response\"]</code></pre>"},{"location":"ai-agents/quick-actions/#command-parsing","title":"Command Parsing","text":"<p>Quick Actions use shell-like parsing with support for:</p> <ul> <li>Simple commands: <code>@daiv help</code></li> <li>Commands with arguments: <code>@daiv action arg1 arg2</code></li> <li>Quoted arguments: <code>@daiv action \"argument with spaces\"</code></li> <li>Case-insensitive: <code>@DAIV HELP</code> works the same as <code>@daiv help</code></li> </ul>"},{"location":"ai-agents/quick-actions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-agents/quick-actions/#common-issues","title":"Common Issues","text":"<p>Action not recognized:</p> <ul> <li>Check that the action supports the current scope (issue vs merge request)</li> <li>Ensure proper spelling and case (actions are case-insensitive)</li> </ul> <p>No response from DAIV:</p> <ul> <li>Confirm DAIV has access to the repository</li> <li>Check that webhooks are properly configured</li> <li>Verify the bot username is correct in the mention</li> </ul> <p>Permission errors:</p> <ul> <li>Ensure DAIV has sufficient GitLab permissions</li> <li>Confirm the user triggering the action has appropriate access levels</li> </ul>"},{"location":"ai-agents/quick-actions/#debug-information","title":"Debug Information","text":"<p>Quick Actions log detailed information for troubleshooting:</p> <ul> <li>Command parsing results</li> <li>Registry lookup attempts</li> <li>Execution success/failure</li> <li>Error details and stack traces</li> </ul>"},{"location":"ai-agents/quick-actions/#examples","title":"Examples","text":""},{"location":"ai-agents/quick-actions/#getting-help","title":"Getting Help","text":"Text Only<pre><code>@daiv help\n</code></pre> <p>Response: Text Only<pre><code>You can trigger quick actions by commenting on this issue:\n- `@daiv help` - Shows the help message with the available quick actions.\n</code></pre></p>"},{"location":"ai-agents/quick-actions/#extension-and-development","title":"Extension and Development","text":""},{"location":"ai-agents/quick-actions/#adding-new-actions","title":"Adding New Actions","text":"<ol> <li>Create new action class in <code>automation/quick_actions/actions/</code></li> <li>Implement required methods (<code>description</code> and <code>execute</code>)</li> <li>Decorate with <code>@quick_action</code> specifying verb and scopes</li> <li>Import in the actions module</li> <li>Test the action in development environment</li> </ol>"},{"location":"ai-agents/quick-actions/#best-practices","title":"Best Practices","text":"<ul> <li>Keep actions simple: Quick Actions should execute immediately</li> <li>Provide clear descriptions: Help users understand what each action does</li> <li>Handle errors gracefully: Post user-friendly error messages</li> <li>Use appropriate scopes: Only enable actions where they make sense</li> <li>Follow naming conventions: Use clear, descriptive verb names</li> </ul>"},{"location":"getting-started/configuration/","title":"Repository Configuration","text":"<p>This guide walks you through connecting DAIV to your GitLab repository. Once configured, DAIV will automatically respond to issues, pull requests, and pipeline failures.</p>"},{"location":"getting-started/configuration/#prerequisites","title":"Prerequisites","text":"<p>Before configuring a repository, ensure you have:</p> <ul> <li>DAIV installed and running - Follow the installation guide first</li> <li>GitLab repository access - Admin or maintainer permissions on the repository you want to connect</li> <li>GitLab personal access token - With <code>api</code> scope permissions</li> </ul>"},{"location":"getting-started/configuration/#step-1-create-gitlab-personal-access-token","title":"Step 1: Create GitLab Personal Access Token","text":"<p>DAIV needs a GitLab personal access token to interact with your repositories.</p> <ol> <li> <p>Navigate to GitLab Settings:</p> <ul> <li>Go to your GitLab instance (e.g., <code>https://gitlab.com</code>)</li> <li>Click your avatar \u2192 Edit profile \u2192 Access Tokens</li> </ul> </li> <li> <p>Create New Token:</p> <ul> <li>Name: <code>DAIV Integration</code></li> <li>Expiration: Set according to your security policy (recommended: 1 year)</li> <li>Scopes: Select <code>api</code> (full API access)</li> <li>Click Create personal access token</li> </ul> </li> <li> <p>Copy the Token:</p> <ul> <li>Important: Copy and save the token immediately - you won't see it again</li> <li>The token format looks like: <code>glpat-xxxxxxxxxxxxxxxxxxxx</code></li> </ul> </li> </ol> <p>Token Security</p> <p>Store your token securely. Never commit it to version control or share it publicly.</p>"},{"location":"getting-started/configuration/#step-2-configure-environment-variables","title":"Step 2: Configure Environment Variables","text":"<p>Add your GitLab token and webhook secret to DAIV's environment configuration.</p>"},{"location":"getting-started/configuration/#for-docker-compose-setup","title":"For Docker Compose Setup","text":"<p>Edit your <code>docker-compose.yml</code> file:</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  # ...\n  environment:\n    CODEBASE_GITLAB_URL: https://gitlab.com # or your GitLab instance URL\n    CODEBASE_GITLAB_AUTH_TOKEN: glpat-xxxxxxxxxxxxxxxxxxxx # Your personal access token\n    CODEBASE_GITLAB_WEBHOOK_SECRET: your-webhook-secret-here # Random secret for webhook validation\n  # ...\n</code></pre>"},{"location":"getting-started/configuration/#for-docker-swarm-setup","title":"For Docker Swarm Setup","text":"<p>Create Docker secrets:</p> Bash<pre><code># Create secrets for GitLab integration\necho \"glpat-xxxxxxxxxxxxxxxxxxxx\" | docker secret create codebase_gitlab_auth_token -\necho \"your-webhook-secret-here\" | docker secret create codebase_gitlab_webhook_secret -\n</code></pre> <p>Generating Webhook Secret</p> <p>Generate a secure random webhook secret: Bash<pre><code>openssl rand -hex 32\n</code></pre></p>"},{"location":"getting-started/configuration/#step-3-set-up-repository-webhooks","title":"Step 3: Set Up Repository Webhooks","text":"<p>DAIV uses webhooks to receive real-time notifications from GitLab about repository events.</p>"},{"location":"getting-started/configuration/#automatic-webhook-setup-recommended","title":"Automatic Webhook Setup (Recommended)","text":"<p>Use DAIV's management command to automatically set up webhooks for all accessible repositories:</p> Bash<pre><code># Enter the DAIV container\ndocker compose exec -it app bash\n\n# Set up webhooks for all repositories\ndjango-admin setup_webhooks --base-url https://your-daiv-instance.com\n\n# For local development with self-signed certificates\ndjango-admin setup_webhooks --base-url https://your-daiv-instance.com --disable-ssl-verification\n</code></pre>"},{"location":"getting-started/configuration/#manual-webhook-setup","title":"Manual Webhook Setup","text":"<p>If you prefer to set up webhooks manually or for specific repositories:</p> <ol> <li> <p>Navigate to Repository Settings:</p> <ul> <li>Go to your GitLab repository</li> <li>Navigate to Settings \u2192 Webhooks</li> </ul> </li> <li> <p>Add New Webhook:</p> <ul> <li>URL: <code>https://your-daiv-instance.com/api/codebase/callbacks/gitlab/</code></li> <li>Secret token: Use the same secret from your environment variables</li> <li>Trigger events: Select:<ul> <li>\u2705 Push events</li> <li>\u2705 Issues events</li> <li>\u2705 Comments (Note events)</li> <li>\u2705 Pipeline events</li> </ul> </li> <li>SSL verification: Enable (unless using self-signed certificates)</li> </ul> </li> <li> <p>Test the Webhook:</p> <ul> <li>Click Add webhook</li> <li>Click Test \u2192 Push events to verify connectivity</li> </ul> </li> </ol>"},{"location":"getting-started/configuration/#step-4-index-repository-content","title":"Step 4: Index Repository Content","text":"<p>DAIV needs to index your repository content to provide context-aware assistance.</p> Bash<pre><code># Enter the DAIV container\ndocker compose exec -it app bash\n\n# Index all accessible repositories\ndjango-admin update_index\n\n# Index a specific repository\ndjango-admin update_index --repo-id \"group/repository-name\"\n</code></pre> <p>The indexing process will: - Clone the repository content - Extract and chunk code files - Generate embeddings for semantic search - Build search indices for fast retrieval</p> <p>Indexing Time</p> <p>Initial indexing may take several seconds depending on repository size. Subsequent updates are incremental and faster.</p>"},{"location":"getting-started/configuration/#step-5-configure-repository-behavior","title":"Step 5: Configure Repository Behavior","text":"<p>Create a <code>.daiv.yml</code> file in your repository's root to customize DAIV's behavior.</p> <p>For complete configuration options, see Repository Configurations.</p>"},{"location":"getting-started/configuration/#step-6-test-the-integration","title":"Step 6: Test the Integration","text":"<p>Verify that DAIV is properly connected to your repository.</p> <ol> <li> <p>Create a Test Issue:</p> <ul> <li>Go to your GitLab repository</li> <li>Create a new issue with title: \"Add hello world function\"</li> <li>Add the <code>daiv</code> label to the issue</li> </ul> </li> <li> <p>Wait for DAIV Response:</p> <ul> <li>DAIV should automatically comment with a plan to address the issue</li> <li>Check the issue comments for DAIV's response</li> </ul> </li> </ol>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Webhook delivery fails:</p> <ul> <li>Verify the webhook URL is accessible from GitLab</li> <li>Check SSL certificate validity</li> <li>Review firewall settings</li> </ul> <p>Issues not being processed:</p> <ul> <li>Ensure the <code>daiv</code> label is added to issues</li> <li>Verify <code>auto_address_issues_enabled: true</code> in <code>.daiv.yml</code></li> <li>Check DAIV logs for errors</li> </ul> <p>No response to comments:</p> <ul> <li>Verify webhook events include \"Comments\"</li> <li>Check that webhook secret matches environment variable</li> <li>Review repository permissions</li> </ul>"},{"location":"getting-started/configuration/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>With your repository configured, you can now:</p> <ul> <li>Learn about AI agents - Understand how DAIV's agents work</li> <li>Customize agent behavior - Fine-tune DAIV for your workflow</li> <li>Configure monitoring - Configure LangSmith for monitoring</li> </ul>"},{"location":"getting-started/environment-variables/","title":"Environment Variables","text":"<p>DAIV provides a large number of environment variables that can be used to configure the application. This page lists all environment variables related to core, codebase, automation, and sandbox features.</p> <p>Variables marked with:</p> <ul> <li> are sensitive (such as API keys, passwords, and tokens) and should be declared using Docker secrets or a secure credential manager.</li> <li> are required and should be declared.</li> </ul>"},{"location":"getting-started/environment-variables/#core","title":"Core","text":""},{"location":"getting-started/environment-variables/#general","title":"General","text":"Variable Description Default Example <code>DJANGO_DEBUG</code> Toggle Django debug mode <code>False</code> <code>True</code> <code>DJANGO_SECRET_KEY</code> Secret key for Django (none) <code>super-secret-key</code> <code>DJANGO_ALLOWED_HOSTS</code> Comma-separated list of allowed hosts <code>*</code> <code>example.com,localhost</code> <p>Danger</p> <p>Do not turn on <code>DJANGO_DEBUG</code> in production. It will expose sensitive information and break the security of the application.</p> <p>Info</p> <p>The <code>DJANGO_ALLOWED_HOSTS</code> variable is used to specify the hosts that are allowed to access the application. Make sure to include the host where the application is running to increase security.</p>"},{"location":"getting-started/environment-variables/#uvicorn","title":"Uvicorn","text":"Variable Description Default Example <code>UVICORN_HOST</code> Host to bind the Uvicorn server <code>0.0.0.0</code> <code>0.0.0.0</code> <code>UVICORN_PORT</code> Port to bind the Uvicorn server <code>8000</code> <code>8000</code>"},{"location":"getting-started/environment-variables/#database","title":"Database","text":"Variable Description Default Example <code>DB_NAME</code> Database name (none) <code>daiv</code> <code>DB_USER</code> Database user (none) <code>daiv_admin</code> <code>DB_PASSWORD</code> Database password (none) <code>DB_HOST</code> Database host <code>localhost</code> <code>db</code> <code>DB_PORT</code> Database port <code>5432</code> <code>5432</code> <code>DB_SSLMODE</code> PostgreSQL SSL mode <code>require</code> <code>prefer</code> <code>DB_POOL_MAX_LIFETIME</code> Maximum lifetime of a connection pool in seconds <code>30</code> <code>60</code>"},{"location":"getting-started/environment-variables/#redis","title":"Redis","text":"Variable Description Default Example <code>DJANGO_REDIS_URL</code> Redis connection URL (none) <code>redis://redis:6379/0</code>"},{"location":"getting-started/environment-variables/#celery-broker","title":"Celery / Broker","text":"Variable Description Default Example <code>DJANGO_BROKER_URL</code> Celery broker URL <code>memory:///</code> <code>redis://redis:6379/0</code> <code>DJANGO_BROKER_USE_SSL</code> Use SSL for broker connection <code>False</code> <code>True</code> <code>CELERY_LOGLEVEL</code> Celery log level <code>INFO</code> <code>DEBUG</code> <code>CELERY_CONCURRENCY</code> Number of Celery workers <code>2</code> <code>4</code> <p>Note</p> <p>The <code>CELERY_CONCURRENCY</code> variable is used to specify the number of Celery workers to use. This is useful for scaling the application. The default value is <code>2</code> which is suitable for most use cases.</p>"},{"location":"getting-started/environment-variables/#sentry","title":"Sentry","text":"Variable Description Default Example <code>SENTRY_DSN</code> Sentry DSN (none) <code>SENTRY_DEBUG</code> Enable Sentry debug mode <code>False</code> <code>True</code> <code>SENTRY_ENABLE_TRACING</code> Enable Sentry tracing <code>False</code> <code>True</code> <code>NODE_HOSTNAME</code> Node hostname for Sentry (none) <code>SERVICE_NAME</code> Service name for Sentry (none) <p>Note</p> <p><code>NODE_HOSTNAME</code> and <code>SERVICE_NAME</code> are used to identify the node and service that is reporting the error.</p>"},{"location":"getting-started/environment-variables/#logging","title":"Logging","text":"Variable Description Default Example <code>DJANGO_LOGGING_LEVEL</code> Django logging level <code>INFO</code> <code>DEBUG</code>"},{"location":"getting-started/environment-variables/#monitoring-langsmith","title":"Monitoring (LangSmith)","text":"Variable Description Default Example <code>LANGSMITH_TRACING</code> Enable LangSmith tracing (alternative) <code>False</code> <code>true</code> <code>LANGSMITH_PROJECT</code> LangSmith project name (alternative) <code>default</code> <code>daiv-production</code> <code>LANGSMITH_API_KEY</code> LangSmith API key (alternative) (none) <code>lsv2_pt_...</code> <code>LANGSMITH_API_KEY_FILE</code> Path to LangSmith API key file (none) <code>/run/secrets/langsmith_api_key</code> <code>LANGSMITH_ENDPOINT</code> LangSmith API endpoint <code>https://api.smith.langchain.com</code> <code>https://eu.api.smith.langchain.com</code> <p>Note</p> <p>LangSmith provides comprehensive monitoring and observability for AI agents. For detailed setup instructions, see Monitoring Configuration.</p>"},{"location":"getting-started/environment-variables/#sandbox-client-side","title":"Sandbox (client-side)","text":"Variable Description Default Example <code>DAIV_SANDBOX_URL</code> URL of the sandbox service <code>http://sandbox:8000</code> <code>http://sandbox:8000</code> <code>DAIV_SANDBOX_TIMEOUT</code> Timeout for sandbox requests in seconds <code>600</code> <code>600</code> <code>DAIV_SANDBOX_API_KEY</code> API key for sandbox requests (none) <code>random-api-key</code> <p>Info</p> <p>Check the daiv-sandbox repository for server-side configuration of the sandbox service.</p>"},{"location":"getting-started/environment-variables/#other","title":"Other","text":"Variable Description Default Example <code>DAIV_EXTERNAL_URL</code> External URL of the application. <code>https://app:8000</code> <code>https://daiv.example.com</code> <p>Note</p> <p>The <code>DAIV_EXTERNAL_URL</code> variable is used to define webhooks on Git platform. Make sure that the URL is accessible from the Git platform.</p>"},{"location":"getting-started/environment-variables/#codebase","title":"Codebase","text":""},{"location":"getting-started/environment-variables/#general_1","title":"General","text":"Variable Description Default Example <code>CODEBASE_CLIENT</code> Client to use for codebase operations <code>gitlab</code> <code>gitlab</code>"},{"location":"getting-started/environment-variables/#gitlab-integration","title":"GitLab Integration","text":"Variable Description Default Example <code>CODEBASE_GITLAB_URL</code> URL of the GitLab instance (none) <code>https://gitlab.com</code> <code>CODEBASE_GITLAB_AUTH_TOKEN</code> Authentication token for GitLab (none) <code>glpat-xyz</code> <code>CODEBASE_GITLAB_WEBHOOK_SECRET</code> Secret token for GitLab webhook validation (none) <code>random-webhook-secret</code> <p>Note</p> <p>The <code>CODEBASE_GITLAB_AUTH_TOKEN</code> is used to authenticate with the GitLab instance using a personal access token with the <code>api</code> scope.</p>"},{"location":"getting-started/environment-variables/#embeddings","title":"Embeddings","text":"Variable Description Default Example <code>CODEBASE_EMBEDDINGS_API_KEY</code> API key for the embeddings provider (none) <code>openai-api-key</code> <code>CODEBASE_EMBEDDINGS_MODEL_NAME</code> Name of the embeddings model <code>openai/text-embedding-3-large</code> <code>voyageai/voyage-code-3</code> or <code>huggingface/Alibaba-NLP/gte-modernbert-base</code> <code>CODEBASE_EMBEDDINGS_DIMENSIONS</code> Number of dimensions for embeddings <code>1536</code> <code>2000</code> <code>CODEBASE_EMBEDDINGS_BATCH_SIZE</code> Batch size for embeddings (OpenAI only) <code>500</code> <code>500</code> <code>CODEBASE_CHUNK_SIZE</code> Size of chunks to split documents into <code>1500</code> <code>1500</code> <code>CODEBASE_CHUNK_OVERLAP</code> Overlap between chunks (non-code languages) <code>150</code> <code>150</code> <p>Note</p> <p>The <code>CODEBASE_EMBEDDINGS_MODEL_NAME</code> is the name of the embeddings model to use. OpenAI, HuggingFace or VoyageAI models are supported. For more embeddings models, check: MTEB Leaderboard.</p> <p>Danger</p> <p>If you change the <code>CODEBASE_EMBEDDINGS_DIMENSIONS</code> after the documents have been already indexed, you will need to recreate the <code>CodebaseDocument</code> table on the database and re-index all the documents.</p>"},{"location":"getting-started/environment-variables/#automation","title":"Automation","text":"<p>Note</p> <p>At least one of the supported providers should be configured to use the automation features.</p>"},{"location":"getting-started/environment-variables/#openrouter-default","title":"OpenRouter (default).","text":"Variable Description Default Example <code>OPENROUTER_API_KEY</code> OpenRouter API key (none) <code>OPENROUTER_API_BASE</code> OpenRouter API base URL <code>https://openrouter.ai/api/v1</code>"},{"location":"getting-started/environment-variables/#anthropic","title":"Anthropic","text":"Variable Description Default Example <code>ANTHROPIC_API_KEY</code> Anthropic API key (none)"},{"location":"getting-started/environment-variables/#openai","title":"OpenAI","text":"Variable Description Default Example <code>OPENAI_API_KEY</code> OpenAI API key (none)"},{"location":"getting-started/environment-variables/#google","title":"Google","text":"Variable Description Default Example <code>GOOGLE_API_KEY</code> Google API key (none)"},{"location":"getting-started/environment-variables/#web-search","title":"Web Search","text":"Variable Description Default Example <code>AUTOMATION_WEB_SEARCH_MAX_RESULTS</code> Maximum number of results to return from web search <code>5</code> <code>AUTOMATION_WEB_SEARCH_ENGINE</code> Web search engine to use (<code>duckduckgo</code>, <code>tavily</code>) <code>duckduckgo</code> <code>tavily</code> <code>AUTOMATION_WEB_SEARCH_API_KEY</code> Web search API key (required if engine is <code>tavily</code>) (none)"},{"location":"getting-started/environment-variables/#mcp-tools","title":"MCP Tools","text":"<p>MCP (Model Context Protocol) tools extend agent capabilities by providing access to external services and specialized functionality.</p> Variable Description Default Example <code>MCP_PROXY_HOST</code> Host URL for the MCP proxy server <code>http://mcp-proxy:9090</code> <code>http://localhost:9090</code> <code>MCP_PROXY_ADDR</code> Address for the MCP proxy to listen on <code>:9090</code> <code>:9090</code> <code>MCP_PROXY_AUTH_TOKEN</code> Authentication token for MCP proxy (none) <code>secure-auth-token</code> <code>MCP_FETCH_ENABLED</code> Enable/disable Fetch MCP server for web scraping <code>true</code> <code>false</code> <code>MCP_FETCH_VERSION</code> Version of the Fetch MCP server <code>2025.4.7</code> <code>2025.4.7</code> <code>MCP_SENTRY_ENABLED</code> Enable/disable Sentry MCP server for error monitoring <code>true</code> <code>false</code> <code>MCP_SENTRY_VERSION</code> Version of the Sentry MCP server <code>0.10.0</code> <code>0.10.0</code> <code>MCP_SENTRY_ACCESS_TOKEN</code> Sentry API access token (none) <code>sntryu_abc123...</code> <code>MCP_SENTRY_HOST</code> Sentry instance hostname (none) <code>your-org.sentry.io</code> <p>Info</p> <p>MCP tools are currently available in the Plan and Execute agent. The Fetch server provides web scraping capabilities, while the Sentry server enables error monitoring integration. For detailed configuration, see MCP Tools.</p> <p>Note</p> <p>Sentry MCP server requires both <code>MCP_SENTRY_ACCESS_TOKEN</code> and <code>MCP_SENTRY_HOST</code> to be configured for functionality.</p>"},{"location":"getting-started/environment-variables/#automation-ai-agents","title":"Automation: AI Agents","text":"<p>This section documents the environment variables for each automation agent. Each agent uses a unique prefix for its variables.</p> <p>All the default models where chosen to be the most effective models. You can change the models to use other models by setting the corresponding environment variables.</p>"},{"location":"getting-started/environment-variables/#codebase-search","title":"Codebase Search","text":"Variable Description Default <code>CODEBASE_SEARCH_NAME</code> Name of the codebase search agent. <code>CodebaseSearch</code> <code>CODEBASE_SEARCH_TOP_N</code> Number of results to return from the codebase search. <code>10</code> <code>CODEBASE_SEARCH_REPHRASE_MODEL_NAME</code> Model to rephrase the codebase search query. <code>openrouter:openai/gpt-4-1-mini</code> <code>CODEBASE_SEARCH_RERANKING_MODEL_NAME</code> Model for listwise reranking. <code>openrouter:openai/gpt-4-1-mini</code> <p>Note</p> <p>The <code>CODEBASE_SEARCH_TOP_N</code> variable is used to specify the number of code snippets that will be provided to the LLM.</p>"},{"location":"getting-started/environment-variables/#code-describer","title":"Code Describer","text":"Variable Description Default <code>CODE_DESCRIBER_NAME</code> Name of the code describer agent. <code>CodeDescriber</code> <code>CODE_DESCRIBER_MODEL_NAME</code> Model for code describer. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"getting-started/environment-variables/#pull-request-describer","title":"Pull Request Describer","text":"Variable Description Default <code>PR_DESCRIBER_NAME</code> Name of the PR describer agent. <code>PullRequestDescriber</code> <code>PR_DESCRIBER_MODEL_NAME</code> Model for PR describer. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"getting-started/environment-variables/#pipeline-fixer","title":"Pipeline Fixer","text":"Variable Description Default <code>PIPELINE_FIXER_NAME</code> Name of the pipeline fixer agent. <code>PipelineFixer</code> <code>PIPELINE_FIXER_MAX_ITERATIONS</code> Maximum retry iterations for pipeline fixer. <code>20</code> <code>PIPELINE_FIXER_SAME_ERROR_MODEL_NAME</code> Model for same error evaluator. <code>openrouter:openai/gpt-4-1-mini</code> <code>PIPELINE_FIXER_TROUBLESHOOTING_MODEL_NAME</code> Model for troubleshooting. <code>openrouter:openai/o4-mini</code> <code>PIPELINE_FIXER_TROUBLESHOOTING_THINKING_LEVEL</code> Thinking level for troubleshooting. <code>high</code> <code>PIPELINE_FIXER_COMMAND_OUTPUT_MODEL_NAME</code> Model for command output evaluator. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"getting-started/environment-variables/#plan-and-execute","title":"Plan and Execute","text":"Variable Description Default <code>PLAN_AND_EXECUTE_NAME</code> Name of the plan and execute agent. <code>PlanAndExecute</code> <code>PLAN_AND_EXECUTE_RECURSION_LIMIT</code> Recursion limit for planning and execution steps each. <code>100</code> <code>PLAN_AND_EXECUTE_PLANNING_MODEL_NAME</code> Model for planning tasks. <code>openrouter:anthropic/claude-sonnet-4</code> <code>PLAN_AND_EXECUTE_EXECUTION_MODEL_NAME</code> Model for executing tasks. <code>openrouter:anthropic/claude-sonnet-4</code> <code>PLAN_AND_EXECUTE_HUMAN_APPROVAL_MODEL_NAME</code> Model for plan approval evaluation. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"getting-started/environment-variables/#issue-addressor","title":"Issue Addressor","text":"Variable Description Default <code>ISSUE_ADDRESSOR_NAME</code> Name of the issue addressor agent. <code>IssueAddressor</code> <code>ISSUE_ADDRESSOR_ISSUE_EVALUATOR_MODEL_NAME</code> Model for issue evaluation. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"getting-started/environment-variables/#snippet-replacer","title":"Snippet Replacer","text":"Variable Description Default <code>SNIPPET_REPLACER_NAME</code> Name of the snippet replacer agent. <code>SnippetReplacer</code> <code>SNIPPET_REPLACER_MODEL_NAME</code> Model for snippet replacer (LLM strategy). <code>openrouter:anthropic/claude-3-5-haiku</code> <code>SNIPPET_REPLACER_STRATEGY</code> Strategy: <code>llm</code> or <code>find_and_replace</code>. <code>find_and_replace</code>"},{"location":"getting-started/environment-variables/#codebase-chat","title":"Codebase Chat","text":"Variable Description Default <code>CODEBASE_CHAT_NAME</code> Name of the codebase chat agent. <code>CodebaseChat</code> <code>CODEBASE_CHAT_MODEL_NAME</code> Model for codebase chat. <code>openrouter:openai/gpt-4-1-mini</code> <code>CODEBASE_CHAT_TEMPERATURE</code> Temperature for codebase chat. <code>0.2</code>"},{"location":"getting-started/environment-variables/#review-addressor","title":"Review Addressor","text":"Variable Description Default <code>REVIEW_ADDRESSOR_NAME</code> Name of the review addressor agent. <code>ReviewAddressor</code> <code>REVIEW_ADDRESSOR_REVIEW_COMMENT_MODEL_NAME</code> Model for review assessment. <code>openrouter:openai/gpt-4-1-mini</code> <code>REVIEW_ADDRESSOR_REPLY_MODEL_NAME</code> Model for reply to comments/questions. <code>openrouter:openai/gpt-4-1</code> <code>REVIEW_ADDRESSOR_REPLY_TEMPERATURE</code> Temperature for the reply model. <code>0.2</code>"},{"location":"getting-started/environment-variables/#image-url-extractor","title":"Image URL Extractor","text":"Variable Description Default <code>IMAGE_URL_EXTRACTOR_NAME</code> Name of the image URL extractor agent. <code>ImageURLExtractor</code> <code>IMAGE_URL_EXTRACTOR_MODEL_NAME</code> Model for image URL extraction. <code>openrouter:openai/gpt-4-1-nano</code>"},{"location":"getting-started/monitoring/","title":"Monitoring Configuration","text":"<p>This guide walks you through configuring LangSmith monitoring for DAIV. LangSmith provides comprehensive observability for your AI agents, including tracing, logging, and performance monitoring.</p>"},{"location":"getting-started/monitoring/#prerequisites","title":"Prerequisites","text":"<p>Before configuring monitoring, ensure you have:</p> <ul> <li>DAIV installed and running - Follow the installation guide first</li> <li>LangSmith account - Create a free account at smith.langchain.com</li> <li>LangSmith API key - Generated from your LangSmith dashboard</li> </ul>"},{"location":"getting-started/monitoring/#step-1-create-langsmith-api-key","title":"Step 1: Create LangSmith API Key","text":"<ol> <li> <p>Sign in to LangSmith:</p> </li> <li> <p>Go to smith.langchain.com</p> </li> <li> <p>Sign in with your account or create a new one</p> </li> <li> <p>Generate API Key:</p> </li> <li> <p>Navigate to Settings \u2192 API Keys</p> </li> <li>Click Create API Key</li> <li>Name: <code>DAIV Integration</code></li> <li>Description: <code>API key for DAIV monitoring</code></li> <li> <p>Click Create</p> </li> <li> <p>Copy the API Key:</p> </li> <li>Important: Copy and save the API key immediately - you won't see it again</li> <li>The key format looks like: <code>lsv2_pt_xxxxxxxxxxxxxxxxxxxxxxxx_yyyyyyyyyyyy</code></li> </ol> <p>API Key Security</p> <p>Store your API key securely. Never commit it to version control or share it publicly.</p>"},{"location":"getting-started/monitoring/#step-2-configure-environment-variables","title":"Step 2: Configure Environment Variables","text":"<p>Add your LangSmith configuration to DAIV's environment settings.</p>"},{"location":"getting-started/monitoring/#for-docker-compose-setup","title":"For Docker Compose Setup","text":"<p>Edit your <code>docker-compose.yml</code> file:</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  # ...\n  environment:\n    LANGSMITH_TRACING: true\n    LANGSMITH_PROJECT: daiv-default\n    LANGSMITH_API_KEY: lsv2_pt_xxxxxxxxxxxxxxxxxxxxxxxx_yyyyyyyyyyyy\n  # ...\n</code></pre>"},{"location":"getting-started/monitoring/#for-docker-swarm-setup","title":"For Docker Swarm Setup","text":"<p>Environment configuration: Bash<pre><code># LangSmith Monitoring\nLANGSMITH_TRACING=true\nLANGSMITH_PROJECT=daiv-production\nLANGSMITH_API_KEY_FILE=/run/secrets/langsmith_api_key\n</code></pre></p> <p>Create Docker secret: Bash<pre><code># Create secret for LangSmith API key\necho \"lsv2_pt_xxxxxxxxxxxxxxxxxxxxxxxx_yyyyyyyyyyyy\" | docker secret create langsmith_api_key -\n</code></pre></p> <p>Using EU Endpoint</p> <p>If you're in Europe, you may want to use the EU endpoint (default is US): Bash<pre><code>LANGSMITH_ENDPOINT=https://eu.api.smith.langchain.com\n</code></pre></p>"},{"location":"getting-started/monitoring/#step-3-configure-project-settings","title":"Step 3: Configure Project Settings","text":"<p>Customize your LangSmith project settings for better organization.</p>"},{"location":"getting-started/monitoring/#project-names","title":"Project Names","text":"<p>Use descriptive project names to organize your traces:</p> Bash<pre><code># For different environments\nLANGSMITH_PROJECT=daiv-production    # Production environment\nLANGSMITH_PROJECT=daiv-staging       # Staging environment\nLANGSMITH_PROJECT=daiv-development   # Development environment\n</code></pre>"},{"location":"getting-started/monitoring/#step-4-restart-daiv-services","title":"Step 4: Restart DAIV Services","text":"<p>Apply the new monitoring configuration by restarting DAIV.</p>"},{"location":"getting-started/monitoring/#for-docker-compose","title":"For Docker Compose","text":"Bash<pre><code># Restart all services\ndocker compose restart\n\n# Or restart specific services\ndocker compose restart app worker\n</code></pre>"},{"location":"getting-started/monitoring/#for-docker-swarm","title":"For Docker Swarm","text":"Bash<pre><code># Update the stack with new configuration\ndocker stack deploy -c stack.yml daiv\n</code></pre>"},{"location":"getting-started/monitoring/#step-5-verify-monitoring-setup","title":"Step 5: Verify Monitoring Setup","text":"<p>Test that LangSmith monitoring is working correctly.</p> <ol> <li> <p>Generate Some Activity:</p> </li> <li> <p>Create a test issue in your repository with the <code>daiv</code> label</p> </li> <li>Wait for DAIV to process the issue</li> <li> <p>Or trigger any AI agent activity</p> </li> <li> <p>Check LangSmith Dashboard:</p> </li> <li> <p>Go to smith.langchain.com</p> </li> <li>Navigate to your project (e.g., <code>daiv-default</code>)</li> <li> <p>You should see traces appearing for agent executions</p> </li> <li> <p>Verify Trace Details:</p> </li> <li> <p>Click on any trace to see detailed execution steps</p> </li> <li>Check for proper agent names, model calls, and timing information</li> </ol>"},{"location":"getting-started/monitoring/#step-6-dashboard-and-analytics","title":"Step 6: Dashboard and Analytics","text":"<p>Set up monitoring dashboards and alerts for your DAIV deployment.</p>"},{"location":"getting-started/monitoring/#agent-metadata-and-tags","title":"Agent Metadata and Tags","text":"<p>Each DAIV agent automatically includes standardized metadata and tags for LangSmith tracing, making it easy to create dashboards and analyze performance:</p>"},{"location":"getting-started/monitoring/#standard-tags","title":"Standard Tags","text":"<p>All agents include these tags in their traces:</p> Tag Description Example Values Agent Name The specific agent type <code>IssueAddressor</code>, <code>PipelineFixer</code>, <code>ReviewAddressor</code>, <code>CodebaseChat</code>, <code>PullRequestDescriber</code>, <code>CodeDescriber</code>, <code>SnippetReplacer</code>, <code>ImageURLExtractor</code>, <code>CodebaseSearch</code>, <code>PlanAndExecute</code> Client Slug The repository client identifier <code>gitlab</code>, <code>github</code>"},{"location":"getting-started/monitoring/#agent-specific-metadata","title":"Agent-Specific Metadata","text":"<p>Different agents include additional context-specific metadata:</p> <p>Issue Addressor (<code>IssueAddressor</code>): JSON<pre><code>{\n  \"author\": \"username\",\n  \"thread_id\": \"unique-thread-id\",\n  \"project_id\": 123,\n  \"source_repo_id\": \"group/repo\",\n  \"source_ref\": \"main\",\n  \"issue_id\": 456,\n  \"repo_client\": \"gitlab\"\n}\n</code></pre></p> <p>Pipeline Fixer (<code>PipelineFixer</code>): JSON<pre><code>{\n  \"merge_request_id\": 789,\n  \"job_id\": 101112,\n  \"thread_id\": \"unique-thread-id\",\n  \"source_repo_id\": \"group/repo\",\n  \"source_ref\": \"feature-branch\",\n  \"job_name\": \"build_and_test\"\n}\n</code></pre></p> <p>Review Addressor (<code>ReviewAddressor</code>): JSON<pre><code>{\n  \"merge_request_id\": 789,\n  \"discussion_id\": \"abc123\",\n  \"author\": \"reviewer-username\",\n  \"thread_id\": \"unique-thread-id\",\n  \"source_repo_id\": \"group/repo\",\n  \"source_ref\": \"feature-branch\"\n}\n</code></pre></p> <p>Codebase Chat (<code>CodebaseChat</code>): JSON<pre><code>{\n  \"model_id\": \"DAIV\",\n  \"chat_stream\": true\n}\n</code></pre></p> <p>Pull Request Describer (<code>PullRequestDescriber</code>): JSON<pre><code>{\n  \"thread_id\": \"unique-thread-id\"\n}\n</code></pre></p>"},{"location":"getting-started/monitoring/#creating-custom-dashboards","title":"Creating Custom Dashboards","text":"<p>Use these tags and metadata to create focused dashboards:</p> <p>By Agent Type: - Filter by tag: <code>IssueAddressor</code> to see all issue processing activity - Filter by tag: <code>PipelineFixer</code> to monitor CI/CD troubleshooting - Filter by tag: <code>ReviewAddressor</code> to track code review interactions</p> <p>By Repository: - Filter by metadata: <code>source_repo_id</code> = <code>\"your-org/your-repo\"</code> - Group by <code>repo_client</code> to compare GitLab vs GitHub activity</p> <p>By User Activity: - Filter by metadata: <code>author</code> = <code>\"username\"</code> to see user-specific interactions - Group by <code>author</code> to identify most active users</p> <p>By Performance: - Monitor execution time by agent type - Track token usage patterns across different agents - Analyze success/failure rates by agent and repository</p>"},{"location":"getting-started/monitoring/#setting-up-alerts","title":"Setting Up Alerts","text":"<p>Configure alerts in LangSmith for: - High error rates (&gt; 5%) - Slow response times (&gt; 30 seconds) - Excessive token usage - Failed agent executions</p>"},{"location":"getting-started/monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/monitoring/#common-issues","title":"Common Issues","text":"<p>No traces appearing in LangSmith: - Verify API key is correct and has proper permissions - Check that <code>LANGSMITH_TRACING=true</code> is set - Ensure network connectivity to LangSmith endpoints - Review application logs for authentication errors</p> <p>Incomplete or missing trace data: - Verify project name matches in all configurations - Check that all required environment variables are set - Ensure Docker secrets are properly mounted (for Swarm deployments)</p> <p>High costs or token usage: - Review trace filtering settings - Consider disabling tracing for development environments - Monitor token consumption patterns in LangSmith dashboard</p>"},{"location":"getting-started/monitoring/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/monitoring/#sampling-configuration","title":"Sampling Configuration","text":"<p>Configure trace sampling to reduce costs while maintaining visibility:</p> Bash<pre><code># Sample 50% of traces (default: 100%)\nLANGCHAIN_TRACING_SAMPLE_RATE=0.5\n</code></pre>"},{"location":"getting-started/monitoring/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>For more detailed information about LangSmith features, visit the LangSmith documentation.</p>"},{"location":"getting-started/repository-configurations/","title":"Repository Configurations","text":"<p>Customize DAIV for your repository using a <code>.daiv.yml</code> file in the default branch and repository root.</p> <p>This file lets you control features, code formatting, and more.</p>"},{"location":"getting-started/repository-configurations/#example-configuration","title":"Example Configuration","text":"<p>Below is a complete example of a <code>.daiv.yml</code> file.</p> <p>You can copy and modify this template for your repository.</p> YAML<pre><code># Repository settings\ndefault_branch: main\nrepository_description: \"Python web application using Django and React. Follows PEP 8 standards and the Airbnb style guide for JavaScript.\"\nbranch_name_convention: \"Use 'feat/' for features, 'fix/' for bugfixes, 'docs/' for documentation\"\n\n# Feature toggles\nfeatures:\n  auto_address_review_enabled: true\n  auto_address_issues_enabled: true\n  autofix_pipeline_enabled: true\n\n# Code indexing\nextend_exclude_patterns:\n  - \"**/tests/**\"\n  - \"**/*.test.ts\"\n  - \"coverage/**\"\n  - \"*.min.js\"\n\n# Sandbox commands\ncommands:\n  base_image: \"python:3.12-alpine\"\n  install_dependencies: \"pip install -r requirements.txt\"\n  format_code: \"ruff check --fix &amp;&amp; ruff format\"\n</code></pre>"},{"location":"getting-started/repository-configurations/#configure-repository-settings","title":"Configure Repository Settings","text":"<p>Repository settings control the default branch, repository description, and branch naming convention.</p> Option Type Default Description <code>default_branch</code> <code>str | null</code> Repository default branch The branch DAIV uses by default to load the <code>.daiv.yml</code> file. <code>repository_description</code> <code>str</code> <code>\"\"</code> A brief description to help agents understand your repository. Max 400 chars. <code>branch_name_convention</code> <code>str</code> <code>\"always start with 'daiv/' followed by a short description.\"</code> Naming convention for generating pull request branches. <p>Tip</p> <ul> <li>Use clear and simple branch-naming conventions.</li> <li>Keep descriptions concise and informative.</li> </ul>"},{"location":"getting-started/repository-configurations/#enable-or-disable-features","title":"Enable or Disable Features","text":"<p>Control which DAIV features are active in your repository.</p> <p>Under your <code>.daiv.yml</code> file's <code>features:</code> section, configure the following keys:</p> Feature Type Default Description <code>auto_address_review_enabled</code> <code>bool</code> <code>true</code> Enable the code review addressor agent. <code>auto_address_issues_enabled</code> <code>bool</code> <code>true</code> Enable the issue addressor agent. <code>autofix_pipeline_enabled</code> <code>bool</code> <code>true</code> Enable the pipeline fixing agent. <p>Tip</p> <p>Disable features you do not need to reduce noise and speed up processing.</p>"},{"location":"getting-started/repository-configurations/#customize-code-indexing","title":"Customize Code Indexing","text":"<p>Control which files DAIV indexes for context.</p> <p>Warning</p> <p>Files excluded from indexing will not be available to DAIV's AI agents.</p> Option Type Default Description <code>extend_exclude_patterns</code> <code>list[str]</code> <code>[]</code> Add patterns to exclude more files from indexing. <code>exclude_patterns</code> <code>list[str]</code> <code>[\"*package-lock.json\", \"*.lock\", \"*.svg\", \"*.pyc\", \"*.log\", \"*.zip\", \"*.coverage\", \"*.sql\", \"**/.git/**\", \"**/.mypy_cache/**\", \"**/.tox/**\", \"**/vendor/**\", \"**/venv/**\", \"**/.venv/**\", \"**/.env/**\", \"**/node_modules/**\", \"**/dist/**\", \"**/__pycache__/**\", \"**/data/**\", \"**/.idea/**\", \"**/.pytest_cache/**\", \"**/.ruff_cache/**\"]</code> Override the default exclude patterns. <p>Tip</p> <p>Exclude sensitive files and build artifacts. Prefer using <code>extend_exclude_patterns</code> to add more patterns.</p>"},{"location":"getting-started/repository-configurations/#set-up-sandbox-commands","title":"Set Up Sandbox Commands","text":"<p>To use sandbox commands, you must have a <code>daiv-sandbox</code> instance running (see the daiv-sandbox repository for more information), and all three options below (<code>base_image</code>, <code>install_dependencies</code>, and <code>format_code</code>) must be set.</p> <p>Under your <code>.daiv.yml</code> file's <code>commands:</code> section, configure the following keys:</p> Option Type Default Description <code>base_image</code> <code>str</code> <code>null</code> Docker image for the sandbox. Use distro images only. <code>install_dependencies</code> <code>str</code> <code>null</code> Command to install project dependencies. <code>format_code</code> <code>str</code> <code>null</code> Command to format code before committing. <p>Here's how it works:</p> <p>Before committing code generated by DAIV, DAIV will call <code>daiv-sandbox</code> to:</p> <ul> <li>Create a container from the <code>base_image</code>.</li> <li>Execute the <code>install_dependencies</code> command in the container.</li> <li>Execute the <code>format_code</code> command in the container after the <code>install_dependencies</code> command executed successfully.</li> </ul> <p>Warning</p> <p>If any of the commands fail, DAIV will commit the code as is to be manually fixed, if needed.</p> <p>Tip</p> <p>Use specific image versions for reproducibility.</p>"},{"location":"getting-started/supported-providers/","title":"Supported Providers","text":"<p>DAIV currently supports integration with the following LLM providers:</p> <ul> <li>OpenRouter</li> <li>OpenAI</li> <li>Anthropic</li> <li>Gemini</li> </ul> <p>A combination of providers may be configured. For example, you can use OpenAI provider for one agent and Gemini provider for another.</p>"},{"location":"getting-started/supported-providers/#openrouter","title":"OpenRouter","text":"<p>OpenRouter is the default provider for DAIV due to its fallback mechanism and wide range of models from multiple providers.</p> <p>Setup:</p> <ol> <li>Obtain an API key from OpenRouter Settings.</li> <li>Set the <code>OPENROUTER_API_KEY</code> environment variable:    Bash<pre><code>export OPENROUTER_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by OpenRouter, prefixed with <code>openrouter:</code>. For example:</p> Text Only<pre><code>openrouter:openai/gpt-4.1\nopenrouter:anthropic/claude-3-7-sonnet\n</code></pre>"},{"location":"getting-started/supported-providers/#openai","title":"OpenAI","text":"<p>Setup:</p> <ol> <li>Obtain an API key from OpenAI.</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable:    Bash<pre><code>export OPENAI_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by OpenAI. For example:</p> Text Only<pre><code>gpt-4.1\no4-mini\n</code></pre>"},{"location":"getting-started/supported-providers/#anthropic","title":"Anthropic","text":"<p>Setup:</p> <ol> <li>Obtain an API key from Anthropic.</li> <li>Set the <code>ANTHROPIC_API_KEY</code> environment variable:    Bash<pre><code>export ANTHROPIC_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by Anthropic. For example:</p> Text Only<pre><code>claude-3-7-sonnet-20250219\nclaude-3-5-sonnet-20241022\n</code></pre> <p>Warning</p> <p>We love Anthropic, but unfortunately their API is very unstable and often returns errors. Also, the rate limits could be exceeded very quickly.</p>"},{"location":"getting-started/supported-providers/#gemini","title":"Gemini","text":"<p>Setup:</p> <ol> <li>Obtain an API key from AI Studio.</li> <li>Set the <code>GOOGLE_API_KEY</code> environment variable:    Bash<pre><code>export GOOGLE_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by Gemini. For example:</p> Text Only<pre><code>gemini-2.4-flash-preview-04-17\ngemini-2.5-pro-preview-05-06\n</code></pre>"},{"location":"getting-started/up-and-running/","title":"Up and Running","text":"<p>This guide walks you through deploying DAIV using Docker Swarm or Docker Compose. DAIV is an AI-powered development assistant that helps teams with code insights, automated issue resolution, and development workflow automation. After completing this guide, you'll have a fully functional DAIV instance ready to connect to your codebase.</p>"},{"location":"getting-started/up-and-running/#what-youll-deploy","title":"What You'll Deploy","text":"<p>DAIV requires several core services to function properly. You'll deploy these services using container orchestration:</p> <p>Required Core Services:</p> <ul> <li>PostgreSQL with pgvector extension - Stores application data and vector embeddings;</li> <li>Redis - Handles caching and message queueing;</li> <li>DAIV Application - Main API;</li> <li>DAIV Worker - Background task processor.</li> </ul> <p>Optional Service:</p> <ul> <li>DAIV Sandbox - Isolated environment for running arbitrary code;</li> <li>MCP Proxy - Proxy MCP server to run other MCP servers inside a container.</li> </ul>"},{"location":"getting-started/up-and-running/#docker-swarm-recommended","title":"Docker Swarm (Recommended)","text":"<p>Docker Swarm provides better production deployment capabilities including service discovery, load balancing, and rolling updates. This guide covers single-server deployment, but you can extend it to multiple servers using the Docker Swarm documentation.</p> <p>Prerequisites</p> <ul> <li>Docker installed with Swarm enabled</li> <li>Internet connection to pull container images</li> <li>Basic understanding of Docker Swarm</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-create-docker-secrets","title":"Step 1: Create Docker Secrets","text":"<p>Before deploying, you must create these Docker secrets. These secrets store sensitive configuration data securely:</p> <p>Required Secrets:</p> <ul> <li><code>django_secret_key</code> - Random secret key for Django (generate one here)</li> <li><code>db_password</code> - Random password for the PostgreSQL database</li> <li><code>codebase_gitlab_auth_token</code> - GitLab personal access token with <code>api</code> scope (see how to create one)</li> <li><code>codebase_gitlab_webhook_secret</code> - Random secret for GitLab webhook validation</li> <li><code>codebase_embeddings_api_key</code> - OpenAI API key with access to <code>text-embedding-3-large</code> model</li> <li><code>daiv_sandbox_api_key</code> - Random API key for Sandbox service authentication</li> <li><code>openrouter_api_key</code> - OpenRouter API key for LLM access</li> <li><code>mcp_proxy_auth_token</code> - Random API key for MCP Proxy service authentication</li> </ul> <p>Create each secret using this command (see Docker Secrets documentation for more details):</p> Bash<pre><code>docker secret create django_secret_key &lt;secret_key&gt;\n</code></pre> <p>Additional Secrets May Be Required</p> <p>These are the minimal secrets for basic DAIV functionality. Check the Environment Variables page for additional secrets needed for specific features or services.</p>"},{"location":"getting-started/up-and-running/#step-2-create-stackyml-file","title":"Step 2: Create <code>stack.yml</code> file","text":"<p>Create your deployment configuration file. This YAML file defines all services, networks, and volumes needed for DAIV.</p> <p>Customize Environment Variables</p> <p>Replace all annotated values with your own configuration. See the Environment Variables page for complete configuration options.</p> YAML<pre><code>x-app-environment-defaults: &amp;app_environment_defaults\n  # DJANGO\n  DJANGO_SETTINGS_MODULE: daiv.settings.production\n  DJANGO_ALLOWED_HOSTS: your-hostname.com,app,127.0.0.1 (1)\n  DJANGO_REDIS_URL: redis://daiv_redis:6379/0\n  DJANGO_BROKER_URL: redis://daiv_redis:6379/0\n  DAIV_EXTERNAL_URL: https://your-hostname.com (2)\n  # DATABASE\n  DB_NAME: daiv\n  DB_USER: daiv_admin\n  DB_HOST: daiv_db\n  DB_SSLMODE: prefer\n  # CODEBASE\n  CODEBASE_CLIENT: gitlab\n  CODEBASE_GITLAB_URL: https://gitlab.com (3)\n  # SANDBOX\n  DAIV_SANDBOX_URL: http://sandbox:8000 (4)\n\nx-deploy-defaults: &amp;deploy_defaults\n  replicas: 1\n  update_config:\n    order: start-first\n    delay: 60s\n    failure_action: rollback\n  rollback_config:\n    parallelism: 0\n  restart_policy:\n    condition: any\n    window: 120s\n\nservices:\n  db:\n    image: pgvector/pgvector:pg17\n    environment:\n      - POSTGRES_DB=daiv\n      - POSTGRES_USER=daiv_admin\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password\n    networks:\n      - internal\n    secrets:\n      - db_password\n    volumes:\n      - db-volume:/var/lib/postgresql/data\n    stop_grace_period: 30s\n    healthcheck:\n      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER\n      interval: 10s\n      start_period: 120s\n    deploy:\n      replicas: 1\n      update_config:\n        failure_action: rollback\n        delay: 10s\n      rollback_config:\n        parallelism: 0\n      restart_policy:\n        condition: any\n        window: 120s\n\n  redis:\n    image: redis:7-alpine\n    networks:\n      - internal\n    volumes:\n      - redis-volume:/data\n    healthcheck:\n      test: redis-cli ping || exit 1\n      interval: 10s\n      start_period: 30s\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  app:\n    image: ghcr.io/srtab/daiv:latest (5)\n    environment:\n      &lt;&lt;: *app_environment_defaults\n    secrets:\n      - django_secret_key\n      - db_password\n      - codebase_gitlab_auth_token\n      - codebase_gitlab_webhook_secret\n      - codebase_embeddings_api_key\n      - daiv_sandbox_api_key\n      - openrouter_api_key\n      - mcp_proxy_auth_token\n    networks:\n      - internal\n      - external\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - tantivy-volume:/home/daiv/data/tantivy_index_v1\n      - embeddings-volume:/home/daiv/data/embeddings\n      - mcp-proxy-volume:/home/daiv/data/mcp-proxy\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  worker:\n    image: ghcr.io/srtab/daiv:latest (5)\n    command: sh /home/daiv/start-worker\n    environment:\n      &lt;&lt;: *app_environment_defaults\n      CELERY_CONCURRENCY: 2 (6)\n    secrets:\n      - django_secret_key\n      - db_password\n      - codebase_gitlab_auth_token\n      - codebase_gitlab_webhook_secret\n      - codebase_embeddings_api_key\n      - daiv_sandbox_api_key\n      - openrouter_api_key\n      - mcp_proxy_auth_token\n    networks:\n      - internal\n    volumes:\n      - tantivy-volume:/home/daiv/data/tantivy_index_v1\n      - embeddings-volume:/home/daiv/data/embeddings\n      - mcp-proxy-volume:/home/daiv/data/mcp-proxy\n    healthcheck:\n      test: celery -A daiv inspect ping\n      interval: 10s\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  sandbox:\n    image: ghcr.io/srtab/daiv-sandbox:latest (5)\n    environment:\n      DAIV_SANDBOX_KEEP_TEMPLATE: true (7)\n    networks:\n      - internal\n    secrets:\n      - daiv_sandbox_api_key\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock (8)\n      - $HOME/.docker/config.json:/home/app/.docker/config.json (9)\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  mcp-proxy:\n    image: ghcr.io/tbxark/mcp-proxy:latest\n    networks:\n      - internal\n    volumes:\n      - mcp-proxy-volume:/config\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n\nnetworks:\n  internal:\n    driver: overlay\n  external:\n    driver: overlay\n\nvolumes:\n  db-volume:\n    driver: local\n  redis-volume:\n    driver: local\n  tantivy-volume:\n    driver: local\n  embeddings-volume:\n    driver: local\n  mcp-proxy-volume:\n    driver: local\n\nsecrets:\n  django_secret_key:\n    external: true\n  db_password:\n    external: true\n  codebase_gitlab_auth_token:\n    external: true\n  codebase_gitlab_webhook_secret:\n    external: true\n  codebase_embeddings_api_key:\n    external: true\n  daiv_sandbox_api_key:\n    external: true\n  openrouter_api_key:\n    external: true\n  mcp_proxy_auth_token:\n    external: true\n</code></pre> <ol> <li>Replace <code>your-hostname.com</code> with your domain name. Don't include the schema (e.g., use <code>daiv.com</code> not <code>https://daiv.com</code>). Keep <code>app</code> and <code>127.0.0.1</code> for internal service communication.</li> <li>Replace with your full domain URL including schema (e.g., <code>https://your-hostname.com</code>)</li> <li>Set to your GitLab instance URL (e.g., <code>https://gitlab.com</code> for GitLab.com)</li> <li>Points to the Sandbox service. Use <code>http://sandbox:8000</code> when deploying Sandbox in the same stack</li> <li>Recommended: Replace <code>latest</code> with a specific version tag for production deployments</li> <li>Number of parallel worker processes. Adjust based on your server resources and expected workload</li> <li>See DAIV Sandbox documentation for configuration details</li> <li>Required: Sandbox needs Docker socket access to create isolated containers</li> <li>Optional: Remove this volume if you don't need private registry access</li> </ol>"},{"location":"getting-started/up-and-running/#step-3-deploy-the-stack","title":"Step 3: Deploy the stack","text":"<p>Deploy your DAIV stack by running this command from the directory containing your <code>stack.yml</code> file:</p> Bash<pre><code>docker stack deploy -c stack.yml daiv\n</code></pre> <p>Monitor deployment progress with these commands:</p> Bash<pre><code># Check service status with full details\ndocker stack ps daiv --no-trunc\n\n# Or check running containers\ndocker ps\n</code></pre> <p>Deployment Time</p> <p>Services may take several minutes to become fully healthy, especially during the initial deployment when images are being pulled and databases are being initialized.</p>"},{"location":"getting-started/up-and-running/#step-4-next-steps","title":"Step 4: \u23ed\ufe0f Next steps","text":"<p>Your DAIV deployment is now running! Follow the Reverse Proxy guide below to configure external access, then proceed to connect your first repository.</p>"},{"location":"getting-started/up-and-running/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose provides simpler deployment suitable for development environments or smaller production setups. This method uses a single configuration file to manage all services.</p> <p>Prerequisites</p> <ul> <li>Docker installed with Compose</li> <li>Internet connection to pull container images</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-create-docker-composeyml-file","title":"Step 1: Create <code>docker-compose.yml</code> file","text":"<p>Create your Docker Compose configuration. This file defines all services and their configurations in a single place.</p> <p>Environment Variable Configuration</p> <p>Replace all annotated values with your specific configuration. See the Environment Variables page for additional options.</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  image: ghcr.io/srtab/daiv:latest\n  restart: unless-stopped\n  environment:\n    DJANGO_SECRET_KEY: secret-key (1)\n    DJANGO_ALLOWED_HOSTS: your-hostname.com,app,127.0.0.1 (2)\n    DJANGO_REDIS_URL: redis://redis:6379/0\n    DJANGO_BROKER_URL: redis://redis:6379/0\n    DAIV_EXTERNAL_URL: https://your-hostname.com (12)\n    # Database settings\n    DB_HOST: db\n    DB_NAME: daiv\n    DB_USER: daiv\n    DB_PASSWORD: daivpass (3)\n    DB_SSLMODE: prefer\n    # Codebase settings\n    CODEBASE_CLIENT: gitlab\n    CODEBASE_GITLAB_URL: https://gitlab.com (4)\n    CODEBASE_GITLAB_AUTH_TOKEN: gitlab-auth-token (5)\n    CODEBASE_GITLAB_WEBHOOK_SECRET: gitlab-webhook-secret (6)\n    CODEBASE_EMBEDDINGS_API_KEY: openai-api-key (7)\n    # LLM Providers settings\n    OPENROUTER_API_KEY: openrouter-api-key (8)\n    # Sandbox settings\n    DAIV_SANDBOX_API_KEY: daiv-sandbox-api-key (9)\n    # MCP Proxy settings\n    MCP_PROXY_AUTH_TOKEN: mcp-proxy-auth-token (13)\n  volumes:\n    - tantivy-volume:/home/app/data/tantivy_index_v1\n    - embeddings-volume:/home/app/data/embeddings\n    - mcp-proxy-volume:/home/app/data/mcp-proxy\n\nservices:\n  db:\n    image: pgvector/pgvector:pg17\n    container_name: daiv-db\n    restart: unless-stopped\n    environment:\n      POSTGRES_DB: daiv\n      POSTGRES_USER: daiv\n      POSTGRES_PASSWORD: daivpass (10)\n    volumes:\n      - db-volume:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U daiv -d daiv\"]\n      interval: 10s\n      timeout: 10s\n      start_period: 30s\n      retries: 5\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:latest\n    restart: unless-stopped\n    container_name: daiv-redis\n    volumes:\n      - redis-volume:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    ports:\n      - \"6379:6379\"\n\n  app:\n    &lt;&lt;: *x_app_default\n    container_name: daiv-app\n    command: sh /home/app/docker/start-app\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n      redis:\n        condition: service_healthy\n        restart: true\n      sandbox:\n        condition: service_healthy\n\n  worker:\n    &lt;&lt;: *x_app_default\n    container_name: daiv-worker\n    command: sh /home/app/docker/start-worker\n    environment:\n      C_FORCE_ROOT: true\n    ports: []\n    depends_on:\n      app:\n        condition: service_healthy\n        restart: true\n\n  sandbox:\n    image: ghcr.io/srtab/daiv-sandbox:latest\n    restart: unless-stopped\n    container_name: daiv-sandbox\n    environment:\n      DAIV_SANDBOX_API_KEY: daiv-sandbox-api-key (11)\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - $HOME/.docker/config.json:/home/app/.docker/config.json\n\n  mcp-proxy:\n    image: ghcr.io/tbxark/mcp-proxy:latest\n    restart: unless-stopped\n    container_name: daiv-mcp-proxy\n    volumes:\n      - mcp-proxy-volume:/config\n    ports:\n      - \"9090:9090\"\n    depends_on:\n      app:\n        condition: service_healthy\n        restart: true\n\nvolumes:\n  db-volume:\n    driver: local\n  redis-volume:\n    driver: local\n  tantivy-volume:\n    driver: local\n  embeddings-volume:\n    driver: local\n  mcp-proxy-volume:\n    driver: local\n</code></pre> <ol> <li>Generate a Django secret key - Use a cryptographically secure random string</li> <li>Replace with your domain name - Don't include schema (e.g., <code>daiv.com</code>)</li> <li>Generate a secure random password for the database</li> <li>Set your GitLab instance URL (e.g., <code>https://gitlab.com</code>)</li> <li>Create a GitLab personal access token with <code>api</code> scope permissions (see how to create one)</li> <li>Generate a random webhook secret for GitLab webhook validation</li> <li>Get an OpenAI API key with access to <code>text-embedding-3-large</code> model</li> <li>Get an OpenRouter API key for LLM model access</li> <li>Generate a random API key for Sandbox service authentication</li> <li>Use the same password as defined in annotation 3</li> <li>Use the same API key as defined in annotation 9</li> <li>Include the full URL with schema (e.g., <code>https://your-hostname.com</code>)</li> <li>Generate a random API key for MCP Proxy service authentication</li> </ol>"},{"location":"getting-started/up-and-running/#step-2-run-the-compose-file","title":"Step 2: Run the compose file","text":"<p>Start all DAIV services by running this command from the directory containing your <code>docker-compose.yml</code>:</p> Bash<pre><code>docker compose up -d\n</code></pre> <p>Check service status to ensure everything is running correctly:</p> Bash<pre><code>docker compose ps\n</code></pre>"},{"location":"getting-started/up-and-running/#step-3-next-steps","title":"Step 3: \u23ed\ufe0f Next steps","text":"<p>Your DAIV instance is now operational! Continue with the Reverse Proxy configuration below, then proceed to connect your first repository.</p>"},{"location":"getting-started/up-and-running/#reverse-proxy","title":"Reverse Proxy","text":"<p>Configure a reverse proxy to provide secure external access to your DAIV instance. This setup enables HTTPS access and proper domain routing.</p> <p>This guide covers Nginx configuration. Basic Nginx knowledge is assumed.</p> <p>Contributions Welcome</p> <p>Only Nginx configuration is provided currently. Contributions for Apache, Traefik, and other reverse proxy configurations are welcome!</p> <p>Prerequisites</p> <ul> <li>Nginx installed</li> <li>Valid SSL certificate for your domain</li> <li>Domain name pointing to your server</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-configure-nginx","title":"Step 1: Configure Nginx","text":"<p>Create a new Nginx configuration file at <code>/etc/nginx/conf.d/daiv.conf</code> (path may vary by operating system).</p> <p>Add this configuration and customize the annotated values:</p> Nginx Configuration File<pre><code>upstream daiv-instance {\n  server internal-ip:8000;  (1)\n}\n\nserver {\n  listen              443 ssl;\n  listen              [::]:443 ssl;\n\n  http2               on;\n\n  server_name         your-hostname.com;  (2)\n\n  # SSL Configuration.\n  # You can use this https://ssl-config.mozilla.org/ to generate\n  # the correct ssl configuration for your server.\n  ssl_certificate      /etc/pki/tls/certs/ssl.crt;  (3)\n  ssl_certificate_key  /etc/pki/tls/private/ssl.key;  (4)\n\n  ssl_protocols TLSv1.3;\n  ssl_ecdh_curve X25519:prime256v1:secp384r1;\n  ssl_prefer_server_ciphers off;\n\n  location / {\n    proxy_pass              http://daiv-instance;\n    proxy_set_header        Host $host;\n    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header        X-Forwarded-Proto $scheme;\n    proxy_set_header        X-Real-IP $remote_addr;\n    proxy_redirect          off;\n    proxy_buffering         off;\n    proxy_connect_timeout   60;\n    proxy_send_timeout      60;\n    proxy_read_timeout      60;\n\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n  }\n}\n\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    return 301 https://$host$request_uri;\n}\n</code></pre> <ol> <li>Set the internal IP of your DAIV instance. Use <code>localhost</code> or <code>127.0.0.1</code> if running on the same server</li> <li>Replace with your domain name (e.g., <code>daiv.example.com</code>)</li> <li>Update the SSL certificate path - Location varies by operating system</li> <li>Update the SSL certificate key path - Location varies by operating system</li> </ol>"},{"location":"getting-started/up-and-running/#step-2-restart-nginx","title":"Step 2: Restart Nginx","text":"<p>Apply the configuration changes by restarting Nginx:</p> Bash<pre><code>systemctl restart nginx\n</code></pre> <p>Verify the configuration by accessing your domain in a web browser. You should see the DAIV interface.</p>"},{"location":"getting-started/up-and-running/#final-steps-and-repository-configuration","title":"\ud83d\ude80 Final Steps and Repository Configuration","text":"<p>Congratulations! Your DAIV instance is now running and accessible. To start using DAIV with your repositories, follow these essential next steps:</p>"},{"location":"getting-started/up-and-running/#1-connect-your-first-repository","title":"1. Connect Your First Repository","text":"<p>Your next step is connecting DAIV to your GitLab repositories. This process involves:</p> <ul> <li>Creating GitLab personal access tokens</li> <li>Configuring repository webhooks</li> <li>Indexing repository content</li> <li>Setting up automated workflows\\</li> </ul> <p>\ud83d\udcd6 Follow the complete repository setup guide: Repository Configuration</p>"},{"location":"getting-started/up-and-running/#2-what-you-can-do-after-configuration","title":"2. What You Can Do After Configuration","text":"<p>Once your repository is connected, DAIV will automatically:</p> <ul> <li>Respond to issues - DAIV analyzes issues and suggests solutions or implementation plans</li> <li>Review pull requests - Automated code review and suggestions for improvements</li> <li>Address pipeline failures - Investigates CI/CD failures and proposes fixes</li> <li>Answer code questions - Provides context-aware responses about your codebase</li> </ul>"},{"location":"getting-started/up-and-running/#3-monitoring-your-instance","title":"3. Monitoring Your Instance","text":"<p>Keep track of your DAIV deployment:</p> Bash<pre><code># Check service health (Docker Swarm)\ndocker stack ps daiv\n\n# Check service health (Docker Compose)\ndocker compose ps\n\n# View application logs\ndocker logs &lt;container_name&gt;\n</code></pre>"},{"location":"getting-started/up-and-running/#4-getting-help","title":"4. Getting Help","text":"<p>If you encounter issues during setup:</p> <ul> <li>Check the logs for error messages and debugging information</li> <li>Review the Environment Variables for configuration options</li> <li>Verify network connectivity between services and external APIs</li> <li>Ensure all secrets and API keys are valid and have proper permissions</li> <li>Ask for help on the GitHub Discussions</li> </ul>"}]}