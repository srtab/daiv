{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DAIV : SWE's AI Assistant","text":"<p>Software engineers spend countless hours on repetitive tasks: responding to code reviews, fixing broken builds, and manually implementing feature requests. DAIV changes this by bringing AI automation directly to their existing Git workflow. It's like having a pair programming assistant directly in your Platform.</p> <p>DAIV is an open-source AI assistant that automates development tasks using intelligent agents. It integrates with your repositories to handle routine work, letting you focus on creative problem-solving.</p>"},{"location":"#what-daiv-does","title":"\ud83c\udfaf What DAIV Does","text":"<p>DAIV automates three key software engineering activities:</p> <ul> <li>\ud83d\ude80 Issue Resolution - Converts issue descriptions into working code automatically</li> <li>\ud83d\udd04 Code Review Response - Addresses reviewer feedback and updates merge requests</li> <li>\ud83d\udd0d Pipeline Repair - Repairs CI/CD failures and applies fixes after human approval</li> </ul>"},{"location":"#how-daiv-works","title":"\ud83d\udee0\ufe0f How DAIV Works","text":"<p>DAIV integrates directly with Git platforms using webhooks. No separate interface required. You continue using your existing workflow while DAIV handles automation in the background.</p>"},{"location":"#workflow-overview","title":"Workflow Overview","text":"<p>DAIV responds to different GitLab events with specialized workflows for each feature (Issue Addressor, Code Review Response, Quick Actions):</p> <pre><code>graph TD\n    A[\"\ud83d\udd14 GitLab Webhooks\"] --&gt; B[\"\ud83e\udd16 DAIV\"]\n\n    B --&gt; C[\"\ud83d\udcdd Issue Created/Updated&lt;br/&gt;(title: 'DAIV: ...')\"]\n    B --&gt; D[\"\ud83d\udcac Comment on Issue/MR&lt;br/&gt;(review feedback or @daiv command)\"]\n    B --&gt; F[\"\ud83d\udce4 Code Push&lt;br/&gt;(repository updates)\"]\n\n    C --&gt; G[\"\ud83d\ude80 Issue Addressor&lt;br/&gt;Plan \u2192 Approve \u2192 Execute\"]\n    D --&gt; H[\"\ud83d\udd0d Comment Analysis\"]\n    F --&gt; J[\"\ud83d\uddc2\ufe0f Clear cache\"]\n\n    H --&gt; K[\"\ud83d\udcac Code Review Response&lt;br/&gt;(changes or answers)\"]\n    H --&gt; L[\"\u26a1 Quick Action&lt;br/&gt;(help, plan, pipeline commands)\"]\n\n    G --&gt; M[\"\ud83d\udce4 Creates Merge Request\"]\n    K --&gt; N[\"\ud83d\udcdd Updates Code or Replies\"]\n    L --&gt; P[\"\ud83d\udcac Execute command and Response\"]\n\n    style A fill:#e3f2fd\n    style G fill:#e8f5e8\n    style K fill:#fff3e0\n    style L fill:#f3e5f5</code></pre>"},{"location":"#supported-platforms","title":"\ud83d\udd0c Supported Platforms","text":"<p>Currently supported:</p> <ul> <li> GitLab - Full feature support</li> </ul> <p>Coming soon:</p> <ul> <li> GitHub - Planned for future release</li> </ul> <p>Contributing</p> <p>Want GitHub support sooner? Contributions are welcome!</p>"},{"location":"#get-started","title":"\u23ed\ufe0f Get Started","text":""},{"location":"#step-1-installation","title":"Step 1: Installation","text":"<ul> <li>Set up DAIV - Install and configure DAIV in your environment</li> <li>Connect your repository - Link DAIV to your GitLab project</li> </ul>"},{"location":"#step-2-try-daiv","title":"Step 2: Try DAIV","text":"<ul> <li>Create a test issue - Write \"Add a hello world function\" and watch DAIV generate a plan</li> <li>Approve the plan - Comment \"Go ahead\" to see DAIV create a pull request with working code</li> </ul>"},{"location":"#step-3-customize","title":"Step 3: Customize","text":"<ul> <li>Configure agents - Adjust how DAIV's AI agents behave for your codebase</li> <li>Advanced settings - Fine-tune DAIV for your team's needs</li> </ul>"},{"location":"#step-4-learn-more","title":"Step 4: Learn More","text":"<ul> <li>Join discussions - Ask questions and share experiences</li> <li>Report bugs - Help improve DAIV</li> </ul>"},{"location":"#quick-example","title":"\ud83d\udca1 Quick Example","text":"<p>Here's what a typical DAIV interaction looks like:</p> <ol> <li>Developer creates issue: \"Add rate limiting to the API endpoints\"</li> <li>DAIV generates plan: Analyzes codebase and posts detailed implementation steps</li> <li>Developer approves: Comments \"Looks good, go ahead\"</li> <li>DAIV implements: Creates merge request with rate limiting code, tests, and documentation</li> <li>Reviewer requests changes: \"Use Redis instead of in-memory storage\"</li> <li>DAIV updates code: Automatically modifies the implementation to use Redis</li> </ol> <p>Result: Feature implemented in minutes, not hours.</p>"},{"location":"community/","title":"Community","text":"<p>DAIV is an open-source project currently in its early community-building phase. While our contributor base is small, we're actively seeking to grow and welcome new members to help shape the project's future. We believe that a strong community is essential to building robust, innovative software that meets real-world needs. Whether you're a developer, user, or enthusiast, your involvement would be valuable and appreciated. This document outlines how you can participate in and contribute to the DAIV community.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>There are many ways to contribute to DAIV, regardless of your technical background:</p> <ul> <li>Code Contributions: Implement new features, fix bugs, or improve performance</li> <li>Documentation: Help improve or translate documentation</li> <li>Testing: Test the software and report bugs or suggest improvements</li> <li>Community Support: Help answer questions from other users</li> <li>Feedback: Share your experience using DAIV and suggest improvements</li> </ul> <p>For detailed technical contribution guidelines, including code style, testing requirements, and the pull request process, please refer to our CONTRIBUTING.md document.</p>"},{"location":"community/#communication-channels","title":"Communication Channels","text":"<p>GitHub Issues are the primary communication channel for the DAIV community. We use issues for:</p> <ul> <li>Bug Reports: Report problems or unexpected behavior</li> <li>Feature Requests: Suggest new features or improvements</li> <li>Questions: Ask for help or clarification about using DAIV</li> <li>Discussions: Engage in broader discussions about DAIV's direction</li> </ul> <p>When using GitHub Issues:</p> <ol> <li>Search First: Check if your issue or question has already been addressed</li> <li>Use Templates: Follow the issue templates when available</li> <li>Be Specific: Provide clear, concise information</li> <li>Be Respectful: Follow our code of conduct in all communications</li> <li>Tag Appropriately: Use labels to categorize your issues correctly</li> </ol>"},{"location":"community/#reporting-issues","title":"Reporting Issues","text":"<p>Effective issue reporting helps us improve DAIV more quickly. When reporting issues:</p> <ol> <li>Provide Context: Include your environment details (Python version, OS, etc.)</li> <li>Be Specific: Clearly describe what happened and what you expected to happen</li> <li>Reproduce: Include steps to reproduce the issue</li> <li>Evidence: Add screenshots, logs, or error messages when applicable</li> <li>Search First: Check if the issue has already been reported</li> </ol> <p>For security issues, please follow responsible disclosure practices as outlined in CONTRIBUTING.md.</p>"},{"location":"community/#getting-help","title":"Getting Help","text":"<p>If you need help with using DAIV, troubleshooting issues, or understanding the codebase:</p> <ol> <li>Documentation: Check the existing documentation first</li> <li>GitHub Issues: Search for similar questions in closed issues</li> <li>Open an Issue: If you can't find an answer, open a new issue with the \"question\" label</li> <li>Be Patient: Remember that DAIV is maintained by volunteers who may not respond immediately</li> </ol> <p>When asking for help, provide as much relevant information as possible to make it easier for others to assist you.</p>"},{"location":"community/#code-of-conduct","title":"Code of Conduct","text":"<p>The DAIV community is dedicated to providing a welcoming, inclusive, and harassment-free experience for everyone. We expect all community members to:</p> <ul> <li>Be respectful and considerate</li> <li>Be collaborative and constructive</li> <li>Focus on what is best for the community</li> <li>Show empathy towards other community members</li> </ul> <p>For more details on expected behavior and enforcement procedures, please refer to the Code of Conduct section in our CONTRIBUTING.md document.</p>"},{"location":"community/#recognition","title":"Recognition","text":"<p>We value and recognize all contributions to DAIV:</p> <ul> <li>Contributors: All contributors are acknowledged in our repository</li> <li>Maintainers: Active contributors may be invited to become maintainers with additional repository access</li> <li>Attribution: We ensure proper attribution for code, documentation, and other contributions</li> </ul> <p>We believe in celebrating the work of our community members and ensuring that all contributions, big or small, are recognized and appreciated.</p>"},{"location":"community/#community-resources","title":"Community Resources","text":"<p>The following resources are available to the DAIV community:</p> <ul> <li>GitHub Repository: https://github.com/srtab/daiv</li> <li>Documentation: Available at https://srtab.github.io/daiv/dev/</li> <li>Issue Tracker: For bug reports, feature requests, and discussions</li> <li>README: For an overview of DAIV's features and setup instructions</li> <li>CONTRIBUTING.md: For detailed contribution guidelines</li> </ul> <p>These resources are maintained by the community and are continuously improved based on feedback and contributions.</p>"},{"location":"community/#future-community-plans","title":"Future Community Plans","text":"<p>As DAIV grows, we plan to expand our community initiatives:</p> <ul> <li>Enhanced Documentation: Continuously improving our documentation based on user feedback</li> <li>Community Showcases: Highlighting interesting use cases and implementations</li> <li>Potential Community Meetings: While we don't currently hold regular community meetings, we may introduce them in the future as the community grows</li> <li>Contribution Guides: Developing more detailed guides for specific types of contributions</li> </ul> <p>We're committed to building a vibrant, inclusive community around DAIV and welcome your suggestions for improving our community processes and resources.</p>"},{"location":"ai-agents/mcp-tools/","title":"\ud83d\udd27 MCP Tools","text":""},{"location":"ai-agents/mcp-tools/#what-are-mcp-tools","title":"What are MCP Tools?","text":"<p>MCP (Model Context Protocol) Tools are external services that extend the capabilities of DAIV agents by providing specialized functionality through a standardized protocol. These tools allow AI agents to interact with external systems, fetch data from various sources, and perform actions that go beyond basic code analysis and modification.</p>"},{"location":"ai-agents/mcp-tools/#available-mcp-tools","title":"Available MCP Tools","text":"<p>DAIV currently supports the following MCP tools:</p> MCP Server Tools Use Cases Fetch MCP Server \u2022 <code>fetch</code>: Fetch content from URLs \u2022 Researching documentation and examples from the web\u2022 Fetching configuration files or data from remote sources\u2022 Analyzing external APIs and their responses\u2022 Gathering context from online resources Sentry MCP Server \u2022 <code>find_organizations</code>: Discover Sentry organizations\u2022 <code>get_issue_details</code>: Retrieve detailed information about specific issues \u2022 Analyzing error patterns and crash reports\u2022 Understanding issue context when fixing bugs\u2022 Gathering debugging information from production systems\u2022 Correlating code changes with error occurrences"},{"location":"ai-agents/mcp-tools/#configuration","title":"Configuration","text":"<p>MCP tools are configured through environment variables. Here's how to set them up:</p>"},{"location":"ai-agents/mcp-tools/#basic-configuration","title":"Basic Configuration","text":"Bash<pre><code># MCP Proxy Configuration\nMCP_PROXY_HOST=http://mcp-proxy:9090         # Default: http://mcp-proxy:9090\nMCP_PROXY_ADDR=:9090                         # Default: :9090\nMCP_PROXY_AUTH_TOKEN=your-auth-token         # Optional authentication token\n\n# Fetch MCP Server\nMCP_FETCH_ENABLED=true                       # Default: true\nMCP_FETCH_VERSION=2025.4.7                   # Default: 2025.4.7\n\n# Sentry MCP Server\nMCP_SENTRY_ENABLED=true                      # Default: true\nMCP_SENTRY_VERSION=0.17.1                    # Default: 0.17.1\nMCP_SENTRY_ACCESS_TOKEN=your-sentry-token    # Required for Sentry functionality\nMCP_SENTRY_HOST=your-sentry-host             # Your Sentry instance host\n</code></pre> <p>See Environment Variables Reference for more details.</p>"},{"location":"ai-agents/mcp-tools/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"ai-agents/mcp-tools/#creating-custom-mcp-servers","title":"Creating Custom MCP Servers","text":"<p>Coming Soon</p> <p>The ability to create custom MCP servers is currently under development. This feature will allow you to define custom MCP servers.</p> <p>Stay tuned for updates as we work on bringing this functionality to DAIV.</p>"},{"location":"ai-agents/mcp-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-agents/mcp-tools/#common-issues","title":"Common Issues","text":"<p>MCP tools not available in agents:</p> <ul> <li>Verify that the MCP proxy is running and accessible</li> <li>Check that required environment variables are set</li> </ul> <p>Sentry tools not working:</p> <ul> <li>Verify <code>MCP_SENTRY_ACCESS_TOKEN</code> is set and valid</li> <li>Check that <code>MCP_SENTRY_HOST</code> points to your Sentry instance</li> <li>Ensure your Sentry token has the necessary permissions</li> </ul> <p>Fetch tools timing out:</p> <ul> <li>Check network connectivity from the MCP proxy</li> <li>Verify target URLs are accessible</li> </ul>"},{"location":"ai-agents/mcp-tools/#debugging","title":"Debugging","text":"<p>To debug MCP tool issues:</p> <ol> <li> <p>Check MCP proxy logs: Bash<pre><code>docker logs mcp-proxy\n</code></pre></p> </li> <li> <p>Verify configuration: Bash<pre><code>docker compose exec -it app django-admin mcp_proxy_config\n</code></pre></p> </li> </ol>"},{"location":"ai-agents/mcp-tools/#security-considerations","title":"Security Considerations","text":"<p>DAIV uses MCP Proxy to allow installing and running MCP servers on a containerized environment. This means that the MCP servers are not directly installed/running on your machine, but rather on the MCP Proxy docker container, improving security by isolating the MCP servers from your machine.</p> <p>This doesn't mean that you're safe from attacks. You still need to be careful about the MCP servers you use following the MCP protocol security best practices.</p> <p>Here are some best practices to follow when using MCP servers in DAIV:</p> <ul> <li>API Tokens: Store sensitive tokens like <code>MCP_SENTRY_ACCESS_TOKEN</code> securely using Docker secrets</li> <li>Network Access: MCP servers may require network access to external services (e.g. Sentry)</li> <li>Authentication: Configure <code>MCP_PROXY_AUTH_TOKEN</code> for additional security in production environments</li> </ul>"},{"location":"ai-agents/mcp-tools/#additional-resources","title":"Additional Resources","text":"<ul> <li>MCP Protocol Specification</li> <li>Fetch MCP Server Documentation</li> <li>Sentry MCP Server Documentation</li> <li>Environment Variables Reference</li> </ul>"},{"location":"ai-agents/overview/","title":"\ud83e\udd16 AI Agents Overview","text":"<p>DAIV uses specialized AI agents to automate various development workflows in your GitLab repositories. Each agent is designed for specific tasks and can work independently or collaborate with other agents to provide comprehensive development assistance.</p>"},{"location":"ai-agents/overview/#how-daiv-agents-work","title":"How DAIV Agents Work","text":""},{"location":"ai-agents/overview/#core-architecture","title":"Core Architecture","text":"<p>DAIV agents are built on a modular architecture that combines several key components:</p> <p>LangChain Framework: uses LangChain as a foundation for the agents.</p> <p>LangGraph Framework: uses LangGraph to create sophisticated workflows with state management, decision-making capabilities, and error handling.</p> <p>Language Models: Agents support multiple LLM providers including:</p> <ul> <li>Anthropic Claude (Sonnet, Opus variants with thinking capabilities)</li> <li>OpenAI GPT (including reasoning models like o1, o3, o4, etc.)</li> <li>Google Gemini (including Gemini 2.5 Pro, etc.)</li> <li>OpenRouter (access to various models from multiple providers)</li> </ul> <p>Repository Integration: Direct integration with GitLab through webhooks and APIs for real-time repository monitoring and interaction.</p> <p>Context-Aware Processing: Agents have access to the entire repository content, allowing them to understand your codebase structure, dependencies, and coding patterns.</p>"},{"location":"ai-agents/overview/#core-available-ai-agents","title":"Core Available AI Agents","text":""},{"location":"ai-agents/overview/#plan-and-execute-agent","title":"\ud83c\udfaf Plan and Execute Agent","text":"<p>Purpose: This is the core agent that is used by other agents. It is responsible for planning and executing the tasks.</p> <p>Key Capabilities:</p> <ul> <li>Breaks down complex tasks into self contained actionable steps</li> <li>Handles error recovery and replanning</li> <li>Coordinates between different tools and systems</li> <li>Analyzes attached images from issues and comments (Markdown and HTML formats, including GitHub attachments)</li> <li>Uses MCP tools to extend its capabilities (e.g. Fetch, Sentry, etc.)</li> <li>Uses repository tools to manipulate the repository (e.g. code search, file operations, snippet replacement, etc.)</li> <li>Uses sandbox environment to execute commands (e.g. code formatting, custom commands, etc.)</li> <li>Support to <code>AGENTS.md</code> file to understand the repository context</li> </ul>"},{"location":"ai-agents/overview/#pipeline-fixer-agent","title":"\ud83d\udd27 Pipeline Fixer Agent","text":"<p>Purpose: Automatically diagnoses and plan repairs for failed CI/CD pipelines.</p> <p>Key Capabilities:</p> <ul> <li>Analyzes pipeline failure logs and error messages</li> <li>Identifies root causes (syntax errors, test failures, dependency issues)</li> <li>Plans repairs for the failed pipeline using the Plan and Execute agent</li> </ul> <p>Workflow:</p> <ol> <li>User triggers the agent via a quick action on merge request notes</li> <li>The agent does a troubleshooting analysis to identify the root causes using failure logs and code diff</li> <li>The agent plans repairs using the Plan and Execute agent for human review</li> <li>User approves the plan and the agent executes the repairs</li> </ol>"},{"location":"ai-agents/overview/#code-review-addressor-agent","title":"\ud83d\udd0d Code Review Addressor Agent","text":"<p>Purpose: Responds to code review feedback by implementing requested changes or answering questions.</p> <p>Key Capabilities:</p> <ul> <li>Interprets reviewer comments and suggestions</li> <li>Implements code changes based on feedback</li> <li>Answers questions about the codebase</li> </ul> <p>Workflow:</p> <ol> <li>Triggered by review comments on merge requests that mention the bot</li> <li>Evaluates if comment requests code changes</li> <li>Plans and implements requested modifications using the Plan and Execute agent</li> <li>Updates the merge request with changes</li> <li>Responds to reviewer with explanation, if no changes requested</li> </ol>"},{"location":"ai-agents/overview/#pr-describer-agent","title":"\ud83d\udcdd PR Describer Agent","text":"<p>Purpose: Generates comprehensive pull request metadata (title, description, summary, commit message, etc.).</p> <p>Key Capabilities:</p> <ul> <li>Analyzes code changes and their impact</li> <li>Generates clear, detailed PR metadata</li> </ul>"},{"location":"ai-agents/overview/#agent-capabilities","title":"Agent Capabilities","text":""},{"location":"ai-agents/overview/#mcp-tools-integration","title":"\ud83d\udd27 MCP Tools Integration","text":"<p>Agents can use Model Context Protocol (MCP) tools to extend their capabilities:</p> <p>Fetch Tools: Web scraping and HTTP requests for researching solutions Sentry Integration: Access to error monitoring and debugging information Custom Tools: Extensible framework for adding specialized functionality</p>"},{"location":"ai-agents/overview/#repository-tools","title":"\ud83d\uddc2\ufe0f Repository Tools","text":"<p>All agents have access to powerful repository manipulation tools:</p> <ul> <li>File Navigation: List, grep (using <code>ripgrep</code>), glob and read files and directories.</li> <li>File Editing: Read, write, edit, rename and delete files.</li> </ul>"},{"location":"ai-agents/overview/#web-search-tools","title":"\ud83c\udf10 Web Search Tools","text":"<p>Agents can use web search tools to gather information from the web:</p> <ul> <li>Web Search: Search the web for information using DuckDuckGo or Tavily.</li> </ul>"},{"location":"ai-agents/overview/#sandbox-environment","title":"\ud83c\udfd7\ufe0f Sandbox Environment","text":"<p>Agents can execute commands in isolated sandbox environments using daiv-sandbox:</p> <ul> <li>Code Formatting: Apply repository-specific formatting rules (e.g. ruff, black, isort, etc.)</li> <li>Custom Commands: Execute repository-specific commands (e.g. install dependencies, etc.)</li> </ul>"},{"location":"ai-agents/overview/#configuration-and-customization","title":"Configuration and Customization","text":""},{"location":"ai-agents/overview/#repository-configuration","title":"Repository Configuration","text":"<p>Control agent behavior using a <code>.daiv.yml</code> file in your repository root.</p> <p>Learn more about configuration \u2192</p>"},{"location":"ai-agents/overview/#model-selection","title":"Model Selection","text":"<p>Configure which AI models agents use through environment variables:</p> Bash<pre><code># Use Claude Sonnet for most tasks\nPLAN_AND_EXECUTE_PLANNING_MODEL_NAME=openrouter:openai/gpt-4.1\n\n# Use reasoning models for complex planning\nPLAN_AND_EXECUTE_EXECUTION_MODEL_NAME=openrouter:openai/gpt-4.1\n</code></pre> <p>Learn more about model configuration \u2192</p>"},{"location":"ai-agents/overview/#agent-communication-and-collaboration","title":"Agent Communication and Collaboration","text":""},{"location":"ai-agents/overview/#workflow-orchestration","title":"Workflow Orchestration","text":"<p>Agents use LangGraph for sophisticated workflow management:</p> <ul> <li>State Management: Persistent state across workflow steps</li> <li>Error Handling: Automatic retry and fallback mechanisms</li> <li>Human-in-the-Loop: Approval gates for critical decisions</li> </ul>"},{"location":"ai-agents/overview/#best-practices","title":"Best Practices","text":""},{"location":"ai-agents/overview/#maximizing-agent-effectiveness","title":"Maximizing Agent Effectiveness","text":"<p>Write Clear Issues: Provide detailed descriptions with examples and acceptance criteria</p> <p>Use Labels: Apply the <code>daiv</code> label to issues you want automated</p> <p>Review Plans: Always review agent-generated plans before approval</p>"},{"location":"ai-agents/overview/#repository-setup","title":"Repository Setup","text":"<p>Comprehensive Documentation: Well-documented code helps agents understand context</p> <p>Clear Patterns: Consistent code patterns make agent-generated code more accurate</p> <p>Test Coverage: Good tests help agents validate their changes</p> <p>CI/CD Integration: Proper pipeline configuration enables automatic fixing</p>"},{"location":"ai-agents/overview/#security-considerations","title":"Security Considerations","text":"<p>Review Changes: Always review agent-generated code before merging</p> <p>Access Controls: Configure appropriate repository permissions</p> <p>Sensitive Data: Ensure no secrets are exposed in repository configurations</p> <p>Audit Trails: Monitor agent activities through LangSmith</p>"},{"location":"ai-agents/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-agents/overview/#common-issues","title":"Common Issues","text":"<p>Poor Quality Responses:</p> <ul> <li>Improve issue descriptions with more context</li> <li>Update repository description in <code>.daiv.yml</code></li> <li>Consider adjusting model selection</li> </ul>"},{"location":"ai-agents/overview/#getting-help","title":"Getting Help","text":"<p>Logs and Monitoring: Check application logs for detailed error information</p> <p>Configuration Validation: Use management commands to verify setup</p> <p>Community Support: Join discussions and share experiences with other users</p>"},{"location":"ai-agents/overview/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>Now that you understand how DAIV's agents work:</p> <ul> <li>Configure your first repository - Set up DAIV integration</li> <li>Explore MCP tools - Understand how MCP tools can be used to extend agent capabilities</li> <li>Customize behavior - Fine-tune agents for your workflow</li> <li>Monitor performance - Track agent effectiveness and usage</li> </ul>"},{"location":"ai-agents/quick-actions/","title":"\u26a1 Quick Actions","text":"<p>Quick Actions provide command-based interactions with DAIV directly from GitLab issues and merge requests. They are useful for common tasks and information requests.</p>"},{"location":"ai-agents/quick-actions/#overview","title":"Overview","text":"<p>Quick Actions are triggered by mentioning DAIV with specific commands in issue or merge request comments.</p>"},{"location":"ai-agents/quick-actions/#how-quick-actions-work","title":"How Quick Actions Work","text":"<p>Command Format: <code>@&lt;daiv-username&gt; &lt;action&gt; [arguments]</code></p> <p>Supported Scopes:</p> <ul> <li>Issues: Available in issue comments and discussions</li> <li>Merge Requests: Available in merge request comments and discussions</li> </ul>"},{"location":"ai-agents/quick-actions/#available-quick-actions","title":"Available Quick Actions","text":""},{"location":"ai-agents/quick-actions/#help-action","title":"\ud83c\udd98 Help Action","text":"<p>Command: <code>@daiv help</code></p> <p>Purpose: Displays all available Quick Actions for the current scope (issue or merge request).</p> <p>Scopes: Issues, Merge Requests</p> <p>Example: Text Only<pre><code>@daiv help\n</code></pre></p> <p>Response: DAIV replies with a formatted list of all available Quick Actions and their descriptions.</p>"},{"location":"ai-agents/quick-actions/#plan-action","title":"\ud83d\udccb Plan Action","text":"<p>Command: <code>@daiv plan &lt;sub-action&gt;</code></p> <p>Purpose: Manage issue resolution plans with execute and revise operations.</p> <p>Scopes: Issues only</p> <p>Sub-actions:</p>"},{"location":"ai-agents/quick-actions/#execute-plan","title":"Execute Plan","text":"<ul> <li>Command: <code>@daiv plan execute</code></li> <li>Purpose: Run or launch the current plan for the issue</li> <li>Usage: Comment in discussion to approve and execute the current plan</li> </ul>"},{"location":"ai-agents/quick-actions/#revise-plan","title":"Revise Plan","text":"<ul> <li>Command: <code>@daiv plan revise</code></li> <li>Purpose: Discard current plan and create a new one from scratch</li> <li>Usage: Comment in discussion to reset and regenerate the plan</li> </ul> <p>Examples: Text Only<pre><code>@daiv plan execute\n</code></pre> Text Only<pre><code>@daiv plan revise\n</code></pre></p>"},{"location":"ai-agents/quick-actions/#pipeline-action","title":"\ud83d\udd27 Pipeline Action","text":"<p>Command: <code>@daiv pipeline &lt;sub-action&gt;</code></p> <p>Purpose: Manage merge request pipeline failures with automated repair suggestions and execution.</p> <p>Scopes: Merge Requests only</p> <p>Sub-actions:</p>"},{"location":"ai-agents/quick-actions/#repair-plan","title":"Repair Plan","text":"<ul> <li>Command: <code>@daiv pipeline repair</code></li> <li>Purpose: Suggest a repair plan to fix the failed pipeline</li> <li>Usage: Comment in discussion when pipeline has failed jobs</li> <li>Trigger Location: Discussion (initial comment)</li> </ul>"},{"location":"ai-agents/quick-actions/#apply-repair","title":"Apply Repair","text":"<ul> <li>Command: <code>@daiv pipeline repair apply</code></li> <li>Purpose: Apply the repair plan to fix the pipeline</li> <li>Usage: Reply to repair plan discussion to execute the suggested fix</li> <li>Trigger Location: Reply (to existing repair discussion)</li> </ul> <p>Examples: Text Only<pre><code>@daiv pipeline repair\n</code></pre> Text Only<pre><code>@daiv pipeline repair apply\n</code></pre></p> <p>Requirements: - Pipeline must be in \"failed\" status - Must have at least one failed job with script failure - Job must not be marked as allowed to fail</p>"},{"location":"ai-agents/quick-actions/#using-quick-actions","title":"Using Quick Actions","text":""},{"location":"ai-agents/quick-actions/#basic-usage","title":"Basic Usage","text":"<ol> <li>Navigate to any GitLab issue or merge request</li> <li>Add a comment mentioning DAIV with the desired action</li> <li>Submit the comment</li> <li>DAIV responds with the action result</li> </ol>"},{"location":"ai-agents/quick-actions/#example-workflow","title":"Example Workflow","text":"<pre><code>graph TD\n    A[\"\ud83d\udc64 User comments&lt;br/&gt;@daiv help\"] --&gt; B[\"\ud83d\udd0d DAIV parses command\"]\n    B --&gt; C[\"\ud83d\udccb Registry lookup\"]\n    C --&gt; D[\"\u26a1 Execute action\"]\n    D --&gt; E[\"\ud83d\udcac Post response\"]</code></pre>"},{"location":"ai-agents/quick-actions/#command-parsing","title":"Command Parsing","text":"<p>Quick Actions use shell-like parsing with support for:</p> <ul> <li>Simple commands: <code>@daiv help</code></li> <li>Commands with sub-actions: <code>@daiv plan execute</code>, <code>@daiv pipeline repair</code></li> <li>Multi-word sub-actions: <code>@daiv pipeline repair apply</code></li> <li>Case-insensitive: <code>@DAIV HELP</code> works the same as <code>@daiv help</code></li> </ul>"},{"location":"ai-agents/quick-actions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-agents/quick-actions/#common-issues","title":"Common Issues","text":"<p>Action not recognized:</p> <ul> <li>Check that the action supports the current scope (issue vs merge request)</li> <li>Ensure proper spelling and case (actions are case-insensitive)</li> <li>Verify sub-action syntax (e.g., <code>plan execute</code> not <code>plan-execute</code>)</li> </ul> <p>No response from DAIV:</p> <ul> <li>Confirm DAIV has access to the repository</li> <li>Check that webhooks are properly configured</li> <li>Verify the bot username is correct in the mention</li> </ul> <p>Permission errors:</p> <ul> <li>Ensure DAIV has sufficient GitLab permissions</li> <li>Confirm the user triggering the action has appropriate access levels</li> </ul> <p>Pipeline action issues:</p> <ul> <li>Ensure the pipeline is in \"failed\" status</li> <li>Check that failed jobs have <code>script_failure</code> as the failure reason</li> <li>Verify jobs are not marked as <code>allow_failure</code></li> </ul> <p>Plan action issues:</p> <ul> <li>Ensure you're commenting on an issue (not merge request)</li> <li>Check if there's an existing plan to execute or revise</li> </ul>"},{"location":"ai-agents/quick-actions/#debug-information","title":"Debug Information","text":"<p>Quick Actions log detailed information for troubleshooting:</p> <ul> <li>Command parsing results</li> <li>Registry lookup attempts</li> <li>Execution success/failure</li> <li>Error details and stack traces</li> </ul>"},{"location":"ai-agents/quick-actions/#examples","title":"Examples","text":""},{"location":"ai-agents/quick-actions/#getting-help","title":"Getting Help","text":"Text Only<pre><code>@daiv help\n</code></pre> <p>Response: Text Only<pre><code>### \ud83e\udd16 DAIV Quick-Actions\nComment one of the commands below on this issue to trigger the bot:\n\n- `@daiv help` - Shows the help message with the available quick actions.\n- `@daiv plan execute` - Run or launch the current plan.\n- `@daiv plan revise` - Discard current plan and create a new one from scratch.\n</code></pre></p>"},{"location":"ai-agents/quick-actions/#issue-management","title":"Issue Management","text":"<p>Planning and Execution: Text Only<pre><code>@daiv plan execute\n</code></pre></p> <p>Response: DAIV executes the plan and posts the resulting merge request URL.</p> Text Only<pre><code>@daiv plan revise\n</code></pre> <p>Response: DAIV revises the plan and posts the revised plan.</p>"},{"location":"ai-agents/quick-actions/#pipeline-management","title":"Pipeline Management","text":"<p>In a merge request with failed pipeline: Text Only<pre><code>@daiv pipeline repair\n</code></pre></p> <p>Response: DAIV analyzes the failed jobs and posts a repair plan.</p> <p>To apply the suggested repair: Text Only<pre><code>@daiv pipeline repair apply\n</code></pre></p> <p>Response: DAIV executes the repair plan to fix the pipeline.</p>"},{"location":"ai-agents/quick-actions/#extension-and-development","title":"Extension and Development","text":""},{"location":"ai-agents/quick-actions/#adding-new-actions","title":"Adding New Actions","text":"<ol> <li>Create new action class in <code>automation/quick_actions/actions/</code></li> <li>Implement required methods <code>execute_action</code> and <code>actions</code></li> <li>Decorate with <code>@quick_action</code> specifying verb and scopes</li> <li>Import in the actions module</li> <li>Test the action in development environment</li> </ol>"},{"location":"ai-agents/quick-actions/#best-practices","title":"Best Practices","text":"<ul> <li>Keep actions simple: Quick Actions should execute immediately</li> <li>Provide clear descriptions: Help users understand what each action does</li> <li>Handle errors gracefully: Post user-friendly error messages</li> <li>Use appropriate scopes: Only enable actions where they make sense</li> <li>Follow naming conventions: Use clear, descriptive verb names</li> </ul>"},{"location":"configuration/env-config/","title":"Environment Configuration","text":"<p>DAIV provides a large number of environment variables that can be used to configure DAIV behavior. This page lists all supported environment variables.</p> <p>Variables marked with:</p> <ul> <li> are sensitive (such as API keys, passwords, and tokens) and should be declared using Docker secrets or a secure credential manager.</li> <li> are required and should be declared.</li> </ul>"},{"location":"configuration/env-config/#core","title":"Core","text":""},{"location":"configuration/env-config/#general","title":"General","text":"Variable Description Default Example <code>DJANGO_DEBUG</code> Toggle Django debug mode <code>False</code> <code>True</code> <code>DJANGO_SECRET_KEY</code> Secret key for Django (none) <code>super-secret-key</code> <code>DJANGO_ALLOWED_HOSTS</code> Comma-separated list of allowed hosts <code>*</code> <code>example.com,localhost</code> <p>Danger</p> <p>Do not turn on <code>DJANGO_DEBUG</code> in production. It will expose sensitive information and break the security of the application.</p> <p>Info</p> <p>The <code>DJANGO_ALLOWED_HOSTS</code> variable is used to specify the hosts that are allowed to access the application. Make sure to include the host where the application is running to increase security.</p>"},{"location":"configuration/env-config/#uvicorn","title":"Uvicorn","text":"Variable Description Default Example <code>UVICORN_HOST</code> Host to bind the Uvicorn server <code>0.0.0.0</code> <code>0.0.0.0</code> <code>UVICORN_PORT</code> Port to bind the Uvicorn server <code>8000</code> <code>8000</code>"},{"location":"configuration/env-config/#database","title":"Database","text":"Variable Description Default Example <code>DB_NAME</code> Database name (none) <code>daiv</code> <code>DB_USER</code> Database user (none) <code>daiv_admin</code> <code>DB_PASSWORD</code> Database password (none) <code>DB_HOST</code> Database host <code>localhost</code> <code>db</code> <code>DB_PORT</code> Database port <code>5432</code> <code>5432</code> <code>DB_SSLMODE</code> PostgreSQL SSL mode <code>require</code> <code>prefer</code> <code>DB_POOL_MAX_SIZE</code> Maximum size of a connection pool <code>15</code> <code>30</code>"},{"location":"configuration/env-config/#redis","title":"Redis","text":"Variable Description Default Example <code>DJANGO_REDIS_URL</code> Redis connection URL (none) <code>redis://redis:6379/0</code>"},{"location":"configuration/env-config/#celery-broker","title":"Celery / Broker","text":"Variable Description Default Example <code>DJANGO_BROKER_URL</code> Celery broker URL <code>memory:///</code> <code>redis://redis:6379/0</code> <code>DJANGO_BROKER_USE_SSL</code> Use SSL for broker connection <code>False</code> <code>True</code> <code>CELERY_LOGLEVEL</code> Celery log level <code>INFO</code> <code>DEBUG</code> <code>CELERY_CONCURRENCY</code> Number of Celery workers <code>2</code> <code>4</code> <p>Note</p> <p>The <code>CELERY_CONCURRENCY</code> variable is used to specify the number of Celery workers to use. This is useful for scaling the application. The default value is <code>2</code> which is suitable for most use cases.</p>"},{"location":"configuration/env-config/#sentry","title":"Sentry","text":"Variable Description Default Example <code>SENTRY_DSN</code> Sentry DSN (none) <code>SENTRY_DEBUG</code> Enable Sentry debug mode <code>False</code> <code>True</code> <code>SENTRY_ENABLE_TRACING</code> Enable Sentry tracing <code>False</code> <code>True</code> <code>NODE_HOSTNAME</code> Node hostname for Sentry (none) <code>SERVICE_NAME</code> Service name for Sentry (none) <p>Note</p> <p><code>NODE_HOSTNAME</code> and <code>SERVICE_NAME</code> are used to identify the node and service that is reporting the error.</p>"},{"location":"configuration/env-config/#logging","title":"Logging","text":"Variable Description Default Example <code>DJANGO_LOGGING_LEVEL</code> Django logging level <code>INFO</code> <code>DEBUG</code>"},{"location":"configuration/env-config/#monitoring-langsmith","title":"Monitoring (LangSmith)","text":"Variable Description Default Example <code>LANGSMITH_TRACING</code> Enable LangSmith tracing (alternative) <code>False</code> <code>true</code> <code>LANGSMITH_PROJECT</code> LangSmith project name (alternative) <code>default</code> <code>daiv-production</code> <code>LANGSMITH_API_KEY</code> LangSmith API key (alternative) (none) <code>lsv2_pt_...</code> <code>LANGSMITH_API_KEY_FILE</code> Path to LangSmith API key file (none) <code>/run/secrets/langsmith_api_key</code> <code>LANGSMITH_ENDPOINT</code> LangSmith API endpoint <code>https://api.smith.langchain.com</code> <code>https://eu.api.smith.langchain.com</code> <p>Note</p> <p>LangSmith provides comprehensive monitoring and observability for AI agents. For detailed setup instructions, see Monitoring Configuration.</p>"},{"location":"configuration/env-config/#sandbox-client-side","title":"Sandbox (client-side)","text":"Variable Description Default Example <code>DAIV_SANDBOX_URL</code> URL of the sandbox service <code>http://sandbox:8000</code> <code>http://sandbox:8000</code> <code>DAIV_SANDBOX_TIMEOUT</code> Timeout for sandbox requests in seconds <code>600</code> <code>600</code> <code>DAIV_SANDBOX_API_KEY</code> API key for sandbox requests (none) <code>random-api-key</code> <p>Info</p> <p>Check the daiv-sandbox repository for server-side configuration of the sandbox service.</p>"},{"location":"configuration/env-config/#other","title":"Other","text":"Variable Description Default Example <code>DAIV_EXTERNAL_URL</code> External URL of the application. <code>https://app:8000</code> <code>https://daiv.example.com</code> <p>Note</p> <p>The <code>DAIV_EXTERNAL_URL</code> variable is used to define webhooks on Git platform. Make sure that the URL is accessible from the Git platform.</p>"},{"location":"configuration/env-config/#codebase","title":"Codebase","text":""},{"location":"configuration/env-config/#general_1","title":"General","text":"Variable Description Default Example <code>CODEBASE_CLIENT</code> Client to use for codebase operations <code>gitlab</code> <code>gitlab</code>"},{"location":"configuration/env-config/#gitlab-integration","title":"GitLab Integration","text":"Variable Description Default Example <code>CODEBASE_GITLAB_URL</code> URL of the GitLab instance (none) <code>https://gitlab.com</code> <code>CODEBASE_GITLAB_AUTH_TOKEN</code> Authentication token for GitLab (none) <code>glpat-xyz</code> <code>CODEBASE_GITLAB_WEBHOOK_SECRET</code> Secret token for GitLab webhook validation (none) <code>random-webhook-secret</code> <p>Note</p> <p>The <code>CODEBASE_GITLAB_AUTH_TOKEN</code> is used to authenticate with the GitLab instance using a personal access token with the <code>api</code> scope.</p>"},{"location":"configuration/env-config/#automation-llm-providers","title":"Automation: LLM Providers","text":"<p>This section documents the environment variables for each LLM provider.</p> <p>Note</p> <p>At least one of the supported providers should be configured to use the automation features.</p>"},{"location":"configuration/env-config/#openrouter-default","title":"OpenRouter (default)","text":"Variable Description Default Example <code>OPENROUTER_API_KEY</code> OpenRouter API key (none) <code>OPENROUTER_API_BASE</code> OpenRouter API base URL <code>https://openrouter.ai/api/v1</code>"},{"location":"configuration/env-config/#anthropic","title":"Anthropic","text":"Variable Description Default Example <code>ANTHROPIC_API_KEY</code> Anthropic API key (none)"},{"location":"configuration/env-config/#openai","title":"OpenAI","text":"Variable Description Default Example <code>OPENAI_API_KEY</code> OpenAI API key (none)"},{"location":"configuration/env-config/#google","title":"Google","text":"Variable Description Default Example <code>GOOGLE_API_KEY</code> Google API key (none)"},{"location":"configuration/env-config/#automation-tools","title":"Automation: Tools","text":"<p>This section documents the environment variables for each tool configuration used by AI agents.</p>"},{"location":"configuration/env-config/#web-search","title":"Web Search","text":"Variable Description Default Example <code>AUTOMATION_WEB_SEARCH_MAX_RESULTS</code> Maximum number of results to return from web search <code>5</code> <code>AUTOMATION_WEB_SEARCH_ENGINE</code> Web search engine to use (<code>duckduckgo</code>, <code>tavily</code>) <code>duckduckgo</code> <code>tavily</code> <code>AUTOMATION_WEB_SEARCH_API_KEY</code> Web search API key (required if engine is <code>tavily</code>) (none)"},{"location":"configuration/env-config/#mcp-tools","title":"MCP Tools","text":"<p>MCP (Model Context Protocol) tools extend agent capabilities by providing access to external services and specialized functionality.</p> Variable Description Default Example <code>MCP_PROXY_HOST</code> Host URL for the MCP proxy server <code>http://mcp-proxy:9090</code> <code>http://localhost:9090</code> <code>MCP_PROXY_ADDR</code> Address for the MCP proxy to listen on <code>:9090</code> <code>:9090</code> <code>MCP_PROXY_AUTH_TOKEN</code> Authentication token for MCP proxy (none) <code>secure-auth-token</code> <code>MCP_FETCH_ENABLED</code> Enable/disable Fetch MCP server for web scraping <code>true</code> <code>false</code> <code>MCP_FETCH_VERSION</code> Version of the Fetch MCP server <code>2025.4.7</code> <code>2025.4.7</code> <code>MCP_SENTRY_ENABLED</code> Enable/disable Sentry MCP server for error monitoring <code>true</code> <code>false</code> <code>MCP_SENTRY_VERSION</code> Version of the Sentry MCP server <code>0.17.1</code> <code>0.17.1</code> <code>MCP_SENTRY_ACCESS_TOKEN</code> Sentry API access token (none) <code>sntryu_abc123...</code> <code>MCP_SENTRY_HOST</code> Sentry instance hostname (none) <code>your-org.sentry.io</code> <p>Info</p> <p>MCP tools are currently available in the Plan and Execute agent. The Fetch server provides web scraping capabilities, while the Sentry server enables error monitoring integration. For detailed configuration, see MCP Tools.</p> <p>Note</p> <p>Sentry MCP server requires both <code>MCP_SENTRY_ACCESS_TOKEN</code> and <code>MCP_SENTRY_HOST</code> to be configured for functionality.</p>"},{"location":"configuration/env-config/#automation-ai-agents","title":"Automation: AI Agents","text":"<p>This section documents the environment variables for each automation agent. Each agent uses a unique prefix for its variables.</p> <p>All the default models where chosen to be the most effective models. You can change the models to use other models by setting the corresponding environment variables.</p>"},{"location":"configuration/env-config/#plan-and-execute","title":"Plan and Execute","text":"Variable Description Default <code>PLAN_AND_EXECUTE_PLANNING_RECURSION_LIMIT</code> Recursion limit for planning steps each. <code>100</code> <code>PLAN_AND_EXECUTE_PLANNING_MODEL_NAME</code> Model for planning tasks. <code>openrouter:anthropic/claude-sonnet-4</code> <code>PLAN_AND_EXECUTE_PLANNING_THINKING_LEVEL</code> Thinking level for planning tasks. <code>medium</code> <code>PLAN_AND_EXECUTE_EXECUTION_MODEL_NAME</code> Model for executing tasks. <code>openrouter:anthropic/claude-sonnet-4</code> <code>PLAN_AND_EXECUTE_EXECUTION_RECURSION_LIMIT</code> Recursion limit for execution steps each. <code>50</code>"},{"location":"configuration/env-config/#review-addressor","title":"Review Addressor","text":"Variable Description Default <code>REVIEW_ADDRESSOR_REVIEW_COMMENT_MODEL_NAME</code> Model for review assessment. <code>openrouter:openai/gpt-4-1-mini</code> <code>REVIEW_ADDRESSOR_REPLY_MODEL_NAME</code> Model for reply to comments/questions. <code>openrouter:openai/gpt-4-1</code> <code>REVIEW_ADDRESSOR_REPLY_TEMPERATURE</code> Temperature for the reply model. <code>0.2</code>"},{"location":"configuration/env-config/#pipeline-fixer-as-quick-action","title":"Pipeline Fixer (as quick action)","text":"Variable Description Default <code>PIPELINE_FIXER_TROUBLESHOOTING_MODEL_NAME</code> Model for troubleshooting. <code>openrouter:anthropic/claude-sonnet-4</code> <code>PIPELINE_FIXER_TROUBLESHOOTING_THINKING_LEVEL</code> Thinking level for troubleshooting. <code>high</code> <code>PIPELINE_FIXER_COMMAND_OUTPUT_MODEL_NAME</code> Model for command output evaluator. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"configuration/env-config/#pull-request-describer","title":"Pull Request Describer","text":"Variable Description Default <code>PR_DESCRIBER_MODEL_NAME</code> Model for PR describer. <code>openrouter:openai/gpt-4-1-mini</code>"},{"location":"configuration/env-config/#codebase-chat","title":"Codebase Chat","text":"Variable Description Default <code>CODEBASE_CHAT_MODEL_NAME</code> Model for codebase chat. <code>openrouter:openai/gpt-5-mini</code> <code>CODEBASE_CHAT_TEMPERATURE</code> Temperature for codebase chat. <code>0.2</code>"},{"location":"configuration/monitoring/","title":"Monitoring Configuration","text":"<p>This guide walks you through configuring LangSmith monitoring for DAIV. LangSmith provides comprehensive observability for your AI agents, including tracing, logging, and performance monitoring.</p>"},{"location":"configuration/monitoring/#prerequisites","title":"Prerequisites","text":"<p>Before configuring monitoring, ensure you have:</p> <ul> <li>DAIV installed and running - Follow the installation guide first</li> <li>LangSmith account - Create a free account at smith.langchain.com</li> <li>LangSmith API key - Generated from your LangSmith dashboard</li> </ul>"},{"location":"configuration/monitoring/#step-1-create-langsmith-api-key","title":"Step 1: Create LangSmith API Key","text":"<ol> <li> <p>Sign in to LangSmith:</p> </li> <li> <p>Go to smith.langchain.com</p> </li> <li> <p>Sign in with your account or create a new one</p> </li> <li> <p>Generate API Key:</p> </li> <li> <p>Navigate to Settings \u2192 API Keys</p> </li> <li>Click Create API Key</li> <li>Name: <code>DAIV Integration</code></li> <li>Description: <code>API key for DAIV monitoring</code></li> <li> <p>Click Create</p> </li> <li> <p>Copy the API Key:</p> </li> <li>Important: Copy and save the API key immediately - you won't see it again</li> <li>The key format looks like: <code>lsv2_pt_xxxxxxxxxxxxxxxxxxxxxxxx_yyyyyyyyyyyy</code></li> </ol> <p>API Key Security</p> <p>Store your API key securely. Never commit it to version control or share it publicly.</p>"},{"location":"configuration/monitoring/#step-2-configure-environment-variables","title":"Step 2: Configure Environment Variables","text":"<p>Add your LangSmith configuration to DAIV's environment settings.</p>"},{"location":"configuration/monitoring/#for-docker-compose-setup","title":"For Docker Compose Setup","text":"<p>Edit your <code>docker-compose.yml</code> file:</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  # ...\n  environment:\n    LANGSMITH_TRACING: true\n    LANGSMITH_PROJECT: daiv-default\n    LANGSMITH_API_KEY: lsv2_pt_xxxxxxxxxxxxxxxxxxxxxxxx_yyyyyyyyyyyy\n  # ...\n</code></pre>"},{"location":"configuration/monitoring/#for-docker-swarm-setup","title":"For Docker Swarm Setup","text":"<p>Environment configuration: Bash<pre><code># LangSmith Monitoring\nLANGSMITH_TRACING=true\nLANGSMITH_PROJECT=daiv-production\nLANGSMITH_API_KEY_FILE=/run/secrets/langsmith_api_key\n</code></pre></p> <p>Create Docker secret: Bash<pre><code># Create secret for LangSmith API key\necho \"lsv2_pt_xxxxxxxxxxxxxxxxxxxxxxxx_yyyyyyyyyyyy\" | docker secret create langsmith_api_key -\n</code></pre></p> <p>Using EU Endpoint</p> <p>If you're in Europe, you may want to use the EU endpoint (default is US): Bash<pre><code>LANGSMITH_ENDPOINT=https://eu.api.smith.langchain.com\n</code></pre></p>"},{"location":"configuration/monitoring/#step-3-configure-project-settings","title":"Step 3: Configure Project Settings","text":"<p>Customize your LangSmith project settings for better organization.</p>"},{"location":"configuration/monitoring/#project-names","title":"Project Names","text":"<p>Use descriptive project names to organize your traces:</p> Bash<pre><code># For different environments\nLANGSMITH_PROJECT=daiv-production    # Production environment\nLANGSMITH_PROJECT=daiv-staging       # Staging environment\nLANGSMITH_PROJECT=daiv-development   # Development environment\n</code></pre>"},{"location":"configuration/monitoring/#step-4-restart-daiv-services","title":"Step 4: Restart DAIV Services","text":"<p>Apply the new monitoring configuration by restarting DAIV.</p>"},{"location":"configuration/monitoring/#for-docker-compose","title":"For Docker Compose","text":"Bash<pre><code># Restart all services\ndocker compose restart\n\n# Or restart specific services\ndocker compose restart app worker\n</code></pre>"},{"location":"configuration/monitoring/#for-docker-swarm","title":"For Docker Swarm","text":"Bash<pre><code># Update the stack with new configuration\ndocker stack deploy -c stack.yml daiv\n</code></pre>"},{"location":"configuration/monitoring/#step-5-verify-monitoring-setup","title":"Step 5: Verify Monitoring Setup","text":"<p>Test that LangSmith monitoring is working correctly.</p> <ol> <li> <p>Generate Some Activity:</p> </li> <li> <p>Create a test issue in your repository with the <code>daiv</code> label</p> </li> <li>Wait for DAIV to process the issue</li> <li> <p>Or trigger any AI agent activity</p> </li> <li> <p>Check LangSmith Dashboard:</p> </li> <li> <p>Go to smith.langchain.com</p> </li> <li>Navigate to your project (e.g., <code>daiv-default</code>)</li> <li> <p>You should see traces appearing for agent executions</p> </li> <li> <p>Verify Trace Details:</p> </li> <li> <p>Click on any trace to see detailed execution steps</p> </li> <li>Check for proper agent names, model calls, and timing information</li> </ol>"},{"location":"configuration/monitoring/#step-6-dashboard-and-analytics","title":"Step 6: Dashboard and Analytics","text":"<p>Set up monitoring dashboards and alerts for your DAIV deployment.</p>"},{"location":"configuration/monitoring/#agent-metadata-and-tags","title":"Agent Metadata and Tags","text":"<p>Each DAIV agent automatically includes standardized metadata and tags for LangSmith tracing, making it easy to create dashboards and analyze performance:</p>"},{"location":"configuration/monitoring/#standard-tags","title":"Standard Tags","text":"<p>All agents include these tags in their traces:</p> Tag Description Example Values Agent Name The specific agent type <code>IssueAddressor</code>, <code>PipelineFixer</code>, <code>ReviewAddressor</code>, <code>CodebaseChat</code>, <code>PullRequestDescriber</code>, <code>PlanAndExecute</code> Client Slug The repository client identifier <code>gitlab</code>, <code>github</code>"},{"location":"configuration/monitoring/#agent-specific-metadata","title":"Agent-Specific Metadata","text":"<p>Different agents include additional context-specific metadata:</p> <p>Issue Addressor (<code>IssueAddressor</code>): JSON<pre><code>{\n  \"author\": \"username\",\n  \"thread_id\": \"unique-thread-id\",\n  \"project_id\": 123,\n  \"source_repo_id\": \"group/repo\",\n  \"source_ref\": \"main\",\n  \"issue_id\": 456,\n  \"repo_client\": \"gitlab\"\n}\n</code></pre></p> <p>Pipeline Fixer (<code>PipelineFixer</code>): JSON<pre><code>{\n  \"merge_request_id\": 789,\n  \"job_id\": 101112,\n  \"thread_id\": \"unique-thread-id\",\n  \"source_repo_id\": \"group/repo\",\n  \"source_ref\": \"feature-branch\",\n  \"job_name\": \"build_and_test\"\n}\n</code></pre></p> <p>Review Addressor (<code>ReviewAddressor</code>): JSON<pre><code>{\n  \"merge_request_id\": 789,\n  \"discussion_id\": \"abc123\",\n  \"author\": \"reviewer-username\",\n  \"thread_id\": \"unique-thread-id\",\n  \"source_repo_id\": \"group/repo\",\n  \"source_ref\": \"feature-branch\"\n}\n</code></pre></p> <p>Codebase Chat (<code>CodebaseChat</code>): JSON<pre><code>{\n  \"model_id\": \"DAIV\",\n  \"chat_stream\": true\n}\n</code></pre></p> <p>Pull Request Describer (<code>PullRequestDescriber</code>): JSON<pre><code>{\n  \"thread_id\": \"unique-thread-id\"\n}\n</code></pre></p>"},{"location":"configuration/monitoring/#creating-custom-dashboards","title":"Creating Custom Dashboards","text":"<p>Use these tags and metadata to create focused dashboards:</p> <p>By Agent Type: - Filter by tag: <code>IssueAddressor</code> to see all issue processing activity - Filter by tag: <code>PipelineFixer</code> to monitor CI/CD troubleshooting - Filter by tag: <code>ReviewAddressor</code> to track code review interactions</p> <p>By Repository: - Filter by metadata: <code>source_repo_id</code> = <code>\"your-org/your-repo\"</code> - Group by <code>repo_client</code> to compare GitLab vs GitHub activity</p> <p>By User Activity: - Filter by metadata: <code>author</code> = <code>\"username\"</code> to see user-specific interactions - Group by <code>author</code> to identify most active users</p> <p>By Performance: - Monitor execution time by agent type - Track token usage patterns across different agents - Analyze success/failure rates by agent and repository</p>"},{"location":"configuration/monitoring/#setting-up-alerts","title":"Setting Up Alerts","text":"<p>Configure alerts in LangSmith for: - High error rates (&gt; 5%) - Slow response times (&gt; 30 seconds) - Excessive token usage - Failed agent executions</p>"},{"location":"configuration/monitoring/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/monitoring/#common-issues","title":"Common Issues","text":"<p>No traces appearing in LangSmith: - Verify API key is correct and has proper permissions - Check that <code>LANGSMITH_TRACING=true</code> is set - Ensure network connectivity to LangSmith endpoints - Review application logs for authentication errors</p> <p>Incomplete or missing trace data: - Verify project name matches in all configurations - Check that all required environment variables are set - Ensure Docker secrets are properly mounted (for Swarm deployments)</p> <p>High costs or token usage: - Review trace filtering settings - Consider disabling tracing for development environments - Monitor token consumption patterns in LangSmith dashboard</p>"},{"location":"configuration/monitoring/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/monitoring/#sampling-configuration","title":"Sampling Configuration","text":"<p>Configure trace sampling to reduce costs while maintaining visibility:</p> Bash<pre><code># Sample 50% of traces (default: 100%)\nLANGCHAIN_TRACING_SAMPLE_RATE=0.5\n</code></pre>"},{"location":"configuration/monitoring/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>For more detailed information about LangSmith features, visit the LangSmith documentation.</p>"},{"location":"configuration/yaml-config/","title":"YAML Configuration File","text":"<p>Customize DAIV for your repository using a <code>.daiv.yml</code> YAML configuration file in the default branch and repository root directory.</p> <p>This file lets you control features, code formatting, and more.</p>"},{"location":"configuration/yaml-config/#example-configuration","title":"Example Configuration","text":"<p>Below is a complete example of a <code>.daiv.yml</code> YAML configuration file.</p> <p>You can copy and modify this template for your repository.</p> YAML<pre><code># Repository settings\ndefault_branch: main\ncontext_file_name: \"AGENTS.md\"\n\n# File access\nextend_exclude_patterns:\n  - \"**/tests/**\"\n  - \"**/*.test.ts\"\n  - \"coverage/**\"\n\nomit_content_patterns:\n  - \"*.min.js\"\n  - \"*.svg\"\n  - \"*.sql\"\n  - \"*.lock\"\n\n# Features\nissue_addressing:\n  enabled: true\n\ncode_review:\n  enabled: true\n\nquick_actions:\n  enabled: true\n\n# Pull request\npull_request:\n  branch_name_convention: \"always start with 'daiv/' followed by a short description.\"\n\n# Sandbox\nsandbox:\n  base_image: \"python:3.12-alpine\"\n  format_code:\n    - \"ruff check --fix\"\n    - \"ruff format\"\n</code></pre>"},{"location":"configuration/yaml-config/#configure-repository-settings","title":"Configure Repository Settings","text":"<p>Repository settings control the default branch and context file configuration.</p> Option Type Default Description <code>default_branch</code> <code>str \\| null</code> Repository default branch The branch DAIV uses by default to load the <code>.daiv.yml</code> YAML configuration file. <code>context_file_name</code> <code>str \\| null</code> <code>\"AGENTS.md\"</code> File name to load the repository context in the format of https://agents.md/. <p>Tip</p> <ul> <li>The context file helps agents understand your repository structure and conventions. You can use the AGENTS.md format to define your repository context.</li> <li>If not specified, DAIV will look for an \"AGENTS.md\" file by default.</li> </ul>"},{"location":"configuration/yaml-config/#enable-or-disable-features","title":"Enable or Disable Features","text":"<p>Control which DAIV features are active in your repository.</p> <p>Configure the following feature sections in your <code>.daiv.yml</code> YAML configuration file:</p>"},{"location":"configuration/yaml-config/#issue-addressing","title":"Issue Addressing","text":"Option Type Default Description <code>enabled</code> <code>bool</code> <code>true</code> Enable the issue addressor feature."},{"location":"configuration/yaml-config/#code-review","title":"Code Review","text":"Option Type Default Description <code>enabled</code> <code>bool</code> <code>true</code> Enable the code review addressor feature."},{"location":"configuration/yaml-config/#quick-actions","title":"Quick Actions","text":"Option Type Default Description <code>enabled</code> <code>bool</code> <code>true</code> Enable quick actions feature. <p>Tip</p> <p>Disable features you do not need to reduce noise and speed up processing.</p>"},{"location":"configuration/yaml-config/#control-file-access","title":"Control File Access","text":"<p>Control which files DAIV can see and read.</p> <p>Warning</p> <p>Files excluded from being seen and/or read will not be available to DAIV's AI agents.</p> Option Type Default Description <code>extend_exclude_patterns</code> <code>list[str]</code> <code>[]</code> Add patterns to exclude more files from being seen. <code>exclude_patterns</code> <code>tuple[str]</code> <code>[\"*.pyc\", \"*.log\", \"*.zip\", \"*.coverage\", \"**/.git/**\", \"**/.mypy_cache/**\", \"**/.tox/**\", \"**/vendor/**\", \"**/venv/**\", \"**/.venv/**\", \"**/.env/**\", \"**/node_modules/**\", \"**/dist/**\", \"**/__pycache__/**\", \"**/data/**\", \"**/.idea/**\", \"**/.pytest_cache/**\", \"**/.ruff_cache/**\"]</code> Override the default exclude patterns. <code>omit_content_patterns</code> <code>tuple[str]</code> <code>[\"*package-lock.json\", \"*pnpm-lock.yaml\", \"*.lock\", \"*.svg\", \"*.sql\"]</code> Files that DAIV can see exist but won't read their content. <p>Tip</p> <ul> <li>Exclude sensitive files and build artifacts.</li> <li>Prefer using <code>extend_exclude_patterns</code> to add more patterns.</li> <li>Use <code>omit_content_patterns</code> for large files that shouldn't be read but need to be seen.</li> </ul>"},{"location":"configuration/yaml-config/#configure-pull-request-settings","title":"Configure Pull Request Settings","text":"<p>Control how DAIV creates pull requests and branches.</p> Option Type Default Description <code>branch_name_convention</code> <code>str</code> <code>\"always start with 'daiv/' followed by a short description.\"</code> Naming convention for generating pull request branches. Max 100 chars. <p>Tip</p> <p>Use clear and simple branch-naming conventions to maintain consistency across your repository.</p>"},{"location":"configuration/yaml-config/#set-up-sandbox","title":"Set Up Sandbox","text":"<p>To take advantage of the sandbox to execute commands, you must have a <code>daiv-sandbox</code> instance running (see the daiv-sandbox repository for more information), and the <code>base_image</code> option must be set to enable sandbox functionality.</p> <p>Under your <code>.daiv.yml</code> YAML configuration file's <code>sandbox:</code> section, configure the following keys:</p> Option Type Default Description <code>base_image</code> <code>str \\| null</code> <code>null</code> Docker image for the sandbox. Use distro images only. <code>format_code</code> <code>list[str] \\| null</code> <code>null</code> List of commands to format code before committing. <p>Here's how it works:</p> <p>Before committing code generated by DAIV, DAIV will call <code>daiv-sandbox</code> to:</p> <ul> <li>Create a container from the <code>base_image</code>.</li> <li>Execute each command in the <code>format_code</code> list sequentially to format the code before committing.</li> </ul> <p>Example configuration: YAML<pre><code>sandbox:\n  base_image: \"python:3.12-alpine\"\n  format_code:\n    - \"pip install ruff\"\n    - \"ruff check --fix\"\n    - \"ruff format\"\n</code></pre></p> <p>Warning</p> <p>If any of the commands fail, DAIV will commit the code as is to be manually fixed by the user, if needed.</p> <p>Tip</p> <ul> <li>Use specific image versions for reproducibility.</li> <li>Include dependency installation commands in the <code>format_code</code> list if needed.</li> <li>The sandbox is only enabled when <code>base_image</code> is specified and <code>daiv-sandbox</code> is running.</li> </ul>"},{"location":"features/issue-addressor/","title":"\ud83e\udd16 Issue Addressor","text":"<p>Issue Addressing is a feature that allows DAIV to address issues by generating a plan and executing the necessary code changes, opening a merge request with the changes for review.</p>"},{"location":"features/issue-addressor/#triggering-runs","title":"Triggering runs","text":"<p>DAIV monitor issues for changes in the issue title, description, labels and state using webhooks. This streamlines the process of issuing a code change and requires no manual intervention to start a run.</p> <p>With Label</p> <p>You can trigger issue addressing by adding the <code>daiv</code> label to the issue.</p> <p>With Title</p> <p>You can trigger issue addressing by starting the issue title with <code>DAIV:</code> (e.g. 'DAIV: Add a new feature'). The prefix is case-insensitive, so you can use it as <code>daiv:</code> or <code>DAIV:</code>.</p>"},{"location":"features/issue-addressor/#resetting-the-plan","title":"Resetting the plan","text":"<p>You can reset the plan by:</p> <ol> <li>updating the issue title or description.</li> <li>leaving a comment with <code>@daiv plan revise</code>.</li> </ol> <p>DAIV will automatically regenerate the plan.</p>"},{"location":"features/issue-addressor/#executing-the-plan","title":"Executing the plan","text":"<p>You can execute the plan by commenting on the issue with <code>@daiv plan execute</code>. DAIV will execute the plan and open a merge request with the changes for you to review.</p> <p>After a first plan is executed on an issue, executing a second plan will override the previous merge request.</p>"},{"location":"features/issue-addressor/#workflow","title":"Workflow","text":"<pre><code>graph TD\n    A[\"\ud83d\udc64 Developer\"] --&gt; B[\"\ud83d\udcdd Creates Issue&lt;br/&gt;(title starts with 'DAIV:')\"]\n    B --&gt; C[\"\ud83d\udd14 Webhook Triggered\"]\n    C --&gt; D[\"\ud83e\udd16 Issue Addressor Agent\"]\n    D --&gt; E[\"\ud83d\udccb Analyzes Issue&lt;br/&gt;(title, description, images)\"]\n    E --&gt; F[\"\ud83d\udca1 Generates Plan\"]\n    F --&gt; G[\"\ud83d\udcac Posts Plan as Comment&lt;br/&gt;(waits for approval)\"]\n\n    H[\"\ud83d\udc64 Developer\"] --&gt; I[\"\u2705 Approves Plan&lt;br/&gt;(comments approval)\"]\n    I --&gt; J[\"\ud83d\udd14 Comment Webhook\"]\n    J --&gt; K[\"\ud83d\udd28 Executes Plan&lt;br/&gt;(plan_and_execute agent)\"]\n    K --&gt; L[\"\ud83d\udcdd Applies Code Changes\"]\n    L --&gt; M[\"\ud83c\udfa8 Code Formatting\"]\n    M --&gt; N[\"\ud83d\udce4 Creates Merge Request\"]\n    N --&gt; O[\"\ud83d\udcac Posts MR Link on Issue\"]\n\n    G --&gt; P[\"\u274c Plan Needs Changes\"]\n    P --&gt; Q[\"\ud83d\udcdd Developer Updates Issue\"]\n    Q --&gt; R[\"\ud83d\udd04 Regenerates Plan\"]\n    R --&gt; G\n\n    style B fill:#e1f5fe\n    style G fill:#fff3e0\n    style I fill:#e8f5e8\n    style N fill:#f3e5f5</code></pre>"},{"location":"features/quick-actions/","title":"\u26a1 Quick Actions","text":"<p>Quick Actions provide command-based interactions with DAIV directly from GitLab issues and merge requests. They are useful for common tasks and information requests.</p>"},{"location":"features/quick-actions/#overview","title":"Overview","text":"<p>Quick Actions are triggered by mentioning DAIV with specific commands in issue or merge request comments.</p>"},{"location":"features/quick-actions/#how-quick-actions-work","title":"How Quick Actions Work","text":"<p>Command Format: <code>@&lt;daiv-username&gt; &lt;action&gt; [arguments]</code></p> <p>Supported Scopes:</p> <ul> <li>Issues: Available in issue comments and discussions</li> <li>Merge Requests: Available in merge request comments and discussions</li> </ul> <p>Command Parsing:</p> <p>Quick Actions use shell-like parsing with support for:</p> <ul> <li>Simple commands: <code>@daiv help</code></li> <li>Commands with sub-actions: <code>@daiv plan execute</code>, <code>@daiv pipeline repair</code></li> <li>Multi-word sub-actions: <code>@daiv pipeline repair apply</code></li> <li>Case-insensitive: <code>@DAIV HELP</code> works the same as <code>@daiv help</code></li> </ul>"},{"location":"features/quick-actions/#workflow","title":"Workflow","text":"<pre><code>graph TD\n    A[\"\ud83d\udc64 User\"] --&gt; B[\"\ud83d\udcac Comments with @daiv&lt;br/&gt;(e.g., '@daiv help')\"]\n    B --&gt; C[\"\ud83d\udd14 Comment Webhook\"]\n    C --&gt; D[\"\ud83d\udcdd Quick Action Parser&lt;br/&gt;(extracts verb and args)\"]\n    D --&gt; E[\"\ud83d\udccb Registry Lookup&lt;br/&gt;(finds matching action)\"]\n\n    E --&gt; F[\"\u2705 Action Found?\"]\n    F --&gt;|Yes| G[\"\u26a1 Execute Action\"]\n    F --&gt;|No| H[\"\u274c Unknown Action Error\"]\n\n    G --&gt; I[\"\ud83d\udd0d Validate Scope&lt;br/&gt;(Issue vs Merge Request)\"]\n    I --&gt; J[\"\ud83d\udee0\ufe0f Execute Specific Logic\"]\n\n    J --&gt; K[\"\ud83d\udcd6 Help Action&lt;br/&gt;(show available commands)\"]\n    J --&gt; L[\"\ud83d\udccb Plan Action&lt;br/&gt;(regenerate/approve plan)\"]\n    J --&gt; M[\"\ud83d\udd27 Pipeline Action&lt;br/&gt;(repair failed jobs)\"]\n\n    K --&gt; N[\"\ud83d\udcac Posts Help Message\"]\n    L --&gt; O[\"\ud83d\udd04 Triggers Plan Workflow\"]\n    M --&gt; P[\"\ud83d\udea6 Triggers Pipeline Repair\"]\n\n    H --&gt; Q[\"\ud83d\udcac Posts Error Message&lt;br/&gt;(suggests valid actions)\"]\n\n    style B fill:#e1f5fe\n    style E fill:#fff3e0\n    style G fill:#e8f5e8\n    style H fill:#ffebee</code></pre>"},{"location":"features/quick-actions/#basic-usage","title":"Basic Usage","text":"<ol> <li>Navigate to any GitLab issue or merge request</li> <li>Add a comment mentioning DAIV with the desired action</li> <li>Submit the comment</li> <li>DAIV responds with the action result</li> </ol>"},{"location":"features/quick-actions/#available-quick-actions","title":"Available Quick Actions","text":""},{"location":"features/quick-actions/#help-action","title":"\ud83c\udd98 Help Action","text":"<p>Command: <code>@daiv help</code></p> <p>Purpose: Displays all available Quick Actions for the current scope (issue or merge request).</p> <p>Scopes: Issues, Merge Requests</p> <p>Example: Text Only<pre><code>@daiv help\n</code></pre></p> <p>Response: DAIV replies with a formatted list of all available Quick Actions and their descriptions.</p>"},{"location":"features/quick-actions/#plan-action","title":"\ud83d\udccb Plan Action","text":"<p>Command: <code>@daiv plan &lt;sub-action&gt;</code></p> <p>Purpose: Manage issue resolution plans with execute and revise operations.</p> <p>Scopes: Issues only</p> <p>Sub-actions:</p>"},{"location":"features/quick-actions/#execute-plan","title":"Execute Plan","text":"<ul> <li>Command: <code>@daiv plan execute</code></li> <li>Purpose: Run or launch the current plan for the issue</li> <li>Usage: Comment in discussion to approve and execute the current plan</li> </ul>"},{"location":"features/quick-actions/#revise-plan","title":"Revise Plan","text":"<ul> <li>Command: <code>@daiv plan revise</code></li> <li>Purpose: Discard current plan and create a new one from scratch</li> <li>Usage: Comment in discussion to reset and regenerate the plan</li> </ul> <p>Examples: Text Only<pre><code>@daiv plan execute\n</code></pre> Text Only<pre><code>@daiv plan revise\n</code></pre></p>"},{"location":"features/quick-actions/#pipeline-action","title":"\ud83d\udd27 Pipeline Action","text":"<p>Command: <code>@daiv pipeline &lt;sub-action&gt;</code></p> <p>Purpose: Manage merge request pipeline failures with automated repair suggestions and execution.</p> <p>Scopes: Merge Requests only</p> <p>Sub-actions:</p>"},{"location":"features/quick-actions/#repair-plan","title":"Repair Plan","text":"<ul> <li>Command: <code>@daiv pipeline repair</code></li> <li>Purpose: Suggest a repair plan to fix the failed pipeline</li> <li>Usage: Comment in discussion when pipeline has failed jobs</li> <li>Trigger Location: Discussion (initial comment)</li> </ul>"},{"location":"features/quick-actions/#apply-repair","title":"Apply Repair","text":"<ul> <li>Command: <code>@daiv pipeline repair apply</code></li> <li>Purpose: Apply the repair plan to fix the pipeline</li> <li>Usage: Reply to repair plan discussion to execute the suggested fix</li> <li>Trigger Location: Reply (to existing repair discussion)</li> </ul> <p>Examples: Text Only<pre><code>@daiv pipeline repair\n</code></pre> Text Only<pre><code>@daiv pipeline repair apply\n</code></pre></p> <p>Requirements: - Pipeline must be in \"failed\" status - Must have at least one failed job with script failure - Job must not be marked as allowed to fail</p>"},{"location":"features/quick-actions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/quick-actions/#common-issues","title":"Common Issues","text":"<p>Action not recognized:</p> <ul> <li>Check that the action supports the current scope (issue vs merge request)</li> <li>Ensure proper spelling and case (actions are case-insensitive)</li> <li>Verify sub-action syntax (e.g., <code>plan execute</code> not <code>plan-execute</code>)</li> </ul> <p>No response from DAIV:</p> <ul> <li>Confirm DAIV has access to the repository</li> <li>Check that webhooks are properly configured</li> <li>Verify the bot username is correct in the mention</li> </ul> <p>Permission errors:</p> <ul> <li>Ensure DAIV has sufficient GitLab permissions</li> <li>Confirm the user triggering the action has appropriate access levels</li> </ul> <p>Pipeline action issues:</p> <ul> <li>Ensure the pipeline is in \"failed\" status</li> <li>Check that failed jobs have <code>script_failure</code> as the failure reason</li> <li>Verify jobs are not marked as <code>allow_failure</code></li> </ul> <p>Plan action issues:</p> <ul> <li>Ensure you're commenting on an issue (not merge request)</li> <li>Check if there's an existing plan to execute or revise</li> </ul>"},{"location":"features/quick-actions/#debug-information","title":"Debug Information","text":"<p>Quick Actions log detailed information for troubleshooting:</p> <ul> <li>Command parsing results</li> <li>Registry lookup attempts</li> <li>Execution success/failure</li> <li>Error details and stack traces</li> </ul>"},{"location":"features/quick-actions/#examples","title":"Examples","text":""},{"location":"features/quick-actions/#getting-help","title":"Getting Help","text":"Text Only<pre><code>@daiv help\n</code></pre> <p>Response: Text Only<pre><code>### \ud83e\udd16 DAIV Quick-Actions\nComment one of the commands below on this issue to trigger the bot:\n\n- `@daiv help` - Shows the help message with the available quick actions.\n- `@daiv plan execute` - Run or launch the current plan.\n- `@daiv plan revise` - Discard current plan and create a new one from scratch.\n</code></pre></p>"},{"location":"features/quick-actions/#extension-and-development","title":"Extension and Development","text":""},{"location":"features/quick-actions/#adding-new-actions","title":"Adding New Actions","text":"<ol> <li>Create new action class in <code>automation/quick_actions/actions/</code></li> <li>Implement required methods <code>execute_action</code> and <code>actions</code></li> <li>Decorate with <code>@quick_action</code> specifying verb and scopes</li> <li>Import in the actions module</li> <li>Test the action in development environment</li> </ol>"},{"location":"features/quick-actions/#best-practices","title":"Best Practices","text":"<ul> <li>Keep actions simple: Quick Actions should execute immediately</li> <li>Provide clear descriptions: Help users understand what each action does</li> <li>Handle errors gracefully: Post user-friendly error messages</li> <li>Use appropriate scopes: Only enable actions where they make sense</li> <li>Follow naming conventions: Use clear, descriptive verb names</li> </ul>"},{"location":"features/review-addressor/","title":"Review Addressor","text":""},{"location":"features/review-addressor/#code-review-response-workflow","title":"\ud83d\udcac Code Review Response Workflow","text":"<pre><code>graph TD\n    A[\"\ud83d\udc65 Code Reviewer\"] --&gt; B[\"\ud83d\udcac Comments on Merge Request&lt;br/&gt;(requests changes or asks questions)\"]\n    B --&gt; C[\"\ud83d\udd14 Comment Webhook\"]\n    C --&gt; D[\"\ud83e\udd16 Review Addressor Agent\"]\n    D --&gt; E[\"\ud83d\udcca Comment Assessment&lt;br/&gt;(ReviewCommentEvaluator)\"]\n\n    E --&gt; F[\"\ud83d\udd0d Change Request?\"]\n    F --&gt;|Yes| G[\"\ud83d\udee0\ufe0f Plan &amp; Execute&lt;br/&gt;(code changes needed)\"]\n    F --&gt;|No| H[\"\ud83d\udcac Reply to Reviewer&lt;br/&gt;(answer questions)\"]\n\n    G --&gt; I[\"\ud83d\udcdd Analyzes Code Context\"]\n    I --&gt; J[\"\ud83d\udd28 Applies Code Changes\"]\n    J --&gt; K[\"\ud83c\udfa8 Code Formatting\"]\n    K --&gt; L[\"\ud83d\udce4 Commits to MR Branch\"]\n    L --&gt; M[\"\u2705 Marks Discussion Resolved&lt;br/&gt;'Review comment addressed'\"]\n\n    H --&gt; N[\"\ud83d\udd0d Gathers Context&lt;br/&gt;(if needed)\"]\n    N --&gt; O[\"\ud83d\udcad Thinks Through Response\"]\n    O --&gt; P[\"\ud83d\udcac Posts Detailed Reply\"]\n\n    style B fill:#e1f5fe\n    style E fill:#fff3e0\n    style G fill:#ffebee\n    style H fill:#e8f5e8\n    style M fill:#f3e5f5</code></pre>"},{"location":"getting-started/configuration/","title":"Repository Configuration","text":"<p>This guide walks you through connecting DAIV to your GitLab repository. Once configured, DAIV will automatically implement the issues, respond to code reviews, and more...</p>"},{"location":"getting-started/configuration/#prerequisites","title":"Prerequisites","text":"<p>Before configuring a repository, ensure you have:</p> <ul> <li>DAIV installed and running - Follow the installation guide first</li> <li>GitLab repository access - Admin or maintainer permissions on the repository you want to connect</li> <li>GitLab personal access token - With <code>api</code> scope permissions</li> </ul>"},{"location":"getting-started/configuration/#step-1-create-gitlab-personal-access-token","title":"Step 1: Create GitLab Personal Access Token","text":"<p>DAIV needs a GitLab personal access token to interact with your repositories.</p> <ol> <li> <p>Navigate to GitLab Settings:</p> <ul> <li>Go to your GitLab instance (e.g., <code>https://gitlab.com</code>)</li> <li>Click your avatar \u2192 Edit profile \u2192 Access Tokens</li> </ul> </li> <li> <p>Create New Token:</p> <ul> <li>Name: <code>DAIV Integration</code></li> <li>Expiration: Set according to your security policy (recommended: 1 year)</li> <li>Scopes: Select <code>api</code> (full API access)</li> <li>Click Create personal access token</li> </ul> </li> <li> <p>Copy the Token:</p> <ul> <li>Important: Copy and save the token immediately - you won't see it again</li> <li>The token format looks like: <code>glpat-xxxxxxxxxxxxxxxxxxxx</code></li> </ul> </li> </ol> <p>Token Security</p> <p>Store your token securely. Never commit it to version control or share it publicly.</p>"},{"location":"getting-started/configuration/#step-2-configure-environment-variables","title":"Step 2: Configure Environment Variables","text":"<p>Add your GitLab token and webhook secret to DAIV's environment configuration.</p>"},{"location":"getting-started/configuration/#for-docker-compose-setup","title":"For Docker Compose Setup","text":"<p>Edit your <code>docker-compose.yml</code> file:</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  # ...\n  environment:\n    CODEBASE_GITLAB_URL: https://gitlab.com # or your GitLab instance URL\n    CODEBASE_GITLAB_AUTH_TOKEN: glpat-xxxxxxxxxxxxxxxxxxxx # Your personal access token\n    CODEBASE_GITLAB_WEBHOOK_SECRET: your-webhook-secret-here # Random secret for webhook validation\n  # ...\n</code></pre>"},{"location":"getting-started/configuration/#for-docker-swarm-setup","title":"For Docker Swarm Setup","text":"<p>Create Docker secrets:</p> Bash<pre><code># Create secrets for GitLab integration\necho \"glpat-xxxxxxxxxxxxxxxxxxxx\" | docker secret create codebase_gitlab_auth_token -\necho \"your-webhook-secret-here\" | docker secret create codebase_gitlab_webhook_secret -\n</code></pre> <p>Generating Webhook Secret</p> <p>Generate a secure random webhook secret: Bash<pre><code>openssl rand -hex 32\n</code></pre></p>"},{"location":"getting-started/configuration/#step-3-set-up-repository-webhooks","title":"Step 3: Set Up Repository Webhooks","text":"<p>DAIV uses webhooks to receive real-time notifications from GitLab about repository events.</p>"},{"location":"getting-started/configuration/#automatic-webhook-setup-recommended","title":"Automatic Webhook Setup (Recommended)","text":"<p>Use DAIV's management command to automatically set up webhooks for all accessible repositories:</p> Bash<pre><code># Enter the DAIV container\ndocker compose exec -it app bash\n\n# Set up webhooks for all repositories\ndjango-admin setup_webhooks --base-url https://your-daiv-instance.com\n\n# For local development with self-signed certificates\ndjango-admin setup_webhooks --base-url https://your-daiv-instance.com --disable-ssl-verification\n</code></pre>"},{"location":"getting-started/configuration/#manual-webhook-setup","title":"Manual Webhook Setup","text":"<p>If you prefer to set up webhooks manually or for specific repositories:</p> <ol> <li> <p>Navigate to Repository Settings:</p> <ul> <li>Go to your GitLab repository</li> <li>Navigate to Settings \u2192 Webhooks</li> </ul> </li> <li> <p>Add New Webhook:</p> <ul> <li>URL: <code>https://your-daiv-instance.com/api/codebase/callbacks/gitlab/</code></li> <li>Secret token: Use the same secret from your environment variables</li> <li>Trigger events: Select:<ul> <li>\u2705 Push events</li> <li>\u2705 Issues events</li> <li>\u2705 Comments (Note events)</li> <li>\u2705 Pipeline events</li> </ul> </li> <li>SSL verification: Enable (unless using self-signed certificates)</li> </ul> </li> <li> <p>Test the Webhook:</p> <ul> <li>Click Add webhook</li> <li>Click Test \u2192 Push events to verify connectivity</li> </ul> </li> </ol>"},{"location":"getting-started/configuration/#step-5-configure-repository-behavior","title":"Step 5: Configure Repository Behavior","text":"<p>To customize DAIV's behavior, create a <code>.daiv.yml</code> file in your repository's root.</p> <p>For complete configuration options, see Repository Configurations.</p>"},{"location":"getting-started/configuration/#step-6-test-the-integration","title":"Step 6: Test the Integration","text":"<p>Verify that DAIV is properly connected to your repository.</p> <ol> <li> <p>Create a Test Issue:</p> <ul> <li>Go to your GitLab repository</li> <li>Create a new issue with title: \"Add hello world function\" (or any other issue you want to address)</li> <li>Add the <code>daiv</code> label to the issue or start the issue title with \"DAIV:\"</li> </ul> </li> <li> <p>Wait for DAIV Response:</p> <ul> <li>DAIV should automatically comment with a plan to address the issue</li> <li>Check the issue comments for DAIV's response</li> </ul> </li> </ol>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Webhook delivery fails:</p> <ul> <li>Verify the webhook URL is accessible from GitLab</li> <li>Check SSL certificate validity</li> <li>Review firewall settings</li> </ul> <p>Issues not being processed:</p> <ul> <li>Ensure the <code>daiv</code> label is added to issues</li> <li>Verify <code>auto_address_issues_enabled: true</code> in <code>.daiv.yml</code></li> <li>Check DAIV logs for errors</li> </ul> <p>No response to comments:</p> <ul> <li>Verify webhook events include \"Comments\"</li> <li>Check that webhook secret matches environment variable</li> <li>Review repository permissions</li> </ul>"},{"location":"getting-started/configuration/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>With your repository configured, you can now:</p> <ul> <li>Learn about AI agents - Understand how DAIV's agents work</li> <li>Customize agent behavior - Fine-tune DAIV for your workflow</li> <li>Configure monitoring - Configure LangSmith for monitoring</li> </ul>"},{"location":"getting-started/supported-providers/","title":"Supported Providers","text":"<p>DAIV currently supports integration with the following LLM providers:</p> <ul> <li>OpenRouter</li> <li>OpenAI</li> <li>Anthropic</li> <li>Gemini</li> </ul> <p>A combination of providers may be configured. For example, you can use OpenAI provider for one agent and Gemini provider for another.</p>"},{"location":"getting-started/supported-providers/#openrouter","title":"OpenRouter","text":"<p>OpenRouter is the default provider for DAIV due to its fallback mechanism and wide range of models from multiple providers.</p> <p>Setup:</p> <ol> <li>Obtain an API key from OpenRouter Settings.</li> <li>Set the <code>OPENROUTER_API_KEY</code> environment variable:    Bash<pre><code>export OPENROUTER_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by OpenRouter, prefixed with <code>openrouter:</code>. For example:</p> Text Only<pre><code>openrouter:openai/gpt-4.1\nopenrouter:anthropic/claude-3-7-sonnet\n</code></pre>"},{"location":"getting-started/supported-providers/#openai","title":"OpenAI","text":"<p>Setup:</p> <ol> <li>Obtain an API key from OpenAI.</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable:    Bash<pre><code>export OPENAI_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by OpenAI. For example:</p> Text Only<pre><code>gpt-4.1\no4-mini\n</code></pre>"},{"location":"getting-started/supported-providers/#anthropic","title":"Anthropic","text":"<p>Setup:</p> <ol> <li>Obtain an API key from Anthropic.</li> <li>Set the <code>ANTHROPIC_API_KEY</code> environment variable:    Bash<pre><code>export ANTHROPIC_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by Anthropic. For example:</p> Text Only<pre><code>claude-3-7-sonnet-20250219\nclaude-3-5-sonnet-20241022\n</code></pre> <p>Warning</p> <p>We love Anthropic, but unfortunately their API is very unstable and often returns errors. Also, the rate limits could be exceeded very quickly.</p>"},{"location":"getting-started/supported-providers/#gemini","title":"Gemini","text":"<p>Setup:</p> <ol> <li>Obtain an API key from AI Studio.</li> <li>Set the <code>GOOGLE_API_KEY</code> environment variable:    Bash<pre><code>export GOOGLE_API_KEY=your-api-key-here\n</code></pre></li> </ol> <p>Usage:</p> <p>When declaring a model, use the model name provided by Gemini. For example:</p> Text Only<pre><code>gemini-2.4-flash-preview-04-17\ngemini-2.5-pro-preview-05-06\n</code></pre>"},{"location":"getting-started/up-and-running/","title":"Up and Running","text":"<p>This guide walks you through deploying DAIV using Docker Swarm or Docker Compose. After completing this guide, you'll have a fully functional DAIV instance ready to connect to your codebase.</p>"},{"location":"getting-started/up-and-running/#what-youll-deploy","title":"What You'll Deploy","text":"<p>DAIV requires several core services to function properly. You'll deploy these services using container orchestration:</p> <p>Required Core Services:</p> <ul> <li>PostgreSQL - Stores application data;</li> <li>Redis - Handles caching and message queueing;</li> <li>DAIV Application - Main API;</li> <li>DAIV Worker - Background task processor.</li> </ul> <p>Optional Service:</p> <ul> <li>DAIV Sandbox - Isolated environment for running arbitrary commands;</li> <li>MCP Proxy - Proxy MCP server to run other MCP servers inside a container.</li> </ul>"},{"location":"getting-started/up-and-running/#docker-swarm-recommended","title":"Docker Swarm (Recommended)","text":"<p>Docker Swarm provides better production deployment capabilities including service discovery, load balancing, and rolling updates. This guide covers single-server deployment, but you can extend it to multiple servers using the Docker Swarm documentation.</p> <p>Prerequisites</p> <ul> <li>Docker installed with Swarm enabled</li> <li>Internet connection to pull container images</li> <li>Basic understanding of Docker Swarm</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-create-docker-secrets","title":"Step 1: Create Docker Secrets","text":"<p>Before deploying, you must create these Docker secrets. These secrets store sensitive configuration data securely:</p> <p>Required Secrets:</p> <ul> <li><code>django_secret_key</code> - Random secret key for Django (generate one here)</li> <li><code>db_password</code> - Random password for the PostgreSQL database</li> <li><code>codebase_gitlab_auth_token</code> - GitLab personal access token with <code>api</code> scope (see how to create one)</li> <li><code>codebase_gitlab_webhook_secret</code> - Random secret for GitLab webhook validation</li> <li><code>daiv_sandbox_api_key</code> - Random API key for Sandbox service authentication</li> <li><code>openrouter_api_key</code> - OpenRouter API key for LLM access</li> <li><code>mcp_proxy_auth_token</code> - Random API key for MCP Proxy service authentication</li> </ul> <p>Create each secret using this command (see Docker Secrets documentation for more details):</p> Bash<pre><code>docker secret create django_secret_key &lt;secret_key&gt;\n</code></pre> <p>Additional Secrets May Be Required</p> <p>These are the minimal secrets for basic DAIV functionality. Check the Environment Variables page for additional secrets needed for specific features or services.</p>"},{"location":"getting-started/up-and-running/#step-2-create-stackyml-file","title":"Step 2: Create <code>stack.yml</code> file","text":"<p>Create your deployment configuration file. This YAML file defines all services, networks, and volumes needed for DAIV.</p> <p>Customize Environment Variables</p> <p>Replace all annotated values with your own configuration. See the Environment Variables page for complete configuration options.</p> YAML<pre><code>x-app-environment-defaults: &amp;app_environment_defaults\n  # DJANGO\n  DJANGO_SETTINGS_MODULE: daiv.settings.production\n  DJANGO_ALLOWED_HOSTS: your-hostname.com,app,127.0.0.1 (1)\n  DJANGO_REDIS_URL: redis://daiv_redis:6379/0\n  DJANGO_BROKER_URL: redis://daiv_redis:6379/0\n  DAIV_EXTERNAL_URL: https://your-hostname.com (2)\n  # DATABASE\n  DB_NAME: daiv\n  DB_USER: daiv_admin\n  DB_HOST: daiv_db\n  DB_SSLMODE: prefer\n  # CODEBASE\n  CODEBASE_CLIENT: gitlab\n  CODEBASE_GITLAB_URL: https://gitlab.com (3)\n  # SANDBOX\n  DAIV_SANDBOX_URL: http://sandbox:8000 (4)\n\nx-deploy-defaults: &amp;deploy_defaults\n  replicas: 1\n  update_config:\n    order: start-first\n    delay: 60s\n    failure_action: rollback\n  rollback_config:\n    parallelism: 0\n  restart_policy:\n    condition: any\n    window: 120s\n\nservices:\n  db:\n    image: postgres:17.6\n    environment:\n      - POSTGRES_DB=daiv\n      - POSTGRES_USER=daiv_admin\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password\n    networks:\n      - internal\n    secrets:\n      - db_password\n    volumes:\n      - db-volume:/var/lib/postgresql/data\n    stop_grace_period: 30s\n    healthcheck:\n      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER\n      interval: 10s\n      start_period: 120s\n    deploy:\n      replicas: 1\n      update_config:\n        failure_action: rollback\n        delay: 10s\n      rollback_config:\n        parallelism: 0\n      restart_policy:\n        condition: any\n        window: 120s\n\n  redis:\n    image: redis:7-alpine\n    networks:\n      - internal\n    volumes:\n      - redis-volume:/data\n    healthcheck:\n      test: redis-cli ping || exit 1\n      interval: 10s\n      start_period: 30s\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  app:\n    image: ghcr.io/srtab/daiv:latest (5)\n    environment:\n      &lt;&lt;: *app_environment_defaults\n    secrets:\n      - django_secret_key\n      - db_password\n      - codebase_gitlab_auth_token\n      - codebase_gitlab_webhook_secret\n      - daiv_sandbox_api_key\n      - openrouter_api_key\n      - mcp_proxy_auth_token\n    networks:\n      - internal\n      - external\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - mcp-proxy-volume:/home/daiv/data/mcp-proxy\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  worker:\n    image: ghcr.io/srtab/daiv:latest (5)\n    command: sh /home/daiv/start-worker\n    environment:\n      &lt;&lt;: *app_environment_defaults\n      CELERY_CONCURRENCY: 2 (6)\n    secrets:\n      - django_secret_key\n      - db_password\n      - codebase_gitlab_auth_token\n      - codebase_gitlab_webhook_secret\n      - daiv_sandbox_api_key\n      - openrouter_api_key\n      - mcp_proxy_auth_token\n    networks:\n      - internal\n    volumes:\n      - mcp-proxy-volume:/home/daiv/data/mcp-proxy\n    healthcheck:\n      test: celery -A daiv inspect ping\n      interval: 10s\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  sandbox:\n    image: ghcr.io/srtab/daiv-sandbox:latest (5)\n    environment:\n      DAIV_SANDBOX_KEEP_TEMPLATE: true (7)\n    networks:\n      - internal\n    secrets:\n      - daiv_sandbox_api_key\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock (8)\n      - $HOME/.docker/config.json:/home/app/.docker/config.json (9)\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n  mcp-proxy:\n    image: ghcr.io/tbxark/mcp-proxy:v0.39.1\n    networks:\n      - internal\n    volumes:\n      - mcp-proxy-volume:/config\n    deploy:\n      &lt;&lt;: *deploy_defaults\n\n\nnetworks:\n  internal:\n    driver: overlay\n  external:\n    driver: overlay\n\nvolumes:\n  db-volume:\n    driver: local\n  redis-volume:\n    driver: local\n  mcp-proxy-volume:\n    driver: local\n\nsecrets:\n  django_secret_key:\n    external: true\n  db_password:\n    external: true\n  codebase_gitlab_auth_token:\n    external: true\n  codebase_gitlab_webhook_secret:\n    external: true\n  daiv_sandbox_api_key:\n    external: true\n  openrouter_api_key:\n    external: true\n  mcp_proxy_auth_token:\n    external: true\n</code></pre> <ol> <li>Replace <code>your-hostname.com</code> with your domain name. Don't include the schema (e.g., use <code>daiv.com</code> not <code>https://daiv.com</code>). Keep <code>app</code> and <code>127.0.0.1</code> for internal service communication.</li> <li>Replace with your full domain URL including schema (e.g., <code>https://your-hostname.com</code>)</li> <li>Set to your GitLab instance URL (e.g., <code>https://gitlab.com</code> for GitLab.com)</li> <li>Points to the Sandbox service. Use <code>http://sandbox:8000</code> when deploying Sandbox in the same stack</li> <li>Recommended: Replace <code>latest</code> with a specific version tag for production deployments</li> <li>Number of parallel worker processes. Adjust based on your server resources and expected workload</li> <li>See DAIV Sandbox documentation for configuration details</li> <li>Required: Sandbox needs Docker socket access to create isolated containers</li> <li>Optional: Remove this volume if you don't need private registry access</li> </ol>"},{"location":"getting-started/up-and-running/#step-3-deploy-the-stack","title":"Step 3: Deploy the stack","text":"<p>Deploy your DAIV stack by running this command from the directory containing your <code>stack.yml</code> file:</p> Bash<pre><code>docker stack deploy -c stack.yml daiv\n</code></pre> <p>Monitor deployment progress with these commands:</p> Bash<pre><code># Check service status with full details\ndocker stack ps daiv --no-trunc\n\n# Or check running containers\ndocker ps\n</code></pre> <p>Deployment Time</p> <p>Services may take several minutes to become fully healthy, especially during the initial deployment when images are being pulled and databases are being initialized.</p>"},{"location":"getting-started/up-and-running/#step-4-next-steps","title":"Step 4: \u23ed\ufe0f Next steps","text":"<p>Your DAIV deployment is now running! Follow the Reverse Proxy guide below to configure external access, then proceed to connect your first repository.</p>"},{"location":"getting-started/up-and-running/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose provides simpler deployment suitable for development environments or smaller production setups. This method uses a single configuration file to manage all services.</p> <p>Prerequisites</p> <ul> <li>Docker installed with Compose</li> <li>Internet connection to pull container images</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-create-docker-composeyml-file","title":"Step 1: Create <code>docker-compose.yml</code> file","text":"<p>Create your Docker Compose configuration. This file defines all services and their configurations in a single place.</p> <p>Environment Variable Configuration</p> <p>Replace all annotated values with your specific configuration. See the Environment Variables page for additional options.</p> YAML<pre><code>x-app-defaults: &amp;x_app_default\n  image: ghcr.io/srtab/daiv:latest\n  restart: unless-stopped\n  environment:\n    DJANGO_SECRET_KEY: secret-key (1)\n    DJANGO_ALLOWED_HOSTS: your-hostname.com,app,127.0.0.1 (2)\n    DJANGO_REDIS_URL: redis://redis:6379/0\n    DJANGO_BROKER_URL: redis://redis:6379/0\n    DAIV_EXTERNAL_URL: https://your-hostname.com (12)\n    # Database settings\n    DB_HOST: db\n    DB_NAME: daiv\n    DB_USER: daiv\n    DB_PASSWORD: daivpass (3)\n    DB_SSLMODE: prefer\n    # Codebase settings\n    CODEBASE_CLIENT: gitlab\n    CODEBASE_GITLAB_URL: https://gitlab.com (4)\n    CODEBASE_GITLAB_AUTH_TOKEN: gitlab-auth-token (5)\n    CODEBASE_GITLAB_WEBHOOK_SECRET: gitlab-webhook-secret (6)\n    # LLM Providers settings\n    OPENROUTER_API_KEY: openrouter-api-key (8)\n    # Sandbox settings\n    DAIV_SANDBOX_API_KEY: daiv-sandbox-api-key (9)\n    # MCP Proxy settings\n    MCP_PROXY_AUTH_TOKEN: mcp-proxy-auth-token (13)\n  volumes:\n    - mcp-proxy-volume:/home/app/data/mcp-proxy\n\nservices:\n  db:\n    image: postgres:17.6\n    container_name: daiv-db\n    restart: unless-stopped\n    environment:\n      POSTGRES_DB: daiv\n      POSTGRES_USER: daiv\n      POSTGRES_PASSWORD: daivpass (10)\n    volumes:\n      - db-volume:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U daiv -d daiv\"]\n      interval: 10s\n      timeout: 10s\n      start_period: 30s\n      retries: 5\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:latest\n    restart: unless-stopped\n    container_name: daiv-redis\n    volumes:\n      - redis-volume:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    ports:\n      - \"6379:6379\"\n\n  app:\n    &lt;&lt;: *x_app_default\n    container_name: daiv-app\n    command: sh /home/app/docker/start-app\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n      redis:\n        condition: service_healthy\n        restart: true\n      sandbox:\n        condition: service_healthy\n\n  worker:\n    &lt;&lt;: *x_app_default\n    container_name: daiv-worker\n    command: sh /home/app/docker/start-worker\n    environment:\n      C_FORCE_ROOT: true\n    ports: []\n    depends_on:\n      app:\n        condition: service_healthy\n        restart: true\n\n  sandbox:\n    image: ghcr.io/srtab/daiv-sandbox:latest\n    restart: unless-stopped\n    container_name: daiv-sandbox\n    environment:\n      DAIV_SANDBOX_API_KEY: daiv-sandbox-api-key (11)\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - $HOME/.docker/config.json:/home/app/.docker/config.json\n\n  mcp-proxy:\n    image: ghcr.io/tbxark/mcp-proxy:v0.39.1\n    restart: unless-stopped\n    container_name: daiv-mcp-proxy\n    volumes:\n      - mcp-proxy-volume:/config\n    ports:\n      - \"9090:9090\"\n    depends_on:\n      app:\n        condition: service_healthy\n        restart: true\n\nvolumes:\n  db-volume:\n    driver: local\n  redis-volume:\n    driver: local\n  mcp-proxy-volume:\n    driver: local\n</code></pre> <ol> <li>Generate a Django secret key - Use a cryptographically secure random string</li> <li>Replace with your domain name - Don't include schema (e.g., <code>daiv.com</code>)</li> <li>Generate a secure random password for the database</li> <li>Set your GitLab instance URL (e.g., <code>https://gitlab.com</code>)</li> <li>Create a GitLab personal access token with <code>api</code> scope permissions (see how to create one)</li> <li>Generate a random webhook secret for GitLab webhook validation</li> <li>Get an OpenRouter API key for LLM model access</li> <li>Generate a random API key for Sandbox service authentication</li> <li>Use the same password as defined in annotation 3</li> <li>Use the same API key as defined in annotation 9</li> <li>Include the full URL with schema (e.g., <code>https://your-hostname.com</code>)</li> <li>Generate a random API key for MCP Proxy service authentication</li> </ol>"},{"location":"getting-started/up-and-running/#step-2-run-the-compose-file","title":"Step 2: Run the compose file","text":"<p>Start all DAIV services by running this command from the directory containing your <code>docker-compose.yml</code>:</p> Bash<pre><code>docker compose up -d\n</code></pre> <p>Check service status to ensure everything is running correctly:</p> Bash<pre><code>docker compose ps\n</code></pre>"},{"location":"getting-started/up-and-running/#step-3-next-steps","title":"Step 3: \u23ed\ufe0f Next steps","text":"<p>Your DAIV instance is now operational! Continue with the Reverse Proxy configuration below, then proceed to connect your first repository.</p>"},{"location":"getting-started/up-and-running/#reverse-proxy","title":"Reverse Proxy","text":"<p>Configure a reverse proxy to provide secure external access to your DAIV instance. This setup enables HTTPS access and proper domain routing.</p> <p>This guide covers Nginx configuration. Basic Nginx knowledge is assumed.</p> <p>Contributions Welcome</p> <p>Only Nginx configuration is provided currently. Contributions for Apache, Traefik, and other reverse proxy configurations are welcome!</p> <p>Prerequisites</p> <ul> <li>Nginx installed</li> <li>Valid SSL certificate for your domain</li> <li>Domain name pointing to your server</li> </ul>"},{"location":"getting-started/up-and-running/#step-1-configure-nginx","title":"Step 1: Configure Nginx","text":"<p>Create a new Nginx configuration file at <code>/etc/nginx/conf.d/daiv.conf</code> (path may vary by operating system).</p> <p>Add this configuration and customize the annotated values:</p> Nginx Configuration File<pre><code>upstream daiv-instance {\n  server internal-ip:8000;  (1)\n}\n\nserver {\n  listen              443 ssl;\n  listen              [::]:443 ssl;\n\n  http2               on;\n\n  server_name         your-hostname.com;  (2)\n\n  # SSL Configuration.\n  # You can use this https://ssl-config.mozilla.org/ to generate\n  # the correct ssl configuration for your server.\n  ssl_certificate      /etc/pki/tls/certs/ssl.crt;  (3)\n  ssl_certificate_key  /etc/pki/tls/private/ssl.key;  (4)\n\n  ssl_protocols TLSv1.3;\n  ssl_ecdh_curve X25519:prime256v1:secp384r1;\n  ssl_prefer_server_ciphers off;\n\n  location / {\n    proxy_pass              http://daiv-instance;\n    proxy_set_header        Host $host;\n    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header        X-Forwarded-Proto $scheme;\n    proxy_set_header        X-Real-IP $remote_addr;\n    proxy_redirect          off;\n    proxy_buffering         off;\n    proxy_connect_timeout   60;\n    proxy_send_timeout      60;\n    proxy_read_timeout      60;\n\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n  }\n}\n\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    return 301 https://$host$request_uri;\n}\n</code></pre> <ol> <li>Set the internal IP of your DAIV instance. Use <code>localhost</code> or <code>127.0.0.1</code> if running on the same server</li> <li>Replace with your domain name (e.g., <code>daiv.example.com</code>)</li> <li>Update the SSL certificate path - Location varies by operating system</li> <li>Update the SSL certificate key path - Location varies by operating system</li> </ol>"},{"location":"getting-started/up-and-running/#step-2-restart-nginx","title":"Step 2: Restart Nginx","text":"<p>Apply the configuration changes by restarting Nginx:</p> Bash<pre><code>systemctl restart nginx\n</code></pre> <p>Verify the configuration by accessing your domain in a web browser. You should see the DAIV interface.</p>"},{"location":"getting-started/up-and-running/#final-steps-and-repository-configuration","title":"\ud83d\ude80 Final Steps and Repository Configuration","text":"<p>Congratulations! Your DAIV instance is now running and accessible. To start using DAIV with your repositories, follow these essential next steps:</p>"},{"location":"getting-started/up-and-running/#1-connect-your-first-repository","title":"1. Connect Your First Repository","text":"<p>Your next step is connecting DAIV to your GitLab repositories. This process involves:</p> <ul> <li>Creating GitLab personal access tokens</li> <li>Configuring repository webhooks</li> <li>Setting up automated workflows\\</li> </ul> <p>\ud83d\udcd6 Follow the complete repository setup guide: Repository Configuration</p>"},{"location":"getting-started/up-and-running/#2-what-you-can-do-after-configuration","title":"2. What You Can Do After Configuration","text":"<p>Once your repository is connected, DAIV will automatically:</p> <ul> <li>Respond to issues - DAIV analyzes issues and suggests solutions or implementation plans</li> <li>Review pull requests - Automated code review and suggestions for improvements</li> <li>Address pipeline failures - Investigates CI/CD failures and proposes fixes</li> </ul>"},{"location":"getting-started/up-and-running/#3-monitoring-your-instance","title":"3. Monitoring Your Instance","text":"<p>Keep track of your DAIV deployment:</p> Bash<pre><code># Check service health (Docker Swarm)\ndocker stack ps daiv\n\n# Check service health (Docker Compose)\ndocker compose ps\n\n# View application logs\ndocker logs &lt;container_name&gt;\n</code></pre>"},{"location":"getting-started/up-and-running/#4-getting-help","title":"4. Getting Help","text":"<p>If you encounter issues during setup:</p> <ul> <li>Check the logs for error messages and debugging information</li> <li>Review the Environment Variables for configuration options</li> <li>Verify network connectivity between services and external APIs</li> <li>Ensure all secrets and API keys are valid and have proper permissions</li> <li>Ask for help on the GitHub Discussions</li> </ul>"}]}