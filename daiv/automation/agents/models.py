from __future__ import annotations

from decimal import Decimal
from typing import Literal

from openai.types.chat import ChatCompletionMessageToolCall  # noqa: TCH002
from pydantic import BaseModel


class Message(BaseModel):
    content: str | None = None
    """The contents of the message."""

    role: Literal["user", "assistant", "system", "tool", "model"] = "user"
    """The role of the author of this message."""

    tool_calls: list[ChatCompletionMessageToolCall] | None = None
    """The tool calls generated by the model, such as function calls."""

    tool_call_id: str | None = None
    """The ID of the tool call generated by the model."""

    model_instance: BaseModel | None = None
    """The model instance that generated the message."""


class ToolCall(BaseModel):
    id: str | None = None
    """The ID of the tool call."""

    function: str
    """The name of the function called."""

    kwargs: dict
    """The keyword arguments passed to the function."""


class Usage(BaseModel):
    completion_tokens: int = 0
    """The number of tokens used for completion."""

    prompt_tokens: int = 0
    """The number of tokens used for the prompt."""

    total_tokens: int = 0
    """The total number of tokens used."""

    prompt_cost: Decimal = Decimal(0.0)
    """The cost of the prompt tokens."""

    completion_cost: Decimal = Decimal(0.0)
    """The cost of the completion tokens."""

    total_cost: Decimal = Decimal(0.0)
    """The total cost of the tokens."""

    def __add__(self, other: Usage):
        self.completion_tokens += other.completion_tokens
        self.prompt_tokens += other.prompt_tokens
        self.total_tokens += other.total_tokens
        self.prompt_cost += other.prompt_cost
        self.completion_cost += other.completion_cost
        self.total_cost += other.total_cost
        return self
