#!/bin/bash

set -euo pipefail

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
file_env() {
	local var="$1"
	local fileVar="${var}_FILE"
	local def="${2:-}"
	if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
        printf '%s [ERROR] [Entrypoint]: "Both %s and %s are set (but are exclusive)"\n' "$(date --rfc-3339=seconds)" $var $fileVar
	fi
	local val="$def"
	if [ "${!var:-}" ]; then
		val="${!var}"
	elif [ "${!fileVar:-}" ]; then
		val="$(< "${!fileVar}")"
	fi
	export "$var"="$val"
	unset "$fileVar"
}

# Workaround for Langsmith API key not supporting docker secrets in the environment variables
file_env 'LANGSMITH_API_KEY'

postgres_ready() {
python << END
import sys
import traceback
import psycopg
try:
    psycopg.connect(
        dbname="${DB_NAME}",
        user="${DB_USER}",
        password="${DB_PASSWORD:-$(cat /run/secrets/db_password)}",
        host="${DB_HOST:-localhost}",
        port="${DB_PORT:-5432}",
        sslmode="${DB_SSLMODE:-require}"
    )
except psycopg.OperationalError as e:
    print(e)
    sys.exit(-1)
except Exception:
    traceback.print_exc()
    sys.exit(-1)
sys.exit(0)
END
}

until postgres_ready; do
  printf 'Waiting for PostgreSQL to become available...\n'
  sleep 1
done
printf 'PostgreSQL is available\n'

exec "$@"
